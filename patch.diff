diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Lexer.cs Editor/Addons/CSP/Lexer.cs
--- .Editor/Addons/CSP/Lexer.cs	2018-06-30 08:59:18.136518400 +0700
+++ Editor/Addons/CSP/Lexer.cs	2018-06-30 09:02:03.635462900 +0700
@@ -878,9 +878,11 @@
 						{
 //                            tokens.AddLast(new Token(TokenID.ShiftRightEqual, curLine, curCol));
 							tokens.AddLast(new Token(TokenID.Greater, curLine, curCol));
-							Token tok = new Token(TokenID.GreaterEqual, curLine, curCol);
-							tok.LastCharWasGreater = true;
-							tokens.AddLast(tok);
+                                    Token tok = new Token(TokenID.GreaterEqual, curLine, curCol)
+                                    {
+                                        LastCharWasGreater = true
+                                    };
+                                    tokens.AddLast(tok);
 
 							c = src.Read();
                             curCol++;
@@ -889,9 +891,11 @@
 						{
 #if !BLUB
 							tokens.AddLast(new Token(TokenID.Greater, curLine, curCol));
-							Token tok = new Token(TokenID.Greater, curLine, curCol);
-							tok.LastCharWasGreater = true;
-							tokens.AddLast(tok);
+                                    Token tok = new Token(TokenID.Greater, curLine, curCol)
+                                    {
+                                        LastCharWasGreater = true
+                                    };
+                                    tokens.AddLast(tok);
 
 							possibleGeneric = true;
 							previousWasGreater = false;     // we handle the current greater here
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Nodes/Expressions/BinaryExpression.cs Editor/Addons/CSP/Nodes/Expressions/BinaryExpression.cs
--- .Editor/Addons/CSP/Nodes/Expressions/BinaryExpression.cs	2018-06-30 08:59:18.188532200 +0700
+++ Editor/Addons/CSP/Nodes/Expressions/BinaryExpression.cs	2018-06-30 09:02:03.666472600 +0700
@@ -14,48 +14,50 @@
 
         static BinaryExpression()
         {
-            stringMap = new Dictionary<TokenID, string>();
-            stringMap.Add(TokenID.Not, @"!");
-            stringMap.Add(TokenID.Percent, @"%");
-            stringMap.Add(TokenID.BAnd, @"&");
-            stringMap.Add(TokenID.BOr, @"|");
-            stringMap.Add(TokenID.BXor, @"^");
-            stringMap.Add(TokenID.Star, @"*");
-            stringMap.Add(TokenID.Plus, @"+");
-            stringMap.Add(TokenID.Minus, @"-");
-            stringMap.Add(TokenID.Slash, @"/");
-            stringMap.Add(TokenID.Less, @"<");
-            stringMap.Add(TokenID.Greater, @">");
-
-            stringMap.Add(TokenID.PlusPlus, @"++");
-            stringMap.Add(TokenID.MinusMinus, @"--");
-            stringMap.Add(TokenID.And, @"&&");
-            stringMap.Add(TokenID.Or, @"||");
-            stringMap.Add(TokenID.EqualEqual, @"==");
-            stringMap.Add(TokenID.NotEqual, @"!=");
-            stringMap.Add(TokenID.LessEqual, @"<=");
-            stringMap.Add(TokenID.GreaterEqual, @">=");
-            stringMap.Add(TokenID.ShiftLeft, @"<<");
-            stringMap.Add(TokenID.ShiftRight, @">>");
-
-            stringMap.Add(TokenID.Is, @"is");
-            stringMap.Add(TokenID.As, @"as");
-
-            stringMap.Add(TokenID.MinusGreater, @"->");
-
-            stringMap.Add(TokenID.Equal, "=");
-            stringMap.Add(TokenID.PlusEqual, "+=");
-            stringMap.Add(TokenID.MinusEqual, "-=");
-            stringMap.Add(TokenID.StarEqual, "*=");
-            stringMap.Add(TokenID.SlashEqual, "/=");
-            stringMap.Add(TokenID.PercentEqual, "%=");
-            stringMap.Add(TokenID.BAndEqual, "&=");
-            stringMap.Add(TokenID.BOrEqual, "|=");
-            stringMap.Add(TokenID.BXorEqual, "^=");
-            stringMap.Add(TokenID.ShiftLeftEqual, "<<=");
-            stringMap.Add(TokenID.ShiftRightEqual, ">>=");
+            stringMap = new Dictionary<TokenID, string>
+            {
+                { TokenID.Not, @"!" },
+                { TokenID.Percent, @"%" },
+                { TokenID.BAnd, @"&" },
+                { TokenID.BOr, @"|" },
+                { TokenID.BXor, @"^" },
+                { TokenID.Star, @"*" },
+                { TokenID.Plus, @"+" },
+                { TokenID.Minus, @"-" },
+                { TokenID.Slash, @"/" },
+                { TokenID.Less, @"<" },
+                { TokenID.Greater, @">" },
+
+                { TokenID.PlusPlus, @"++" },
+                { TokenID.MinusMinus, @"--" },
+                { TokenID.And, @"&&" },
+                { TokenID.Or, @"||" },
+                { TokenID.EqualEqual, @"==" },
+                { TokenID.NotEqual, @"!=" },
+                { TokenID.LessEqual, @"<=" },
+                { TokenID.GreaterEqual, @">=" },
+                { TokenID.ShiftLeft, @"<<" },
+                { TokenID.ShiftRight, @">>" },
+
+                { TokenID.Is, @"is" },
+                { TokenID.As, @"as" },
+
+                { TokenID.MinusGreater, @"->" },
+
+                { TokenID.Equal, "=" },
+                { TokenID.PlusEqual, "+=" },
+                { TokenID.MinusEqual, "-=" },
+                { TokenID.StarEqual, "*=" },
+                { TokenID.SlashEqual, "/=" },
+                { TokenID.PercentEqual, "%=" },
+                { TokenID.BAndEqual, "&=" },
+                { TokenID.BOrEqual, "|=" },
+                { TokenID.BXorEqual, "^=" },
+                { TokenID.ShiftLeftEqual, "<<=" },
+                { TokenID.ShiftRightEqual, ">>=" },
 
-            stringMap.Add(TokenID.QuestionQuestion, "??");
+                { TokenID.QuestionQuestion, "??" }
+            };
         }
 
         public BinaryExpression(Token relatedtoken)
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Nodes/Expressions/LambdaExpression.cs Editor/Addons/CSP/Nodes/Expressions/LambdaExpression.cs
--- .Editor/Addons/CSP/Nodes/Expressions/LambdaExpression.cs	2018-06-30 08:59:18.212539200 +0700
+++ Editor/Addons/CSP/Nodes/Expressions/LambdaExpression.cs	2018-06-30 09:02:03.679475500 +0700
@@ -1,13 +1,11 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Text;
+﻿using System.Text;
 
 namespace Addon_CSP
 {
     public class LambdaExpression : ExpressionNode
     {
         private ExpressionNode left;
-        private TokenID op;
+        // private TokenID op;
         private ExpressionNode right;
 
 
@@ -19,18 +17,18 @@
         public LambdaExpression(TokenID op, Token relatedtoken)
             : base(relatedtoken)
         {
-            this.op = op;
+            // this.op = op;
         }
         public LambdaExpression(TokenID op, ExpressionNode left)
             : base(left.RelatedToken)
         {
-            this.op = op;
+            // this.op = op;
             this.left = left;
         }
         public LambdaExpression(TokenID op, ExpressionNode left, ExpressionNode right)
             : base(left.RelatedToken)
         {
-            this.op = op;
+            // this.op = op;
             this.left = left;
             this.right = right; // right must be 'type'
         }
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/IntegralPrimitive.cs Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/IntegralPrimitive.cs
--- .Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/IntegralPrimitive.cs	2018-06-30 08:59:18.233544000 +0700
+++ Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/IntegralPrimitive.cs	2018-06-30 09:02:03.692478100 +0700
@@ -9,10 +9,10 @@
 	{
 	  private readonly IntegralType integralType;
 	  private readonly ulong value;
-	  private string originalString;
+	  // private string originalString;
 		public IntegralPrimitive(string value, IntegralType integralType, Token relatedToken) : base(relatedToken)
 		{
-			originalString = value;
+			// originalString = value;
 			this.integralType = integralType;
 
 			switch (integralType)
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/RealPrimitive.cs Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/RealPrimitive.cs
--- .Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/RealPrimitive.cs	2018-06-30 08:59:18.239545700 +0700
+++ Editor/Addons/CSP/Nodes/Expressions/PrimitiveExpressions/RealPrimitive.cs	2018-06-30 09:02:03.695481000 +0700
@@ -10,11 +10,11 @@
 	  private bool isDecimal;
 	  private bool isDouble;
 	  private bool isFloat;
-	  private string originalString;
+	  // private string originalString;
         public RealPrimitive(string value, Token relatedToken)
             : base(relatedToken)
 		{
-			originalString = value;
+			// originalString = value;
 			char c = value[value.Length - 1];
 			switch(c)
 			{
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Addons/CSP/Parser.cs Editor/Addons/CSP/Parser.cs
--- .Editor/Addons/CSP/Parser.cs	2018-06-30 08:59:18.425593000 +0700
+++ Editor/Addons/CSP/Parser.cs	2018-06-30 09:02:03.800504700 +0700
@@ -62,10 +62,10 @@
 	  /// <summary>
         /// many syntax checks need to access method parameter list
         /// </summary>
-        private MethodNode curMethod;
+      // private MethodNode curMethod;
 
 	  private Modifier curmods;
-	  private OperatorNode curOperator;
+	  // private OperatorNode curOperator;
 	  private string currentDocComment = string.Empty;
 
 	  private ParseStateCollection curState;
@@ -126,7 +126,7 @@
         private StringCollection iteratorsClass;
 
 	  private int lineCount = 1;
-	  private bool mayBeLocalDecl;
+	  // private bool mayBeLocalDecl;
 	  private Stack<NamespaceNode> namespaceStack;
 	  private bool nextIsPartial;
 
@@ -225,22 +225,23 @@
 	    precedence[ (int)TokenID.ShiftRightEqual ] = 0x73;
 
 
-	    preprocessor = new Dictionary<string, PreprocessorID>();
-
-	    preprocessor.Add("define", PreprocessorID.Define);
-	    preprocessor.Add("undef", PreprocessorID.Undef);
-	    preprocessor.Add("if", PreprocessorID.If);
-	    preprocessor.Add("elif", PreprocessorID.Elif);
-	    preprocessor.Add("else", PreprocessorID.Else);
-	    preprocessor.Add("endif", PreprocessorID.Endif);
-	    preprocessor.Add("line", PreprocessorID.Line);
-	    preprocessor.Add("error", PreprocessorID.Error);
-	    preprocessor.Add("warning", PreprocessorID.Warning);
-	    preprocessor.Add("region", PreprocessorID.Region);
-	    preprocessor.Add("endregion", PreprocessorID.Endregion);
-	    preprocessor.Add("pragma", PreprocessorID.Pragma);
+            preprocessor = new Dictionary<string, PreprocessorID>
+            {
+                { "define", PreprocessorID.Define },
+                { "undef", PreprocessorID.Undef },
+                { "if", PreprocessorID.If },
+                { "elif", PreprocessorID.Elif },
+                { "else", PreprocessorID.Else },
+                { "endif", PreprocessorID.Endif },
+                { "line", PreprocessorID.Line },
+                { "error", PreprocessorID.Error },
+                { "warning", PreprocessorID.Warning },
+                { "region", PreprocessorID.Region },
+                { "endregion", PreprocessorID.Endregion },
+                { "pragma", PreprocessorID.Pragma }
+            };
 
-	  }
+        }
 
 
 	  public Parser(string currentFileName)
@@ -322,25 +323,26 @@
             genericList = new List<IGeneric>();
             constructedTypes = new Dictionary<string, ConstructedTypeNode>();
 
-            iteratorsClass = new StringCollection();
-
-            iteratorsClass.Add("IEnumerator");
-            iteratorsClass.Add("IEnumerable");
-            iteratorsClass.Add("Collections.IEnumerator");
-            iteratorsClass.Add("Collections.IEnumerable");
-            iteratorsClass.Add("System.Collections.IEnumerator");
-            iteratorsClass.Add("System.Collections.IEnumerable");
-
-            iteratorsClass.Add("IEnumerator<>");
-            iteratorsClass.Add("IEnumerable<>");
-            iteratorsClass.Add("Generic.IEnumerator<>");
-            iteratorsClass.Add("Generic.IEnumerable<>");
-            iteratorsClass.Add("Collections.Generic.IEnumerator<>");
-            iteratorsClass.Add("Collections.Generic.IEnumerable<>");
-            iteratorsClass.Add("System.Collections.Generic.IEnumerator<>");
-            iteratorsClass.Add("System.Collections.Generic.IEnumerable<>");
+            iteratorsClass = new StringCollection
+            {
+                "IEnumerator",
+                "IEnumerable",
+                "Collections.IEnumerator",
+                "Collections.IEnumerable",
+                "System.Collections.IEnumerator",
+                "System.Collections.IEnumerable",
+
+                "IEnumerator<>",
+                "IEnumerable<>",
+                "Generic.IEnumerator<>",
+                "Generic.IEnumerable<>",
+                "Collections.Generic.IEnumerator<>",
+                "Collections.Generic.IEnumerable<>",
+                "System.Collections.Generic.IEnumerator<>",
+                "System.Collections.Generic.IEnumerable<>"
+            };
 
-			exprStack = new Stack<ExpressionNode>();
+            exprStack = new Stack<ExpressionNode>();
 
 			// begin parse
             nextTokNode = tokens.First;
@@ -478,8 +480,10 @@
 				ReportError("Expected 'alias', but found: " + curtok.ID, curtok);
 			Advance();	// over alias
 
-            ExternAliasDirectiveNode node = new ExternAliasDirectiveNode(curtok);
-            node.ExternAliasName = ParseIdentifierOrKeyword(false, false, false, false, false);
+            ExternAliasDirectiveNode node = new ExternAliasDirectiveNode(curtok)
+            {
+                ExternAliasName = ParseIdentifierOrKeyword(false, false, false, false, false)
+            };
 
             namespaceStack.Peek().ExternAliases.Add(node);
         }
@@ -621,8 +625,10 @@
                     Advance();
                     if(!SameLine(oldLine)) return;
 
-                    BinaryExpression bNode = new BinaryExpression(startToken, curtok);
-                    bNode.Left = exprStack.Pop();
+                    BinaryExpression bNode = new BinaryExpression(startToken, curtok)
+                    {
+                        Left = exprStack.Pop()
+                    };
                     exprStack.Push(bNode); // push node
                     ParsePreprocessorExpressionSegment(oldLine); // right side
                     // consume now or let next op consume?
@@ -644,8 +650,10 @@
                     while(precedence[(int) curtok.ID] >= precedence[(int) TokenID.LParen]);      // LParen for precedence of unary operator
 
                     ExpressionNode node = exprStack.Pop();
-                    UnaryExpression uNode = new UnaryExpression(startToken, node.RelatedToken);
-                    uNode.Child = node;
+                    UnaryExpression uNode = new UnaryExpression(startToken, node.RelatedToken)
+                    {
+                        Child = node
+                    };
                     exprStack.Push(uNode);
                     break;
 
@@ -1017,9 +1025,11 @@
 						// named args are ident = expr
                         while(curtok.ID == TokenID.Ident)
 						{
-							AttributeArgumentNode aNode = new AttributeArgumentNode(curtok);
-							aNode.ArgumentName = (IdentifierExpression) ParseIdentifierOrKeyword(false, false, false, false, false);
-    						AssertAndAdvance(TokenID.Equal);
+                            AttributeArgumentNode aNode = new AttributeArgumentNode(curtok)
+                            {
+                                ArgumentName = (IdentifierExpression)ParseIdentifierOrKeyword(false, false, false, false, false)
+                            };
+                            AssertAndAdvance(TokenID.Equal);
 							aNode.Expression = ParseExpression();
 							node.Arguments.Add(aNode);
 
@@ -1479,9 +1489,10 @@
 		}
 		private BaseNode ParseStruct()											
 		{
-			StructNode node = new StructNode(curtok);
-
-            node.IsPartial = nextIsPartial;
+            StructNode node = new StructNode(curtok)
+            {
+                IsPartial = nextIsPartial
+            };
             nextIsPartial = false;
 
             ClassNode cl = typeStack.Count == 0 ? null : typeStack.Peek();
@@ -2165,7 +2176,7 @@
                 node = new OperatorNode(false, curtok);
             }
 
-            curOperator = node;
+            // curOperator = node;
 
             ApplyAttributes(node);
             ApplyDocComment(node);
@@ -2241,7 +2252,7 @@
             }
 
             curIterator = null;
-            curOperator = null;
+            // curOperator = null;
 
             if ((node.Modifiers & Modifier.Unsafe) != Modifier.Empty)
             {
@@ -2864,7 +2875,7 @@
                 node = new MethodNode(false, curtok);
             }
 
-            curMethod = node;
+            // curMethod = node;
 
 			ClassNode cl = typeStack.Peek();
             cl.Methods.Add(node);
@@ -2925,7 +2936,7 @@
                 }
             }
 
-            curMethod = null;
+            // curMethod = null;
             curIterator = null;
 
             if ((node.Modifiers & Modifier.Unsafe) != Modifier.Empty)
@@ -2977,8 +2988,10 @@
             }
             AssertAndAdvance(TokenID.LBracket);
 
-            ConstantExpression expr = new ConstantExpression(curtok);
-            expr.Value = ParseExpression(TokenID.RBracket);
+            ConstantExpression expr = new ConstantExpression(curtok)
+            {
+                Value = ParseExpression(TokenID.RBracket)
+            };
             node.FixedBufferConstants.Add(  expr );
 
             AssertAndAdvance(TokenID.RBracket);
@@ -3354,18 +3367,22 @@
                     Advance(); // over ident
                     if (curAccessor == "add")
                     {
-                        node.AddBlock = new AccessorNode(false, curtok);
-                        node.AddBlock.Kind = "add";
-                        node.AddBlock.IsUnsafe = isUnsafe > 0;
+                        node.AddBlock = new AccessorNode(false, curtok)
+                        {
+                            Kind = "add",
+                            IsUnsafe = isUnsafe > 0
+                        };
                         ApplyAttributes( node.AddBlock );
                         ParseBlock( node.AddBlock.StatementBlock );
 
                         ParsePossibleAttributes(false);
                         if (curtok.ID == TokenID.Ident && strings[curtok.Data] == "remove")
                         {
-                            node.RemoveBlock = new AccessorNode( false, curtok );
-                            node.RemoveBlock.IsUnsafe = isUnsafe > 0;
-                            node.RemoveBlock.Kind = "remove";
+                            node.RemoveBlock = new AccessorNode(false, curtok)
+                            {
+                                IsUnsafe = isUnsafe > 0,
+                                Kind = "remove"
+                            };
                             ApplyAttributes( node.RemoveBlock );
                             Advance(); // over ident
                             ParseBlock( node.RemoveBlock.StatementBlock );
@@ -3377,18 +3394,22 @@
                     }
                     else if (curAccessor == "remove")
                     {
-                        node.RemoveBlock = new AccessorNode(false, curtok);
-                        node.RemoveBlock.IsUnsafe = isUnsafe > 0;
-                        node.RemoveBlock.Kind = "remove";
+                        node.RemoveBlock = new AccessorNode(false, curtok)
+                        {
+                            IsUnsafe = isUnsafe > 0,
+                            Kind = "remove"
+                        };
                         ApplyAttributes( node.RemoveBlock );
                         ParseBlock( node.RemoveBlock.StatementBlock );
 
                         ParsePossibleAttributes(false);
                         if (curtok.ID == TokenID.Ident && strings[curtok.Data] == "add")
                         {
-                            node.AddBlock = new AccessorNode(false, curtok);
-                            node.AddBlock.IsUnsafe = isUnsafe > 0;
-                            node.AddBlock.Kind = "remove";
+                            node.AddBlock = new AccessorNode(false, curtok)
+                            {
+                                IsUnsafe = isUnsafe > 0,
+                                Kind = "remove"
+                            };
                             Advance(); // over ident
                             ApplyAttributes(node.AddBlock);
                             ParseBlock(node.AddBlock.StatementBlock);
@@ -3746,10 +3767,12 @@
 		}
 		private ConstantExpression ParseConstExpr()							
 		{
-			ConstantExpression node = new ConstantExpression(curtok);
-			node.Value = ParseExpression();
+            ConstantExpression node = new ConstantExpression(curtok)
+            {
+                Value = ParseExpression()
+            };
 
-			return node;
+            return node;
 		}
 		private void ParseModifiers()										
 		{
@@ -3912,8 +3935,10 @@
             }
             else
             {
-				result = new TypeNode(curtok);
-                result.Identifier = ident;
+                result = new TypeNode(curtok)
+                {
+                    Identifier = ident
+                };
 
                 // move the rank specifier
                 if (result.Identifier.IsType)
@@ -4304,13 +4329,15 @@
 			// using		using	: LParen
 
 			StatementNode node;
-            mayBeLocalDecl = false;
+            // mayBeLocalDecl = false;
 			switch (curtok.ID)
 			{
 				case TokenID.LCurly:	// block
-                    BlockStatement newBlock = new BlockStatement(isUnsafe > 0, curtok);
-                    newBlock.IsUnsafe = isUnsafe > 0;
-					node = newBlock;
+                    BlockStatement newBlock = new BlockStatement(isUnsafe > 0, curtok)
+                    {
+                        IsUnsafe = isUnsafe > 0
+                    };
+                    node = newBlock;
 					ParseBlock(newBlock);
 					break;
 				case TokenID.Semi:		// empty statement
@@ -4482,10 +4509,12 @@
 					if(expr is IdentifierExpression && curtok.ID == TokenID.Colon)
 					{
 						Advance(); // advance over colon
-						LabeledStatement lsnode = new LabeledStatement(curtok);
-						lsnode.Name = (IdentifierExpression) expr;
-						lsnode.Statement = ParseStatement();
-						node = lsnode;
+                            LabeledStatement lsnode = new LabeledStatement(curtok)
+                            {
+                                Name = (IdentifierExpression)expr,
+                                Statement = ParseStatement()
+                            };
+                            node = lsnode;
 					}
 					else
 					{
@@ -4852,14 +4881,18 @@
 				ExpressionNode expr = ParseLocalDeclarationOrExpression();
 				if(expr is LocalDeclaration)
 				{
-					node.Init = new NodeCollection<ExpressionNode>();
-					node.Init.Add(expr);
-				}
+                    node.Init = new NodeCollection<ExpressionNode>
+                    {
+                        expr
+                    };
+                }
 				else
 				{
-					node.Init = new ExpressionList();
-					node.Init.Add(expr);
-					while(curtok.ID == TokenID.Comma)
+                    node.Init = new ExpressionList
+                    {
+                        expr
+                    };
+                    while (curtok.ID == TokenID.Comma)
 					{
 						Advance();
 						node.Init.Add(ParseExpression());
@@ -5140,11 +5173,13 @@
 			ExpressionNode expr = ParseIdentifierOrKeyword(false, false, false, false, false);
 			if(curtok.ID == TokenID.ColonColon)
 			{
-				// id :: id type-parameter-list_opt
+                // id :: id type-parameter-list_opt
 
-				QualifiedIdentifierExpression qualID = new QualifiedIdentifierExpression(curtok);	// TODO: Replace by QualifiedAliasMember instance
-				qualID.IsNamespaceAliasQualifier = true;
-				qualID.Expressions.Add(expr);
+                QualifiedIdentifierExpression qualID = new QualifiedIdentifierExpression(curtok)
+                {
+                    IsNamespaceAliasQualifier = true
+                };  // TODO: Replace by QualifiedAliasMember instance
+                qualID.Expressions.Add(expr);
 
 				Advance(); // over ColonColon
 				qualID.Expressions.Add(ParseMember(inStatementContext));
@@ -5363,11 +5398,13 @@
 		{
             isUnsafe++;
 
-            BlockStatement ret = new BlockStatement(isUnsafe > 0, curtok);
-            ret.IsUnsafeDeclared = true;
-            ret.IsUnsafe = isUnsafe > 0;
+            BlockStatement ret = new BlockStatement(isUnsafe > 0, curtok)
+            {
+                IsUnsafeDeclared = true,
+                IsUnsafe = isUnsafe > 0
+            };
 
-			// todo: fully parse unsafe code
+            // todo: fully parse unsafe code
             AssertAndAdvance(TokenID.Unsafe); // over 'unsafe'
 
             if (curIterator != null )
@@ -5591,9 +5628,11 @@
 				case TokenID.This:
 				{
 					Advance();
-					IdentifierExpression idExpr = new IdentifierExpression("this", tok);
-					idExpr.StartingPredefinedType = tok.ID;
-					result = idExpr;
+                        IdentifierExpression idExpr = new IdentifierExpression("this", tok)
+                        {
+                            StartingPredefinedType = tok.ID
+                        };
+                        result = idExpr;
 					break;
 				}
 
@@ -5693,11 +5732,13 @@
 					result = ParseIdentifierOrKeyword(false, false, false, false, false);
 					if(curtok.ID == TokenID.ColonColon)
 					{
-						// id :: id type-parameter-list_opt . id type-parameter-list_opt
+                        // id :: id type-parameter-list_opt . id type-parameter-list_opt
 
-						QualifiedIdentifierExpression qualID = new QualifiedIdentifierExpression(curtok);	// TODO: Replace by QualifiedAliasMember instance
-						qualID.IsNamespaceAliasQualifier = true;
-						qualID.Expressions.Add(result);
+                        QualifiedIdentifierExpression qualID = new QualifiedIdentifierExpression(curtok)
+                        {
+                            IsNamespaceAliasQualifier = true
+                        };  // TODO: Replace by QualifiedAliasMember instance
+                        qualID.Expressions.Add(result);
 
 						Advance(); // over ColonColon
 						qualID.Expressions.Add(ParseMember(false));
@@ -5891,7 +5932,7 @@
 			{
 				#region Conditional
 				case TokenID.Question:
-                    mayBeLocalDecl = false;
+                    //mayBeLocalDecl = false;
                     stackCountUnaltered = true;
 					if(curtok.NullableDeclaration)
                     {
@@ -5925,14 +5966,14 @@
 				#region Keywords
 				// keywords
 				case TokenID.Ref:
-                    mayBeLocalDecl = false;
+                    // mayBeLocalDecl = false;
                     Advance();
 					ParseExpressionSegment();
                     exprStack.Push(new RefNode(exprStack.Pop()));
 					break;
 
 				case TokenID.Out:
-                    mayBeLocalDecl = false;
+                    // mayBeLocalDecl = false;
                     Advance();
 					ParseExpressionSegment();
                     exprStack.Push(new OutNode(exprStack.Pop()));
@@ -5951,14 +5992,14 @@
                         }
                         while(curtok.ID == TokenID.Star);
                     }
-                    else
-                        mayBeLocalDecl = false;
+                    //else
+                    //    mayBeLocalDecl = false;
 					break;
 
 				#endregion
 
                 case TokenID.Stackalloc:
-                    mayBeLocalDecl = false;
+                    //mayBeLocalDecl = false;
                     ParseStackalloc();
                     break;
 			}
@@ -6052,10 +6093,12 @@
 		/// <param name="type">The already parsed type for the local declaration</param>
 		private LocalDeclaration ParseLocalDeclaration(IType type)
 		{
-			LocalDeclaration lnode = new LocalDeclaration(curtok);
-			lnode.Type = type;
-			lnode.IsConstant = isLocalConst;
-			isLocalConst = false;
+            LocalDeclaration lnode = new LocalDeclaration(curtok)
+            {
+                Type = type,
+                IsConstant = isLocalConst
+            };
+            isLocalConst = false;
 
 			while(true)
 			{
@@ -6194,10 +6237,12 @@
 
 			if(ConsiderAsCast(interior))
 			{
-				UnaryCastExpression castNode = new UnaryCastExpression(curtok);
-				castNode.Type = (IType) interior;
-				castNode.Child = ParseSubexpression(PRECEDENCE_UNARY);
-				return castNode;
+                UnaryCastExpression castNode = new UnaryCastExpression(curtok)
+                {
+                    Type = (IType)interior,
+                    Child = ParseSubexpression(PRECEDENCE_UNARY)
+                };
+                return castNode;
 			}
 			else
 				return new ParenthesizedExpression(interior);
@@ -6223,8 +6268,10 @@
 
 		private ArrayCreationExpression ParseArrayCreation(IType type)						
 		{
-			ArrayCreationExpression arNode = new ArrayCreationExpression(curtok);
-			arNode.Type = type;
+            ArrayCreationExpression arNode = new ArrayCreationExpression(curtok)
+            {
+                Type = type
+            };
 
             Advance(); // over lbracket
 
Only in .Editor/Addons/CSP: Parser_h.cs
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_DrawNodeCurve.cs Editor/f_DrawNodeCurve.cs
--- .Editor/f_DrawNodeCurve.cs	2018-06-30 08:59:18.443598300 +0700
+++ Editor/f_DrawNodeCurve.cs	2018-06-30 09:02:03.807508700 +0700
@@ -1,27 +1,21 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     static void DrawNodeCurve(Vector2 startPos, Vector2 endPos, Color color, int lineWidth, bool FlipStartEnd, LinkInfo link)
     {
 
-        int LineWidth = lineWidth;
+        if (ev.type != EventType.Repaint && !ev.isMouse)
+            return;
 
+        int LineWidth = lineWidth;
 
         bool Selected = CurDrawable.SelectedLinks.Contains(link);
 
         int selected = Selected ? 2 : 0;
 
-
         Vector2 SP;
         Vector2 EP;
 
@@ -40,33 +34,22 @@
         Vector2 startTan = SP + Vector2.right * Tang;
         Vector2 endTan = EP - Vector2.right * Tang;
 
-
-
-        //Rect drawRect = CreateRect(SP.x, SP.y, EP.x - SP.x, EP.y - SP.y);
+        //Rect drawRect = new Rect(SP.x, SP.y, EP.x - SP.x, EP.y - SP.y);
 
         bool OptimizeInView = true;// RealEditGraphRect.Overlaps(drawRect, true);
 
         if (!OptimizeInView)
             return;
 
-
-
         Vector2 P0 = SP;
         Vector2 P1 = startTan;
         Vector2 P2 = endTan;
         Vector2 P3 = EP;
 
-
-       
-
-   
-
         float Highlite = 0;
 
-
         if (link != null)
         {
-
             if (b_HighliteLinksOnce)
             {
                 if (link.HighLite == -2)
@@ -77,7 +60,6 @@
             else if (link.HighLite == -2)
                 link.HighLite = 0;
 
-
             Highlite = link.HighLite;
             if (link.HighLite > 0 && !EditorApplication.isPaused)
             {
@@ -85,22 +67,7 @@
             }
         }
 
-
-        bool dragNode = Node.DraggingNode != null;// CurDrawable.SelectedNodes.Count == 1 && 
-
-
-
-
-        /*
-        bool drawDebug = CurScript.b_DebugMode && Application.isPlaying;
-
-        if (drawDebug || dragNode || _LMB_Down && link != null)
-        {
-            
-        }
-        */
-
-
+        bool dragNode = Node.DraggingNode != null;
 
         if (link != null && link.HighLite > 0 && OptimizeInView)
         {
@@ -108,38 +75,29 @@
 
             if (link.HighLite > 0)
             {
-
-                
                 GUI.color = Color.Lerp(color, new Color32(255, 63, 0, 255), Highlite);
                 float dist = Vector2.Distance(SP, EP);
 
-
                 for (float tm = -1; tm < 1; tm += 60.0f / dist)
                 {
-
                     float t = tm + (_debugBubblesDrawOffset * (60.0f / dist));
 
                     if (t < 0 || t > 1)
                         continue;
 
-
                     Vector2 pointPos = (Mathf.Pow(1 - t, 3) * P0) + (3 * t * Mathf.Pow(1 - t, 2) * P1) + (3 * Mathf.Pow(t, 2) * (1 - t) * P2) + (Mathf.Pow(t, 3) * P3);
 
                     float size = 19 * link.HighLite;
 
-                   
-                    GUI.DrawTexture(CreateRect(pointPos.x - size / 2, pointPos.y - size / 2, size, size), Res.Debug_Link_Point);
-                  
+                    GUI.DrawTexture(new Rect(pointPos.x - size / 2, pointPos.y - size / 2, size, size), Res.Debug_Link_Point);
                 }
 
                 GUI.color = Color.white;
             }
         }
 
-
         if (OptimizeInView && (dragNode || _LMB_Down && link != null))
         {
-            
             for (float t = 0.02f; t < 0.98f; t += 0.05f)
             {
                 Vector2 newPos = (Mathf.Pow(1 - t, 3) * P0) + (3 * t * Mathf.Pow(1 - t, 2) * P1) + (3 * Mathf.Pow(t, 2) * (1 - t) * P2) + (Mathf.Pow(t, 3) * P3);
@@ -154,7 +112,6 @@
                     if (dragNode && _LMB_Up)
                     {
                         RMB_Window.Show(GlobalMousePos, Node.DraggingNode, link);
-                        
 
                         return;
                         // _LMB_Up = false;
@@ -164,7 +121,7 @@
                     {
                         LMB_Down_Deleg = delegate
                         {
-                            if (b_TestLMBDeleg) if(Options.b_ShowDebug)Debug.Log("TestDeleg");
+                            if (b_TestLMBDeleg) if (Options.b_ShowDebug) Debug.Log("TestDeleg");
 
                             if (!Event.current.control)
                             {
@@ -173,23 +130,22 @@
                                 CurDrawable.SelectedCommentary = new List<int>();
                             }
 
-
                             CurDrawable.SelectedLinks.Add(link);
                         };
                     }
                     break;
                 }
             }
-
         }
 
+        if (ev.type != EventType.Repaint)
+            return;
+
         Color shadowCol = Color.Lerp(new Color(color.r / 2 + Highlite, color.g / 2, color.b / 2, 0.35f), new Color32(255, 63, 0, 100), Highlite);
 
         for (int i = 0; i < LineWidth + selected; i++) // Draw a shadow
             Handles.DrawBezier(SP, EP, startTan, endTan, shadowCol, null, (i + 1) * LineWidth);
 
         Handles.DrawBezier(SP, EP, startTan, endTan, Color.Lerp(color, new Color32(255, 63, 0, 255), Highlite), null, LineWidth);
-
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_OnEnable.cs Editor/f_OnEnable.cs
--- .Editor/f_OnEnable.cs	2018-06-30 08:59:18.446599500 +0700
+++ Editor/f_OnEnable.cs	2018-06-30 09:02:03.808508300 +0700
@@ -1,13 +1,8 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System;
 using System.Linq;
-using System.Reflection;
-
-using System.IO;
-using System.Text;
-using System.Security.Cryptography;
+using UnityEditor;
+using UnityEngine;
 
 public sealed partial class Nottorus : EditorWindow
 {
@@ -17,65 +12,43 @@
         NewNode_Window.CancelAbort();
     }
 
-
     private string ApplicationDataPath;
 
-    
-    void HandleOnPlayModeChanged()
+    void HandleOnPlayModeChanged(PlayModeStateChange change)
     {
-        if(EditorApplication.isPlayingOrWillChangePlaymode)
+        if (EditorApplication.isPlayingOrWillChangePlaymode)
         {
             SaveScript(true);
         }
     }
-    
+
+    void OnDisable()
+    {
+        EditorApplication.playModeStateChanged -= HandleOnPlayModeChanged;
+    }
 
     void OnEnable()
     {
-        EditorApplication.playmodeStateChanged = HandleOnPlayModeChanged;
+        EditorApplication.playModeStateChanged += HandleOnPlayModeChanged;
 
         ApplicationDataPath = Application.dataPath;
-        //AwaitingForReq = false;
+        
         flag_ReimportAssets = false;
 
-        /*
-        if (File.Exists(EditorOptions.TempFileName))
-        {
-            FileInfo fileInfo = new FileInfo(EditorOptions.TempFileName);
-            if (fileInfo.IsReadOnly)
-            {
-                fileInfo.IsReadOnly = false;
-                //EditorOptions.Save();
-            }
-        }
-        */
         EditorOptions.Load();
         Res.Init();
 
         autoRepaintOnSceneChange = true;
 
-
-
-
-        //titleContent = new GUIContent("Nottorus Script Editor");
-
-
-        //Application.logMessageReceived += HandleLog;
-
         Scripts = new List<ScriptData>();
 
-
         m_Zoom.Init();
 
         b_SaveWhileCompiling = false;
         BPE = this;
 
-
-
         Options.CheckSetupDefaultTypeColors();
-        //Foldout_Classes.Opened
-
-
+        
         if (Options.OpenLastScripts == 1)
         {
             if (Options.LastScriptsPaths.Count > 0)
@@ -86,9 +59,9 @@
 
         if (Options.OpenLastScripts == 2)
         {
-            foreach (string file in Options.LastScriptsPaths.ToList())
+            for (int i = Options.LastScriptsPaths.Count; i-- > 0;)
             {
-                OpenAddScript(file, false);
+                OpenAddScript(Options.LastScriptsPaths[i], false);
             }
             if (CurScript != null)
             {
@@ -100,282 +73,9 @@
         StartAwake();
 
         NewNode_Window.FilterBase();
-        //Gen();
-    }
-
-
-
-
-    /*
-
-    private static bool BCompActive = false;
-    public static bool AwaitingForReq = false;
-    public static string LCheckMessage = "";
-
-    private static string gnm
-    {
-        get { return SystemInfo.graphicsDeviceName; }
-    }
-
-    private static string iv
-    {
-        get { return Encoding.Default.GetString(new byte[] { 52, 53, 50, 56, 55, 49, 49, 50, 53, 52, 57, 51, 53, 52, 56, 57 }) + "2244548565456542"; }
-    }
-
-    private static string dmd
-    {
-        get
-        {
-            FileStream file = new FileStream(typeof(Nottorus).Assembly.Location, FileMode.Open);
-            MD5 md5 = new MD5CryptoServiceProvider();
-            byte[] retVal = md5.ComputeHash(file);
-            file.Close();
-            StringBuilder sb = new StringBuilder();
-            retVal.ToList().ForEach(x => sb.Append(x.ToString("x2")));
-            return sb.ToString();
-        }
-    }
-
-
-    private static void Gen()
-    {
-        if (AwaitingForReq)
-            return;
-
-        string invPrefs = EditorPrefs.GetString("Nottorus_Invoice");
-        if (Options.InvoiceNum.Length == 0)
-        {
-            Options.InvoiceNum = invPrefs;
-
-            if (Options.InvoiceNum.Length == 0)
-            {
-                ChWindow.b_CheckWindowActive = true;
-                LCheckMessage = "License field is empty.";
-                return;
-            }
-        }
-        
-        if (invPrefs.Length == 0)
-        {
-            EditorPrefs.SetString("Nottorus_Invoice", Options.InvoiceNum);
-        }
-
-        LCheckMessage = "Processing...";
-        BCompActive = false;
-
-
-
-        var gmf = iv + DateTime.Now.ToString("yyyy-MM-dd") + gnm + Options.InvoiceNum;
-
-
-        var hs = typeof(Addon_CSP.Parser).GetField("precedece", BindingFlags.Static | BindingFlags.NonPublic);
-        var val = hs.GetValue(null) as string;
-
-        if (dmd == val)
-        {
-            if (Options.Id == Hsh(gmf + val))
-            {
-                BCompActive = true;
-                return;
-            }
-            
-            else
-            {
-                gmf = iv + (DateTime.Now.AddDays(-1)).ToString("yyyy-MM-dd") + gnm + Options.InvoiceNum;
-
-                if (Options.Id == Hsh(gmf + val))
-                {
-                    BCompActive = true;
-                    return;
-                }
-                else
-                {
-                    gmf = iv + (DateTime.Now.AddDays(-2)).ToString("yyyy-MM-dd") + gnm + Options.InvoiceNum;
-                    if (Options.Id == Hsh(gmf + val))
-                    {
-                        BCompActive = true;
-                        return;
-                    }
-                }
-            }
-            
-        }
-
-
-
-        switch (BCompActive)
-        {
-            case false:
-                byte[] random = new Byte[32];
-                RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
-                rng.GetNonZeroBytes(random);
-
-                string iak = Hsh(Encoding.UTF32.GetString(random) + gnm);
-
-
-                WWWForm form = new WWWForm();
-                form.AddField("in", Options.InvoiceNum);
-                form.AddField("iak", iak);
-                WWW www = new WWW("http://nottorus.net/lcps.php", form);
-
-
-                AwaitingForReq = true;
-
-                Send(gmf, iak, www);
-                break;
-            case true:
-                break;
-        }
-
-    }
-
-    private static void Send(string gmf, string iak, WWW www)
-    {
-        ContinuationManager.Add(() => www.isDone, () =>
-        {
-            AwaitingForReq = false;
-            ChWindow.b_CheckWindowActive = true;
-
-
-            if (!string.IsNullOrEmpty(www.error))
-            {
-                if (www.error.Contains("Could not resolve host"))
-                {
-                    LCheckMessage = "Error: No connection to internet or the activation server is not reachable.";
-                }
-                else
-                {
-                    LCheckMessage = "Error: " + www.error;
-                }
-            }
-            else
-            {
-                try
-                {
-                    string finalString = Finalize(BTS(www.text), Hsh(iak + Options.InvoiceNum), iv);
-
-                    if (finalString.EndsWith(":Pass"))
-                    {
-                        string sDay = finalString.Replace(":Pass", "");
-                        sDay = sDay.Substring(sDay.IndexOf(":") + 1);
-                        int iDay = int.Parse(sDay);
-
-                        var today = DateTime.Now;
-                        int realDay = today.Day;
-                        today.AddDays(1);
-
-                        var diff = Mathf.Abs(iDay - realDay);
-                        if (iDay == realDay || diff < 3 || (diff > 26 && diff < 33))
-                        {
-                            BCompActive = true;
-                            ChWindow.b_CheckWindowActive = false;
-
-                            string key = finalString.Substring(0, finalString.IndexOf(":"));
-
-                            var v = typeof(EditorOptions).GetField("Variants");
-                            if (v != null)
-                                v.SetValue(Options, Encoding.Default.GetBytes(key));
-                            Options.Id = Hsh(gmf + dmd);
-
-                            LCheckMessage = "Check completed.";
-                            EditorOptions.Save();
-                        }
-                        else
-                        {
-                            LCheckMessage = "License is out of date. Note: Try to check date/time settings on your computer.";
-                        }
-                    }
-                    else if (finalString.EndsWith(":NotActive"))
-                    {
-                        LCheckMessage = "Check result: License is no longer active.";
-                    }
-                    else if (finalString.EndsWith(":Failed"))
-                    {
-                        LCheckMessage = "Check result: Incorrect license number.";
-                    }
-                    else if (finalString.EndsWith(":Await"))
-                    {
-                        LCheckMessage = "Check result: Try again later.";
-                    }
-                    else
-                    {
-                        LCheckMessage = "Error: Unknown data type (while processing answer from server).";
-                    }
-
-                    if (LCheckMessage != "Check completed.")
-                    {
-                        var v = typeof(EditorOptions).GetField("Vari" + "ants");
-                        if (v != null)
-                            v.SetValue(Options, Encoding.Default.GetBytes(LCheckMessage));
-                        Options.Id = Hsh(LCheckMessage);
-                        EditorOptions.Save();
-                    }
-                }
-                catch (Exception ex)
-                {
-                    LCheckMessage = "Error: Unexpected error type: " + ex.Message;
-                }
-
-            }
-
-        });
-    }
-
-    private static string Hsh(string input)
-    {
-        MD5 md5Hash = new MD5CryptoServiceProvider();
-        var data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
-        StringBuilder sb = new StringBuilder();
-        data.ToList().ForEach(x => sb.Append(x.ToString("x2")));
-        return sb.ToString();
-    }
-
-    private static byte[] BTS(string str)
-    {
-        return Convert.FromBase64String(str);
-    }
-
-    static public string Finalize(byte[] cypher, string KeyString, string IVString)
-    {
-        var sRet = "";
-
-        var encoding = new UTF8Encoding();
-        var Key = encoding.GetBytes(KeyString);
-        var IV = encoding.GetBytes(IVString);
-
-        using (var rj = new RijndaelManaged())
-        {
-            try
-            {
-                rj.Padding = PaddingMode.PKCS7;
-                rj.Mode = CipherMode.CBC;
-                rj.KeySize = 256;
-                rj.BlockSize = 256;
-                rj.Key = Key;
-                rj.IV = IV;
-                var ms = new MemoryStream(cypher);
-
-                using (var cs = new CryptoStream(ms, rj.CreateDecryptor(Key, IV), CryptoStreamMode.Read))
-                {
-                    using (var sr = new StreamReader(cs))
-                    {
-                        sRet = sr.ReadLine();
-                    }
-                }
-            }
-            finally
-            {
-                rj.Clear();
-            }
-        }
-
-        return sRet;
     }
-    */
-
-    /////////////////////////////////////////////////////////////////////////////////////////////
-
 
+    
     private bool b_SaveWhileCompiling = false;
 
     private static float _debugBubblesDrawOffset = 0;
@@ -389,14 +89,12 @@
         }
     }
 
-
     //AutoSave
-     
-
 
     private int deltaUpdate = 0;
 
     private static bool flag_ReimportAssets = false;
+
     public void Update()
     {
         if (!EditorApplication.isPlaying)
@@ -421,55 +119,31 @@
                     Serialize_Script(script, path + ExtensionType, false);
                 }
             }
-
-
         }
 
-
-
-        deltaUpdate += 1;
-        if (deltaUpdate > 1)
-        {        
+        if (deltaUpdate++ > 0)
+        {
             deltaUpdate = 0;
             Repaint();
         }
 
-        if(flag_ReimportAssets)
+        if (flag_ReimportAssets)
         {
             flag_ReimportAssets = false;
 
-            if(CurScript != null)
+            if (CurScript != null)
                 AssetDatabase.ImportAsset(CurScript.ScriptFileName + ".cs", ImportAssetOptions.ForceUpdate);
         }
 
-        if (AskOverrideFile_Changed == 1)
-        {
-            if (!EditorUtility.DisplayDialog("Override file?", "The script was modified outside the plugin. Do you want to override it?", "Override", "Cancel"))
-                AskOverrideFile_Changed = 2;
-            else
-                AskOverrideFile_Changed = 0;
-        }
+        
     }
 
-
-     
-
-
-     
-      
-
-
-
-
-     
-
-
     private static void StopAllThreads()
     {
         NewNode_Window.AbortThread();
-        if(CurScript != null)
+        if (CurScript != null)
             CurScript.VarsWindow.AbortThread();
         AutoSave.AbortThread();
         TypeDataBase.AbortThread();
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_OnGUI.cs Editor/f_OnGUI.cs
--- .Editor/f_OnGUI.cs	2018-06-30 08:59:18.448600400 +0700
+++ Editor/f_OnGUI.cs	2018-06-30 09:02:03.809508900 +0700
@@ -1,12 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-using System.Runtime.Serialization.Formatters.Binary;
-using System.IO;
-using System;
+﻿using System;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -21,15 +16,11 @@
     public static Rect TopBarRect;
     public static Rect VarDeleteWarninRect;
 
-
-
     const float VarDeleteWarning_width = 464;
     const float VarDeleteWarning_height = 115;
 
-
     public static bool _LMB_Down = false;
     public static bool _LMB_Down_L = false;
-    
 
     public static bool _LMB_Up = false;
     private static bool _RMB_Up = false;
@@ -41,7 +32,7 @@
     private static Vector2 _RMB_Down_MousePos;
 
     public delegate void Void_Deleg();
-    
+
     public static Void_Deleg LMB_Down_Deleg = delegate { };
     public static Void_Deleg LMB_Up_Deleg = delegate { };
     public static Void_Deleg RMB_Up_Deleg = delegate { };
@@ -63,151 +54,60 @@
     private bool bHidden = false;
     private Rect HideSize;
 
+    /// <summary> Event.current </summary>
+    private static Event ev;
 
     private bool IsDockedWindow()
     {
-        BindingFlags fullBinding = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static;
+        const BindingFlags fullBinding = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static;
 
-        MethodInfo isDockedMethod = typeof(EditorWindow).GetProperty("docked", fullBinding).GetGetMethod(true);
+        MethodInfo isDockedMethod = typeof(EditorWindow).GetMethod("get_docked", fullBinding);
 
         return (bool)isDockedMethod.Invoke(this, null);
     }
 
-
     void OnGUI()
     {
-        var minRect = CreateRect(5, 3, 20, 17);
-        if (GUI.Button(minRect, "■", Res.ButtonSimple))
-        {
-            bHidden = !bHidden;
-
-            if (bHidden)
-            {
-                HideSize = BPE.position;
-                var size = BPE.position;
-
-                BPE.minSize = new Vector2(200, 30);
-
-                if (IsDockedWindow())
-                    BPE.maxSize = new Vector2(200, 30);
- 
-              
-                size.width = 110;
-                size.height = 30;
-                size.y -= 5;
-
-                BPE.position = size;
-            }
-            else
-            {
-                var pos = BPE.position;
-                BPE.minSize = new Vector2(800, 600);
-                BPE.maxSize = new Vector2(8000, 6000);
-                pos.width = HideSize.width;
-                pos.height = HideSize.height;
-                pos.y -= 5;
-                BPE.position = pos;
-            }
-            //ShowAuxWindow();
-            ShowUtility();
-        }
+        ev = Event.current;
 
+        DrawHideToggle(new Rect(5, 3, 20, 17));
 
         if (bHidden)
             return;
 
-        if (UndoSystem.DisableUndo)
-        {
-            UndoSystem.DisableUndo = false;
-        }
+        UndoSystem.DisableUndo = false;
 
-        if (DrawFrameNum < int.MaxValue)
-            DrawFrameNum++;
-        else
-            DrawFrameNum = 1;
+        DrawFrameNum = (DrawFrameNum + 1) % int.MaxValue;
 
         BPE = this;
-        Graphics.DrawTexture(CreateRect(0, 0, BPE.position.width, BPE.position.height), Res.Window_BG);
 
-        /*
-        ChWindow.Draw();
-        if (ChWindow.b_CheckWindowActive)
-            return;
-        */
+        DrawTexture(new Rect(Vector2.zero, BPE.position.size), Res.Window_BG);
+
+        GlobalMousePos = ev.mousePosition;
 
-        GlobalMousePos = Event.current.mousePosition;
-     
         //  if(ToolbarRect.width == 0)
         {
-            if(CurScript == null)
+            if (CurScript == null)
             {
-                ToolbarRect = CreateRect(0, 0, 300, BPE.position.height * 0.7f);
+                ToolbarRect = new Rect(0, 0, 300, BPE.position.height * 0.7f);
             }
             else
             {
-                ToolbarRect = CreateRect(0, 0, Options.Toolbar_Width, Options.Toolbar_Height);
+                ToolbarRect = new Rect(0, 0, Options.Toolbar_Width, Options.Toolbar_Height);
             }
         }
 
-        ControlBarRect = CreateRect(ToolbarRect.width, 20 + BR_Offset, BPE.position.width - ToolbarRect.width, 63);
-
-        DetailsRect = CreateRect(0, ToolbarRect.height + 5, ToolbarRect.width, BPE.position.height - ToolbarRect.height - 15);
-
-
-
-        EditGraphRect = CreateRect(ToolbarRect.width, 20 + ControlBarRect.height + BR_Offset + DTM_Offset, BPE.position.width - ToolbarRect.width, BPE.position.height - 20 - ControlBarRect.height - BConsole.ActiveConsole.LerpHeight - BR_Offset - DTM_Offset);
-
+        ControlBarRect = new Rect(ToolbarRect.width, 20 + BR_Offset, BPE.position.width - ToolbarRect.width, 63);
 
-        Global_MouseInEditGraph = EditGraphRect.Contains(Event.current.mousePosition);
+        DetailsRect = new Rect(0, ToolbarRect.height + 5, ToolbarRect.width, BPE.position.height - ToolbarRect.height - 15);
 
-        if (Event.current.isMouse && Event.current.button == 1 && Event.current.type == EventType.MouseUp)
-        {
-            _RMB_Up = true;
-        }
+        EditGraphRect = new Rect(ToolbarRect.width, 20 + ControlBarRect.height + BR_Offset + DTM_Offset, BPE.position.width - ToolbarRect.width, BPE.position.height - 20 - ControlBarRect.height - BConsole.ActiveConsole.LerpHeight - BR_Offset - DTM_Offset);
 
-        if (Event.current.isMouse && Event.current.button == 0 && Event.current.type == EventType.MouseDown)
-        {
-            _LMB_Down = true;
-            _LMB_Down_MousePos = GlobalMousePos;
-        }
+        Global_MouseInEditGraph = EditGraphRect.Contains(ev.mousePosition);
 
-        if (Event.current.button == 0 && Event.current.type == EventType.MouseDown)
-        {
-            _LMB_Down_L = true;
-        }
-        else if (Event.current.button == 0 && Event.current.type == EventType.MouseUp)
-        {
-            _LMB_Down_L = false;
-        }
+        RefreshMouseParameters();
 
-        if (Event.current.isMouse && Event.current.button == 1 && Event.current.type == EventType.MouseDown)
-        {
-            _RMB_Down = true;
-            _RMB_Down_MousePos = GlobalMousePos;
-        }
-
-        if (Event.current.isMouse && Event.current.button == 0 && Event.current.type == EventType.MouseUp)
-        {
-            _LMB_Up = true;
-        }
-
-        if (Event.current.isMouse && (Event.current.button == 1 || Event.current.button == 0) && Event.current.type == EventType.MouseDown)
-        {
-            RenameField.b_ForceStopEditRenameField = true;
-        }
-
-        if (_RMB_Up)
-        {
-            if (Vector2.Distance(_RMB_Down_MousePos, Event.current.mousePosition) < 5)
-            {
-                _TryOpen_RMB_Menu = true;
-            }
-        }
-      
         BeginWindows();
-       
-        //if (CPickerGlobalActive)
-        //    colorPickerColor = EditorGUI.ColorField(CPickerRect, colorPickerColor);
 
         if (CurDrawable != null)
         {
@@ -215,15 +115,13 @@
         }
         else
         {
-            //if (CurScript != null)
-                //GUI.Label(CreateRect(Screen.width / 2 - 100, Screen.height / 2, 200, 30), "Nothing selected...");
+            if (CurScript != null)
+                GUI.Label(new Rect(Screen.width / 2 - 100, Screen.height / 2, 200, 30), "Nothing selected...");
         }
 
-
         if (CurScript != null)
         {
-           
-            Event evtCur = Event.current;
+            Event evtCur = ev;
             if (evtCur.control && mouseOverWindow == BPE)
             {
                 if (evtCur.isKey && evtCur.keyCode == KeyCode.S)
@@ -232,17 +130,14 @@
 
             DrawScriptsTabs();
 
-
-            Graphics.DrawTexture(CreateRect(0, 0, ToolbarRect.width, BPE.position.height), Res.Window_BG);
+            DrawTexture(new Rect(0, 0, ToolbarRect.width, BPE.position.height), Res.Window_BG);
 
             WindowToolbar();
 
-            GUI.Box(CreateRect(1, ToolbarRect.height + 2, ToolbarRect.width - 2, 3), "", Res.Box);
-
-
+            GUI.Box(new Rect(1, ToolbarRect.height + 2, ToolbarRect.width - 2, 3), "", Res.Box);
 
             WindowDetails();
-            CurScript.ConsoleWindow.Draw(); // 10
+            CurScript.ConsoleWindow.Draw();
             DebugTM.Draw();
         }
         else
@@ -251,39 +146,29 @@
             OpenWindow.Show();
         }
 
-
         if (CurDrawable != null)
         {
-            Graphics.DrawTexture(EditGraphRect, Res.EditGraphOverlay, 150, 150, 110, 100);
-
-            if (CurScript.b_DebugMode) // && EditorApplication.isPlaying)
-                Graphics.DrawTexture(EditGraphRect, Res.DebugPlayOverlay, 32, 32, 32, 32);
-                    //CreateRect(ToolbarRect.width, 20, BPE.position.width - ToolbarRect.width, BPE.position.height - 31)
+            DrawTexture(EditGraphRect, Res.EditGraphOverlay, 150, 150, 110, 100);
 
+            if (CurScript.b_DebugMode)
+                DrawTexture(EditGraphRect, Res.DebugPlayOverlay, 32, 32, 32, 32);
         }
 
-
-
         OpenWindow.Draw(); // 9
 
-   
-        NewScriptWIndow.Draw();//13
+        NewScriptWindow.Draw();//13
 
         ReferenceWindow.Draw();//99
+
         FuncSeqWindow.Draw();//100
 
         NodesFitter.Draw();//192
-        
-
-
 
         if (CurScript == null)
         {
-          
             EndWindows();
 
             Draw_GUIToolTipe();
-
             _LMB_Down = false;
             _LMB_Up = false;
             _RMB_Up = false;
@@ -300,89 +185,53 @@
             UndoSystem.UpdateUndo_Control();
         }
 
-   
-
         DrawControlBar();
 
-     
-
-
         if (CurDrawable != null)
         {
-            //Graphics.DrawTexture(EditGraphRect, Res.EditGraphOverlay, 150, 150, 110, 100);
-
-            //if (CurScript.b_DebugMode)// && EditorApplication.isPlaying)
-           //     Graphics.DrawTexture(EditGraphRect, Res.DebugPlayOverlay, 32, 32, 32, 32);//CreateRect(ToolbarRect.width, 20, BPE.position.width - ToolbarRect.width, BPE.position.height - 31)
-
-
-
 
+            Rect zoomRect = new Rect(EditGraphRect.x + EditGraphRect.width - 140, EditGraphRect.y + 13, 200, 40);
+            GUI.Label(zoomRect, "Zoom: " + (1.0f / CurDrawable.Zoom).ToString("0.00") + "x", Res.BigWindowLabel);
 
-
-
-
-
-            ////////////////////////////////
-            Rect zoomRect = CreateRect(EditGraphRect.x + EditGraphRect.width - 140, EditGraphRect.y + 13, 200, 40);
-            float zoomDraw = 1.0f / CurDrawable.Zoom;
-            string zoomStr = string.Format("{0:0.00}", zoomDraw);
-            GUI.Label(zoomRect, "Zoom: " + zoomStr + "x", Res.BigWindowLabel);
-
-
-            Rect overlLabelRect = CreateRect(EditGraphRect.x + 3, EditGraphRect.y + 3, EditGraphRect.width - 6, 40);
+            Rect overlLabelRect = new Rect(EditGraphRect.x + 3, EditGraphRect.y + 3, EditGraphRect.width - 6, 40);
             GUI.DrawTexture(overlLabelRect, Res.EditGraph_LabelTab);
 
-
             BaseScriptObject drawbl = CurDrawable as BaseScriptObject;
 
             string displayName = "";
 
-        
-
             if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet)
             {
-                if(drawbl.OwnerProperty != null)
+                if (drawbl.OwnerProperty != null)
                 {
-                    if(drawbl.OwnerProperty.m_Indexer)
-                        displayName = drawbl.OwnerProperty.Config.Name + " Get (indexer)";
-                    else
-                        displayName = drawbl.OwnerProperty.Config.Name + " . Get";
+                    displayName = drawbl.OwnerProperty.Config.Name + (drawbl.OwnerProperty.m_Indexer ? " Get (indexer)" : " . Get");
                 }
-                 
             }
-            else if(CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet)
+            else if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet)
             {
                 if (drawbl.OwnerProperty != null)
                 {
-                    if (drawbl.OwnerProperty.m_Indexer)
-                        displayName = drawbl.OwnerProperty.Config.Name  + " Set (indexer)";
-                    else
-                        displayName = drawbl.OwnerProperty.Config.Name + " . Set";
+                    displayName = drawbl.OwnerProperty.Config.Name + (drawbl.OwnerProperty.m_Indexer ? " Set (indexer)" : " . Set");
                 }
             }
             else
             {
-                if (CurScript.Classes.Count > 1)
-                    displayName = CurClass.Config.Name + " . " + drawbl.Config.Name;
-                else
-                    displayName = drawbl.Config.Name;
+                displayName = CurClass.Config.Name + (CurScript.Classes.Count > 1 ? " . " + drawbl.Config.Name : "");
             }
 
-
-
             float drawOffsetX = CalcStringPixelsX(displayName, Res.BigWindowLabel);
 
-            overlLabelRect = CreateRect(overlLabelRect.x + overlLabelRect.width / 2 - drawOffsetX / 2, overlLabelRect.y + 10, 500, 30);
+            overlLabelRect = new Rect(overlLabelRect.x + overlLabelRect.width / 2 - drawOffsetX / 2, overlLabelRect.y + 10, 500, 30);
 
             GUI.Label(overlLabelRect, displayName, Res.BigWindowLabel);
 
-            if(_LMB_Down && overlLabelRect.Contains(Event.current.mousePosition))
+            if (_LMB_Down && overlLabelRect.Contains(ev.mousePosition))
             {
                 LMB_Down_Deleg = delegate
                 {
                     if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet || CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet)
                         CurScript.SetSelectedObject = drawbl.OwnerProperty;
-                    else 
+                    else
                         CurScript.SetSelectedObject = CurDrawable;
                 };
             }
@@ -393,17 +242,15 @@
 
             if (CurClass.CurrentDrawable.DrawType == DrawableType.Method)
             {
-                Graphics.DrawTexture(overlLabelRect, Res.IconMethod);
+                DrawTexture(overlLabelRect, Res.IconMethod);
             }
             else if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet || CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet)
             {
-                Graphics.DrawTexture(overlLabelRect, Res.IconProperty);
-
+                DrawTexture(overlLabelRect, Res.IconProperty);
 
                 ScriptProperty prop = CurDrawable.OwnerProperty;
                 if (prop != null)
                 {
-                    //if (!prop.IsInherited)
                     {
                         overlLabelRect.x = EditGraphRect.x + 30;
                         prop._Set = EditorGUI.Toggle(overlLabelRect, prop._Set, Res.CheckBoxButton);
@@ -424,9 +271,8 @@
                             CurClass.CurrentDrawable.DrawType = DrawableType.PropertyGet;
                         }
 
-
                         overlLabelRect.x += 50;
-                        overlLabelRect.width = 20;           
+                        overlLabelRect.width = 20;
                         prop._Get = EditorGUI.Toggle(overlLabelRect, prop._Get, Res.CheckBoxButton);
                         overlLabelRect.x += 20;
                         overlLabelRect.width = 50;
@@ -447,31 +293,25 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Null property!" + prop + " CD: " + CurDrawable.Config.Name + " type: " + CurDrawable.GetType());
+                    if (Options.b_ShowDebug) Debug.Log("Null property!" + prop + " CD: " + CurDrawable.Config.Name + " type: " + CurDrawable.GetType());
                 }
             }
             else if (CurClass.CurrentDrawable.DrawType == DrawableType.Constructor)
             {
-                Graphics.DrawTexture(overlLabelRect, Res.IconConstructor);
+                DrawTexture(overlLabelRect, Res.IconConstructor);
             }
 
-
-
             /////////////////////////////////////////////////////////////
         }
 
-
-
         CurScript.VarsWindow.Draw();// CVarsListWindow ID: 5
 
-        
         NewNode_Window.Draw(); // 6
 
         RMB_Window.Draw();// 7
 
         TypeSelectList.Draw(); // 8
 
-
         FunctionNamesList.Draw(); // 12
 
         DropWindowMenu.Draw();//11
@@ -482,23 +322,18 @@
 
         OptionsPanel.Draw(); //12
 
-
         ColorPicker.DrawColorPicker();//124
 
-        Event evCur = Event.current;
+        Event evCur = ev;
         if (evCur.type == EventType.DragUpdated || evCur.type == EventType.DragPerform)
         {
-            //if (Global_MouseInEditGraph)
-            {
-
-                DragAndDrop.visualMode = DragAndDropVisualMode.Link;
+            DragAndDrop.visualMode = DragAndDropVisualMode.Link;
 
-                if (evCur.type == EventType.DragPerform)
-                {
-                    DragAndDrop.AcceptDrag();
+            if (evCur.type == EventType.DragPerform)
+            {
+                DragAndDrop.AcceptDrag();
 
-                    DropWindowMenu.Show(GlobalMousePos, DragAndDrop.objectReferences);
-                }
+                DropWindowMenu.Show(GlobalMousePos, DragAndDrop.objectReferences);
             }
         }
 
@@ -506,26 +341,13 @@
 
         Draw_GUIToolTipe();
 
-        DrawProgressBar(CreateRect(ToolbarRect.x, BPE.position.height - 10, ToolbarRect.width, 10), TypeDataBase.LoadProgress);
+        DrawProgressBar(new Rect(ToolbarRect.x, BPE.position.height - 10, ToolbarRect.width, 10), TypeDataBase.LoadProgress);
 
         if (Linking.IsLinkingSomething)
         {
-            if (_LMB_Down)
-            {
-                if (!NewNode_Window.b_Active || (NewNode_Window.b_Active && !NewNode_Window.DrawRect.Contains(_LMB_Down_MousePos)))
-                {
-                    //Linking.StopLinking();
-                }
-            }
-
-            //if (!NewNode_Window.b_Active)
-            {
-                //Linking.MousePos = CurDrawable.GetRealMousePos;
-            }
-
             if (_LMB_Up)
             {
-                if (Vector2.Distance(_LMB_Down_MousePos, Event.current.mousePosition) > 5)
+                if (Vector2.Distance(_LMB_Down_MousePos, ev.mousePosition) > 5)
                 {
                     NewNode_Window.Show(GlobalMousePos, true, true, false);
                 }
@@ -536,7 +358,6 @@
             }
         }
 
-
         ResizeToolbar();
 
         ProcessDrag();
@@ -544,134 +365,169 @@
         if (!Linking.b_PinLinking)
             ClearOutFilterPin();
 
-
         if (_LMB_Up && (Linking.b_PinDragLinking || Linking.b_ConnectorDragLinking))
         {
             Linking.StopLinking();
         }
 
-
         _LMB_Down = false;
         _LMB_Up = false;
         _RMB_Up = false;
         _RMB_Down = false;
         _TryOpen_RMB_Menu = false;
 
-
-  
         InfoMessages.DrawMessages();
 
         if (RenameField.b_ForceStopEditRenameField)
         {
             RenameField.PerfStopEdit();
         }
+    }
 
-        /*
-        if (!CPOpened)
-            CPpos = Event.current.mousePosition - Vector2.one * 5;
-        else
+    private static void RefreshMouseParameters()
+    {
+        if (ev.isMouse && ev.button == 1 && ev.type == EventType.MouseUp)
+        {
+            _RMB_Up = true;
+        }
+
+        if (ev.isMouse && ev.button == 0 && ev.type == EventType.MouseDown)
+        {
+            _LMB_Down = true;
+            _LMB_Down_MousePos = GlobalMousePos;
+        }
+
+        if (ev.button == 0 && ev.type == EventType.MouseDown)
         {
-            Debug.Log("Drawing...");
-      
+            _LMB_Down_L = true;
+        }
+        else if (ev.button == 0 && ev.type == EventType.MouseUp)
+        {
+            _LMB_Down_L = false;
         }
-        */
-        //CPpos = Event.current.mousePosition - Vector2.one * 5;
-        //GUI.enabled = CPOpened;
-     
 
-        //GUI.enabled = true;
+        if (ev.isMouse && ev.button == 1 && ev.type == EventType.MouseDown)
+        {
+            _RMB_Down = true;
+            _RMB_Down_MousePos = GlobalMousePos;
+        }
+
+        if (ev.isMouse && ev.button == 0 && ev.type == EventType.MouseUp)
+        {
+            _LMB_Up = true;
+        }
+
+        if (ev.isMouse && (ev.button == 1 || ev.button == 0) && ev.type == EventType.MouseDown)
+        {
+            RenameField.b_ForceStopEditRenameField = true;
+        }
 
-        //GUIToolTipe = "";
+        if (_RMB_Up)
+        {
+            if (Vector2.Distance(_RMB_Down_MousePos, ev.mousePosition) < 5)
+            {
+                _TryOpen_RMB_Menu = true;
+            }
+        }
     }
-    //private static Rect CPickerRect;
-    //private static bool CPickerGlobalActive = false;
-    //private static Vector2 CPickerUniqPos;
-    //public static bool ColorPickerForNode = false;
 
+    private void DrawHideToggle(Rect minRect)
+    {
+        if (GUI.Button(minRect, "■", Res.ButtonSimple))
+        {
+            bHidden = !bHidden;
+
+            if (bHidden)
+            {
+                HideSize = BPE.position;
+                var size = BPE.position;
+
+                BPE.minSize = new Vector2(200, 30);
+
+                if (IsDockedWindow())
+                    BPE.maxSize = new Vector2(200, 30);
+
+                size.width = 110;
+                size.height = 30;
+                size.y -= 5;
+
+                BPE.position = size;
+            }
+            else
+            {
+                var pos = BPE.position;
+                BPE.minSize = new Vector2(800, 600);
+                BPE.maxSize = new Vector2(8000, 6000);
+                pos.width = HideSize.width;
+                pos.height = HideSize.height;
+                pos.y -= 5;
+                BPE.position = pos;
+            }
+            ShowUtility();
+        }
+    }
 
     private bool b_ResizeToolbar_Vert = false;
     private bool b_ResizeToolbar_Hor = false;
+
     private void ResizeToolbar()
     {
         if (CurScript != null)
         {
             ///////////  Horis  /////////////////////
 
-            if(Options.Toolbar_Height == -1)
+            if (Options.Toolbar_Height == -1)
             {
                 Options.Toolbar_Height = BPE.position.height / 3 * 2;
             }
 
+            Rect ResizeToolbRect_Vert = new Rect(DetailsRect.x, DetailsRect.y - 5, DetailsRect.width, 15);
 
-
-
-            Rect ResizeToolbRect_Vert = CreateRect(DetailsRect.x, DetailsRect.y - 5, DetailsRect.width, 15);
-
-            if (ResizeToolbRect_Vert.Contains(Event.current.mousePosition))
+            if (ResizeToolbRect_Vert.Contains(ev.mousePosition))
                 EditorGUIUtility.AddCursorRect(ResizeToolbRect_Vert, MouseCursor.ResizeVertical);
 
-
-            if (b_ResizeToolbar_Vert && Event.current.type == EventType.MouseDrag)
+            if (b_ResizeToolbar_Vert && ev.type == EventType.MouseDrag)
             {
-                Options.Toolbar_Height += Event.current.delta.y;
+                Options.Toolbar_Height += ev.delta.y;
             }
 
-
-            if (_LMB_Down && ResizeToolbRect_Vert.Contains(Event.current.mousePosition))
+            if (_LMB_Down && ResizeToolbRect_Vert.Contains(ev.mousePosition))
             {
                 b_ResizeToolbar_Vert = true;
             }
 
             ////////////////  Horis //////////////////////////
 
-            Rect ResizeToolbRect_Hor = CreateRect(ToolbarRect.width - 4, ToolbarRect.y, 8, BPE.position.height);
+            Rect ResizeToolbRect_Hor = new Rect(ToolbarRect.width - 4, ToolbarRect.y, 8, BPE.position.height);
 
-            if (ResizeToolbRect_Hor.Contains(Event.current.mousePosition))
+            if (ResizeToolbRect_Hor.Contains(ev.mousePosition))
                 EditorGUIUtility.AddCursorRect(ResizeToolbRect_Hor, MouseCursor.ResizeHorizontal);
 
-
-
-
-            if (b_ResizeToolbar_Hor && Event.current.type == EventType.MouseDrag)
+            if (b_ResizeToolbar_Hor && ev.type == EventType.MouseDrag)
             {
-                Options.Toolbar_Width += Event.current.delta.x;
+                Options.Toolbar_Width += ev.delta.x;
             }
 
-
-            if (_LMB_Down && ResizeToolbRect_Hor.Contains(Event.current.mousePosition))
+            if (_LMB_Down && ResizeToolbRect_Hor.Contains(ev.mousePosition))
             {
                 b_ResizeToolbar_Hor = true;
             }
 
-
-
             //////////////////////////////////////////
 
-
-            if (Options.Toolbar_Height < 100)
-                Options.Toolbar_Height = 100;
-
-            if (Options.Toolbar_Height > BPE.position.height - 100)
-                Options.Toolbar_Height = BPE.position.height - 100;
-
-
-            if (Options.Toolbar_Width < 200)
-                Options.Toolbar_Width = 200;
-
-            if (Options.Toolbar_Width > BPE.position.width - 450)
-                Options.Toolbar_Width = BPE.position.width - 450;
+            Options.Toolbar_Height = Mathf.Clamp(Options.Toolbar_Height, 100, BPE.position.height - 100);
+            Options.Toolbar_Width = Mathf.Clamp(Options.Toolbar_Width, 200, BPE.position.height - 450);
         }
 
-        if (Event.current.type == EventType.MouseUp)
+        if (ev.type == EventType.MouseUp)
         {
-            b_ResizeToolbar_Vert = false;
-            b_ResizeToolbar_Hor = false;
+            b_ResizeToolbar_Vert = b_ResizeToolbar_Hor = false;
         }
     }
 
     private void Draw_GUIToolTipe()
     {
-        Vector2 mousePos = Event.current.mousePosition;
+        Vector2 mousePos = ev.mousePosition;
         Vector2 labelPixelsSize = CalcStringPixels(GUIToolTipe, Res.NodePinLabel) + new Vector2(10, 4);
 
         float height = labelPixelsSize.y + 10;
@@ -679,64 +535,52 @@
         ToolTipeWindowRect = new Rect(mousePos.x + 2, (mousePos.y - height) - 2, labelPixelsSize.x, height);
 
         if (!string.IsNullOrEmpty(GUIToolTipe))
-            //GUI.Window(112, ToolTipeWindowRect, ToolTipeWindow, "", Res.EmptyStyle);
 
-        ToolTipeWindow(0);
+            ToolTipeWindow(0);
 
         if (clearTooltipeTime > 15)
         {
-            //GUIToolTipe = "";
             clearTooltipeTime = 0;
         }
 
         clearTooltipeTime++;
-
-        //GUIToolTipe = "";
     }
-    private Rect ToolTipeWindowRect = CreateRect();
-    private void ToolTipeWindow(int windowID)
-    {
-        //GUI.BringWindowToFront(windowID);
-
 
+    private Rect ToolTipeWindowRect = new Rect();
 
+    private void ToolTipeWindow(int windowID)
+    {
         GUI.color = Color.white;
 
-        if(ToolTipeWindowRect.x + ToolTipeWindowRect.width > BPE.position.width)
+        if (ToolTipeWindowRect.x + ToolTipeWindowRect.width > BPE.position.width)
         {
             ToolTipeWindowRect.x = BPE.position.width - ToolTipeWindowRect.width;
         }
 
-
-        //ToolTipeWindowRect.position = Vector2.zero;
-        Graphics.DrawTexture(ToolTipeWindowRect, Res.Small_Window_BG, 5, 5, 5, 5);
+        DrawTexture(ToolTipeWindowRect, Res.Small_Window_BG, 5, 5, 5, 5);
 
         ToolTipeWindowRect.x += 3;
-        ToolTipeWindowRect.y += 10;   
+        ToolTipeWindowRect.y += 10;
         GUI.Label(ToolTipeWindowRect, GUIToolTipe, Res.NodePinLabel);
 
-
-
         GUIToolTipe = "";
     }
 
     private int clearTooltipeTime = 0;
     private float DrawTabsPosX = 0;
+
     private void DrawScriptsTabs()
     {
         float posy = 0;
 
         DrawTabsPosX = ToolbarRect.width;
 
-        Graphics.DrawTexture(CreateRect(0, posy, BPE.position.width, 20), Res.TabBackground);
-
+        DrawTexture(new Rect(0, posy, BPE.position.width, 20), Res.TabBackground);
 
         for (int i = 0; i < Scripts.Count; i++)
         {
-            //if (CurrentScript != i)
             DrawTab(i, posy);
         }
-        //DrawTab(CurrentScript, posy);
     }
 
     private void DrawTab(int i, float posy)
@@ -745,23 +589,20 @@
 
         string tabName = script.ScriptName;
 
-        float tabWidth = CalcStringPixelsX(tabName, Res.NodePinLabel);
-
-        tabWidth += 35;
+        float tabWidth = CalcStringPixelsX(tabName, Res.NodePinLabel) + 35;
 
         tabWidth = Mathf.Clamp(tabWidth, 100, 300);
 
-        Rect DrawTabRect = CreateRect(DrawTabsPosX, posy, tabWidth, 20);
+        Rect DrawTabRect = new Rect(DrawTabsPosX, posy, tabWidth, 20);
 
         DrawTabsPosX += tabWidth;
 
         if (CurrentScript == i)
-            Graphics.DrawTexture(DrawTabRect, Res.TabActive, 20, 20, 5, 5);
+            DrawTexture(DrawTabRect, Res.TabActive, 20, 20, 5, 5);
         else
-            Graphics.DrawTexture(DrawTabRect, Res.Tab, 20, 20, 5, 5);
-
+            DrawTexture(DrawTabRect, Res.Tab, 20, 20, 5, 5);
 
-        if (_LMB_Down && DrawTabRect.Contains(Event.current.mousePosition))
+        if (_LMB_Down && DrawTabRect.Contains(ev.mousePosition))
         {
             int newTabNum = i;
             LMB_Down_Deleg = delegate
@@ -775,22 +616,14 @@
             };
         }
 
-
-        
-
-        Rect DrawlabelRect = CreateRect(DrawTabRect.x + 10, posy + 5, DrawTabRect.width - 10, 20);
+        Rect DrawlabelRect = new Rect(DrawTabRect.x + 10, posy + 5, DrawTabRect.width - 10, 20);
         GUI.Label(DrawlabelRect, tabName, Res.NodePinLabel);
 
+        Rect DrawCloseRect = new Rect(DrawTabRect.x + DrawTabRect.width - 15, posy + 5, 10, 10);
 
-        Rect DrawCloseRect = CreateRect(DrawTabRect.x + DrawTabRect.width - 15, posy + 5, 10, 10);
-
-        if (DrawCloseRect.Contains(Event.current.mousePosition))
+        if (DrawCloseRect.Contains(ev.mousePosition))
         {
-
-            if (_LMB_Down_L)
-                Graphics.DrawTexture(DrawCloseRect, Res.TabClose_Pressed);
-            else
-                Graphics.DrawTexture(DrawCloseRect, Res.TabClose_Hovered);
+            DrawTexture(DrawCloseRect, _LMB_Down_L ? Res.TabClose_Pressed : Res.TabClose_Hovered);
 
             if (_LMB_Up)
             {
@@ -802,31 +635,28 @@
         }
         else
         {
-            Graphics.DrawTexture(DrawCloseRect, Res.TabClose);
+            DrawTexture(DrawCloseRect, Res.TabClose);
         }
-
     }
 
     private static bool DragScriptObj { get; set; }
     private static string DragObjName_Postfix = "";
     private static string DragObjName_Prefix = "";
 
-
     private void ProcessDrag()
     {
         if (mouseOverWindow == null) return;
         if (DragScriptObj && (_RMB_Up || (mouseOverWindow.name != BPE.name)))
         {
-            DragScriptObj = false;      
+            DragScriptObj = false;
         }
 
-
         float drawPosY = 0;
         if (DragScriptObj)
         {
             foreach (BaseScriptObject dragObj in CurScript.SelectedScriptObjects)
             {
-                if (CurDrawable != null && EditGraphRect.Contains(Event.current.mousePosition))
+                if (CurDrawable != null && EditGraphRect.Contains(ev.mousePosition))
                 {
                     DragObjName_Prefix = "Add node: ";
                 }
@@ -841,9 +671,7 @@
         {
             DragScriptObj = false;
 
-
-
-            if (CurDrawable != null && EditGraphRect.Contains(Event.current.mousePosition))
+            if (CurDrawable != null && EditGraphRect.Contains(ev.mousePosition))
             {
                 float spawnPosY = 0;
 
@@ -859,7 +687,7 @@
                         UndoSystem.RegisterUndo("Node creation");
                         CurDrawable.Nodes.Add(new Node(dragObj, realspawnVect.x, realspawnVect.y + spawnPosY));
                         spawnPosY += 100;
-                    } 
+                    }
                 }
             }
         }
@@ -891,9 +719,9 @@
 
                 float width = CalcStringPixelsX(Message, Res.NodePinLabel) + 30;
 
-                Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 36, width, 36);
+                Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 36, width, 36);
 
-                Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+                DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
                 Rect IconRect = DragRect;
 
@@ -901,15 +729,13 @@
                 DragRect.y += 12;
                 GUI.Label(DragRect, Message, Res.NodePinLabel);
 
-
                 IconRect.x += 2;
                 IconRect.y += 2;
 
                 IconRect.height = 32;
                 IconRect.width = 32;
 
-
-                Graphics.DrawTexture(IconRect, Res.error_node_icon);
+                DrawTexture(IconRect, Res.error_node_icon);
 
                 return;
             }
@@ -919,8 +745,8 @@
         {
             float width = CalcStringPixelsX(DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -928,7 +754,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -948,9 +773,9 @@
         {
             float width = CalcStringPixelsX(DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
 
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -958,7 +783,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -978,9 +802,9 @@
         {
             float width = CalcStringPixelsX(DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
 
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -988,7 +812,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -1001,16 +824,13 @@
 
             drawPosY += 24;
         }
-
-
         else if (dragObj is ScriptProperty)
         {
-
             float width = CalcStringPixelsX(DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
 
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -1018,7 +838,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -1041,8 +860,8 @@
 
             float width = CalcStringPixelsX(DragObjName_Prefix + draggingClass.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -1050,8 +869,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + draggingClass.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -1069,8 +886,8 @@
         {
             float width = CalcStringPixelsX(DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-            Rect DragRect = CreateRect(Event.current.mousePosition.x, drawPosY + Event.current.mousePosition.y - 24, width, 24);
-            Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+            Rect DragRect = new Rect(ev.mousePosition.x, drawPosY + ev.mousePosition.y - 24, width, 24);
+            DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
             Rect IconRect = DragRect;
 
@@ -1078,8 +895,6 @@
             DragRect.y += 5;
             GUI.Label(DragRect, DragObjName_Prefix + dragObj.Config.Name + DragObjName_Postfix, Res.NodePinLabel);
 
-
-
             IconRect.x += 5;
             IconRect.y += 2;
 
@@ -1093,14 +908,13 @@
             drawPosY += 24;
         }
     }
-
-
+    
     public static void DrawDrag_NNW_NewNode(object dragObj, string objName)
     {
         float width = CalcStringPixelsX(DragObjName_Prefix + objName + DragObjName_Postfix, Res.NodePinLabel) + 30;
 
-        Rect DragRect = CreateRect(Event.current.mousePosition.x,  Event.current.mousePosition.y - 24, width, 24);
-        Graphics.DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
+        Rect DragRect = new Rect(ev.mousePosition.x, ev.mousePosition.y - 24, width, 24);
+        DrawTexture(DragRect, Res.Small_Window_BG, 15, 15, 15, 15);
 
         Rect IconRect = DragRect;
 
@@ -1108,7 +922,6 @@
         DragRect.y += 5;
         GUI.Label(DragRect, DragObjName_Prefix + objName + DragObjName_Postfix, Res.NodePinLabel);
 
-
         IconRect.x += 5;
         IconRect.y += 2;
 
@@ -1118,6 +931,5 @@
         GUI.color = Color.gray;
         GUI.DrawTexture(IconRect, Res.VarIcon);
         GUI.color = Color.white;
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_VarWarnDeleteWindow.cs Editor/f_VarWarnDeleteWindow.cs
--- .Editor/f_VarWarnDeleteWindow.cs	2018-06-30 08:59:18.451601900 +0700
+++ Editor/f_VarWarnDeleteWindow.cs	2018-06-30 09:02:03.810508200 +0700
@@ -1,13 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     private void DeleteEditGraphSelection()
@@ -31,7 +25,6 @@
             delComment.CommentaryNodes = new List<int>();
             delComment.CheckNodesCommentariesInComment();
 
-
             if (delComment.CommentaryNodes.Count > 0)
             {
                 if (EditorUtility.DisplayDialog("Delete commentary", "Delete nodes in commentary '" + delComment.CommentaryName + "'?", "Delete with nodes", "Delete only commentary"))
@@ -60,7 +53,7 @@
 
     public static void DeleteSelectedScriptObjs()
     {
-        if(IsEditingText || CurScript.SelectedScriptObjects.Count == 0)
+        if (IsEditingText || CurScript.SelectedScriptObjects.Count == 0)
         {
             return;
         }
@@ -70,7 +63,7 @@
         VarDeleteWarninRect.x = 0;
         VarDeleteWarninRect.y = 0;
 
-        //Graphics.DrawTexture(VarDeleteWarninRect, Res.DeleteVarWarnWindow);
+        //DrawTexture(VarDeleteWarninRect, Res.DeleteVarWarnWindow);
 
         foreach (BaseScriptObject dragObj in CurScript.SelectedScriptObjects)
         {
@@ -90,7 +83,7 @@
             {
                 string objName = RenameScriptObject(dragObj.GetType().Name);
 
-                if(dragObj is ScriptClass)
+                if (dragObj is ScriptClass)
                 {
                     if ((dragObj as ScriptClass).StructType)
                         objName = "Struct";
@@ -105,23 +98,21 @@
                     );
 
                 if (option == 0)//Variant 1
-                {              
+                {
                     DeleteScriptObj(dragObj);
                 }
                 else if (option == 1)//Variant 2
                 {
                     Options.SetParameterValue(optionsParameter, true);
-                    
+
                     DeleteScriptObj(dragObj);
                 }
                 else if (option == 2)//Cancel
                 {
-                    
                 }
-            } 
+            }
         }
 
-
         CurScript.SelectedScriptObjects = new List<BaseScriptObject>();
     }
 
@@ -130,23 +121,32 @@
         switch (origName)
         {
             case "ScriptClassConstructor":
-                return "Class Constructor";             
+                return "Class Constructor";
+
             case "ScriptClass":
-                return "Class";                
+                return "Class";
+
             case "ScriptClassVariable":
                 return "Class Variable";
+
             case "ScriptLocalVariable":
                 return "Local Variable";
+
             case "ScriptClassEvent":
                 return "Event";
+
             case "ScriptFunction":
                 return "Function";
+
             case "ScriptProperty":
                 return "Property";
+
             case "ScriptEnum":
                 return "Enum";
+
             case "ScriptDelegate":
                 return "Delegate";
+
             default:
                 return origName;
         }
@@ -225,7 +225,7 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Deleting script object type is not defined: " + (dragObj == null ? "Null" : dragObj.GetType().ToString()));
+            if (Options.b_ShowDebug) Debug.Log("Deleting script object type is not defined: " + (dragObj == null ? "Null" : dragObj.GetType().ToString()));
         }
         EditorOptions.Save();
     }
@@ -254,4 +254,4 @@
         CurClass.CurrentDrawable.ID = -1;
         CurClass.CurrentDrawable.DrawType = DrawableType.Method;
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_Window_Details.cs Editor/f_Window_Details.cs
--- .Editor/f_Window_Details.cs	2018-06-30 08:59:18.458602500 +0700
+++ Editor/f_Window_Details.cs	2018-06-30 09:02:03.814509600 +0700
@@ -1,39 +1,30 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     void WindowDetails()
     {
-        Graphics.DrawTexture(CreateRect(DetailsRect.x, DetailsRect.y, DetailsRect.width, DetailsRect.height), Res.Window, 180, 10, 50, 10);
+        DrawTexture(new Rect(DetailsRect.x, DetailsRect.y, DetailsRect.width, DetailsRect.height), Res.Window, 180, 10, 50, 10);
 
         if (_LMB_Up)
         {
             if (DetailsRect.Contains(GlobalMousePos))
                 LMB_Up_Deleg = delegate { };
         }
-        if(_LMB_Down)
+        if (_LMB_Down)
         {
             if (DetailsRect.Contains(GlobalMousePos))
                 LMB_Down_Deleg = delegate { };
         }
 
-        if(_RMB_Down || _RMB_Up || _TryOpen_RMB_Menu)
+        if (_RMB_Down || _RMB_Up || _TryOpen_RMB_Menu)
         {
             if (DetailsRect.Contains(GlobalMousePos))
                 RMB_Up_Deleg = delegate { };
         }
 
-  
-        
-
         if (CurScript.SelectedScriptObjects.Count == 1)
         {
             BaseScriptObject SelObj = CurScript.SelectedScriptObjects[0];
@@ -44,14 +35,14 @@
         }
         else
         {
-            Rect DrawlabelRect = CreateRect(20, DetailsRect.y + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(20, DetailsRect.y + 5, 100, 20);
             GUI.Label(DrawlabelRect, "Details", Res.NodePinLabel);
         }
 
         if (CurScript.SelectedScriptObjects.Count > 1)
         {
-            Rect DrawlabelRect = CreateRect(10, DetailsRect.y + 50, 200, 20);
+            Rect DrawlabelRect = new Rect(10, DetailsRect.y + 50, 200, 20);
             GUI.Label(DrawlabelRect, "Multi editing is not allowed", Res.NodePinLabel);
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_WindowEditGraph.cs Editor/f_WindowEditGraph.cs
--- .Editor/f_WindowEditGraph.cs	2018-06-30 08:59:18.455601700 +0700
+++ Editor/f_WindowEditGraph.cs	2018-06-30 09:02:03.813509700 +0700
@@ -1,17 +1,13 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     private static bool b_SelectNodes = false;
-    private static Rect SelectNodesRect = CreateRect(0, 0, 0, 0);
+    private static Rect SelectNodesRect = new Rect(0, 0, 0, 0);
     private static Vector2 SelectNodesStartPos = Vector2.zero;
 
     public static Rect RealEditGraphRect;
@@ -20,21 +16,21 @@
     private bool bAllowCut = false;
     private bool bAllowPaste = false;
     private bool bControlKeyUp = true;
+
     void WindowEditGraph()
     {
-        Event curEvent = Event.current;
         if (Options.bPreventHotkeysSpam)
         {
-            if (curEvent.isKey && curEvent.control)
+            if (ev.isKey && ev.control)
             {
-                if (curEvent.type == EventType.KeyDown && bControlKeyUp)
+                if (ev.type == EventType.KeyDown && bControlKeyUp)
                 {
                     bAllowCut = true;
                     bAllowCopy = true;
                     bAllowPaste = true;
                     bControlKeyUp = false;
                 }
-                else if (curEvent.type == EventType.KeyUp)
+                else if (ev.type == EventType.KeyUp)
                 {
                     bAllowCut = false;
                     bAllowCopy = false;
@@ -49,46 +45,114 @@
             bAllowCut = true;
             bAllowPaste = true;
         }
-        if (curEvent.control)
+
+        if (ev.isKey & (ev.control | ev.command))
         {
-            if (curEvent.isKey && curEvent.keyCode == KeyCode.C && bAllowCopy)
+            if (ev.keyCode == KeyCode.C && bAllowCopy)
             {
                 bAllowCopy = false;
                 CopyNodes.CopyNodes(CurDrawable.SelectedNodes, CurDrawable.SelectedCommentary);
             }
 
-            if (curEvent.isKey && curEvent.keyCode == KeyCode.X && bAllowCut)
+            else if (ev.keyCode == KeyCode.X && bAllowCut)
             {
                 bAllowCut = false;
                 CopyNodes.CutNodes(CurDrawable.SelectedNodes, CurDrawable.SelectedCommentary);
             }
 
-            if (curEvent.isKey && curEvent.keyCode == KeyCode.V && bAllowPaste)
+            else if (ev.keyCode == KeyCode.V && bAllowPaste)
             {
                 bAllowPaste = false;
                 CopyNodes.PasteNodes();
             }
-        }
-
 
-        if (curEvent.isKey && curEvent.keyCode == Options.DeleteKey && curEvent.type == EventType.KeyDown && EditGraphRect.Contains(curEvent.mousePosition))
-        {
-            DeleteEditGraphSelection();
+            else if (ev.keyCode == KeyCode.D && bAllowPaste && bAllowCopy)
+            {
+                bAllowCopy = false;
+                bAllowPaste = false;
+                CopyNodes.CopyNodes(CurDrawable.SelectedNodes, CurDrawable.SelectedCommentary);
+                CopyNodes.PasteNodes();
+            }
         }
 
-
-        if (Global_MouseInEditGraph && _RMB_Down)
+        if (ev.type == EventType.KeyDown && !EditorGUIUtility.editingTextField)
         {
-            if (curEvent.button == 1)
+            if (ev.keyCode == KeyCode.Space)
             {
-                b_DragEditGraph = true;
+                NewNode_Window.Show(GlobalMousePos, false, false, false);
             }
-        }
 
+            if (Options.IsDeleteKey(ev.keyCode) && EditGraphRect.Contains(ev.mousePosition))
+            {
+                DeleteEditGraphSelection();
+            }
+
+            if (ev.alt && ev.shift)
+            {
+                if (ev.keyCode == KeyCode.S)
+                {
+                    SaveScript(true);
+                }
+
+                if (ev.keyCode == KeyCode.C)
+                {
+                    if (!EditorApplication.isCompiling)
+                        StartCompileScript = true;
+                }
+                
+                if (ev.keyCode == KeyCode.Z)
+                {
+                    UndoSystem.DoUndo();
+                }
+
+                if (ev.keyCode == KeyCode.Y)
+                {
+                    UndoSystem.DoRedo();
+                }
+
+                if (ev.keyCode == KeyCode.O)
+                {
+                    OpenWindow.Show();
+                }
 
+                if (ev.keyCode == KeyCode.N)
+                {
+                    NewScriptWindow.Show();
+                }
 
+                if (ev.keyCode == KeyCode.F)
+                {
+                    FitPlacer.PlaceFit(CurDrawable, false, true);
+                }
 
+                if (ev.keyCode == KeyCode.X)
+                {
+                    // Exclude node from sequence and delete
+                    foreach (var node in CurDrawable.SelectedNodes)
+                    {                       
+                        var sourceLink = Linking.SourceConnectorLinkExite(node, 0);
+                        var endLink = Linking.EndConnectorLinkExite(node, 0);
+
+                        if (sourceLink != null && endLink != null)
+                        {
+                            endLink.LNodeID = sourceLink.LNodeID;
+
+                            sourceLink.NodeID = -10;
+                            sourceLink.LNodeID = -10;
+                        }
+                    }
+                    DeleteEditGraphSelection();
+                }
+            }
+        }
 
+        if (Global_MouseInEditGraph && ev.type == EventType.MouseDown)
+        {
+            if (ev.button == 1 || ev.button == 2)
+            {
+                b_DragEditGraph = true;
+            }
+        }
 
         if (_LMB_Down)
         {
@@ -96,7 +160,7 @@
             {
                 LMB_Down_Deleg = delegate
                 {
-                    if (b_TestLMBDeleg) if(Options.b_ShowDebug)Debug.Log("TestDeleg");
+                    if (b_TestLMBDeleg) if (Options.b_ShowDebug) Debug.Log("TestDeleg");
                     b_SelectNodes = true;
                     SelectNodesStartPos = GlobalMousePos;
 
@@ -107,7 +171,6 @@
             }
         }
 
-
         if (_RMB_Up)
         {
             if (Global_MouseInEditGraph)
@@ -120,7 +183,6 @@
 
                     RMB_Up_Deleg = delegate
                     {
-
                     };
                 }
                 else if (_TryOpen_RMB_Menu)
@@ -132,31 +194,30 @@
                 }
             }
         }
-        
 
-        if (curEvent.type == EventType.ScrollWheel && Global_MouseInEditGraph && !OptionsPanel.b_Active)
+        if ((ev.type == EventType.ScrollWheel || ev.type == EventType.KeyDown) && Global_MouseInEditGraph && !OptionsPanel.b_Active)
         {
-            Vector2 startScalePos = CurDrawable.GetEditGraphRealMousePos_NoOffset;
-
-            float offset = curEvent.delta.y * CurDrawable.Zoom / 50;
-            CurDrawable.Zoom = Mathf.Clamp(CurDrawable.Zoom + offset, 1, 10);
-            startScalePos -= CurDrawable.GetEditGraphRealMousePos_NoOffset;
-
-            CurDrawable.EditGraphDragOffset -= startScalePos;
-            //if(Options.b_ShowDebug)Debug.Log(CurDrawable.EditGraphDragOffset);
-            //if(Options.b_ShowDebug)Debug.Log(CurDrawable.Zoom);
+            float offset = 0;
+            if (ev.type == EventType.ScrollWheel)
+                offset = ev.delta.y * CurDrawable.Zoom / 50;
+            else if (ev.keyCode == KeyCode.PageDown)
+                offset = -0.2f * CurDrawable.Zoom;
+            else if (ev.keyCode == KeyCode.PageUp)
+                offset = 0.2f * CurDrawable.Zoom;
+
+            if (offset != 0)
+            {
+                Vector2 startScalePos = CurDrawable.GetEditGraphRealMousePos_NoOffset;
+                CurDrawable.Zoom = Mathf.Clamp(CurDrawable.Zoom + offset, 1, 10);
+                startScalePos -= CurDrawable.GetEditGraphRealMousePos_NoOffset;
+                CurDrawable.EditGraphDragOffset -= startScalePos;
+            }
         }
 
-
         RealEditGraphRect = CurDrawable.GetEGRect(EditGraphRect);
 
-
-       
         Rect tempR = EditGraphRect;
 
-
-
-
         m_Zoom.BeginScale(ref tempR, EditGraphRect.size / 2, CurDrawable.Zoom, true);
 
         Draw_BGGrid();
@@ -168,32 +229,35 @@
             if (!Options.b_HideElementsOnZoom || CurDrawable.Zoom < 3)
                 DrawLinksConnections();
 
-            if(StartCompileScript)
+            if (StartCompileScript)
                 CompileSaveScript();
 
-            foreach (Commentary node in CurDrawable.Commentary.ToList())
+            foreach (Commentary node in CurDrawable.Commentary)
             {
                 node.DrawCommentary(CurDrawable.EditGraphDragOffset);
             }
             Commentary.b_StartSelectCommentary = false;
-            
-            foreach (Node node in CurDrawable.Nodes.ToList())
+
+            foreach (Node node in CurDrawable.Nodes)
             {
                 node.DrawNode(CurDrawable.EditGraphDragOffset);
             }
-
+            /*
             if (_LMB_Down)
-            { 
+            {
                 if (CurDrawable.SelectedNodes.Count > 0)
-                    CurDrawable.Nodes = CurDrawable.Nodes.OrderBy(x => CurDrawable.SelectedNodes.Contains(x.NodeID)).ToList();
+                    CurDrawable.Nodes = CurDrawable.Nodes
+                        .OrderBy(x => CurDrawable.SelectedNodes.Contains(x.NodeID)).ToList();
 
                 if (CurDrawable.SelectedCommentary.Count > 0)
-                    CurDrawable.Commentary = CurDrawable.Commentary.OrderBy(x => CurDrawable.SelectedCommentary.Contains(x.CommentID)).ToList();
+                    CurDrawable.Commentary = CurDrawable.Commentary
+                        .OrderBy(x => CurDrawable.SelectedCommentary.Contains(x.CommentID)).ToList();
             }
+            */
         }
 
-        foreach(ToolTipeData tipe in DebugValuesDrawList)
-        {       
+        foreach (ToolTipeData tipe in DebugValuesDrawList)
+        {
             tipe.Draw();
         }
         DebugValuesDrawList = new List<ToolTipeData>();
@@ -202,26 +266,24 @@
 
         SelectNodes();
 
-
-
-        if (CurDrawable.Zoom > 2)//!Options.b_HideElementsOnZoom && 
+        if (CurDrawable.Zoom > 2)//!Options.b_HideElementsOnZoom &&
         {
             GUI.color = Color.black;
-            foreach (Commentary comm in CurDrawable.Commentary.ToList())
+            foreach (Commentary comm in CurDrawable.Commentary)
             {
-                Rect ResizeRect = CreateRect(comm.CommentaryRect.x + comm.CommentaryRect.width - 15, comm.CommentaryRect.y + comm.CommentaryRect.height - 30, 30, 30);
+                Rect ResizeRect = new Rect(comm.CommentaryRect.x + comm.CommentaryRect.width - 15, comm.CommentaryRect.y + comm.CommentaryRect.height - 30, 30, 30);
 
                 EditorGUIUtility.AddCursorRect(CurDrawable.GetRealRect_FromEGRect(ResizeRect), MouseCursor.ResizeVertical);
 
                 float labelOffset = CalcStringPixelsX(comm.CommentaryName, Res.NodePinLabel) + 10;
 
-                Rect bubbleRect = CreateRect(comm.CommentaryRect.x, comm.CommentaryRect.y - (32 * CurDrawable.Zoom), labelOffset, 32);
+                Rect bubbleRect = new Rect(comm.CommentaryRect.x, comm.CommentaryRect.y - (32 * CurDrawable.Zoom), labelOffset, 32);
 
                 bubbleRect.position = CurDrawable.GetRealPos_FromEGPos_NoOffset(bubbleRect.position);
 
                 if (EditGraphRect.Overlaps(bubbleRect, true))
-                { 
-                    Graphics.DrawTexture(bubbleRect, Res.Comment_Bubble, 23, 20, 8, 8);
+                {
+                    DrawTexture(bubbleRect, Res.Comment_Bubble, 23, 20, 8, 8);
 
                     bubbleRect.x += 5;
                     bubbleRect.y += 5;
@@ -232,46 +294,32 @@
             GUI.color = Color.white;
         }
 
-
-
-
-
-
-
         b_HighliteLinksOnce = false;
 
-
-
         if (!Global_MouseInEditGraph)
         {
             b_DragEditGraph = false;
             b_SelectNodes = false;
         }
 
-
-        if (curEvent.type == EventType.MouseUp)
+        if (ev.type == EventType.MouseUp)
         {
             b_DragEditGraph = false;
             b_SelectNodes = false;
         }
 
-        if (b_DragEditGraph && curEvent.type == EventType.MouseDrag)
+        if (b_DragEditGraph && ev.type == EventType.MouseDrag)
         {
-            CurDrawable.EditGraphDragOffset += curEvent.delta * CurDrawable.Zoom;
+            CurDrawable.EditGraphDragOffset += ev.delta * CurDrawable.Zoom;
         }
     }
-     
-
 
     private void SelectNodes()
     {
-        
-
         if (b_SelectNodes)
         {
             Vector2 offsetSelection = GlobalMousePos - SelectNodesStartPos;// Global_MousePos;// CurDrawable.GetRealMousePos - SelectNodesStartPos;
 
-
             {
                 SelectNodesRect.x = SelectNodesStartPos.x;
                 SelectNodesRect.y = SelectNodesStartPos.y;
@@ -292,7 +340,7 @@
 
                 //if(SelectNodesRect.width > 6 && SelectNodesRect.height > 6)
                 if (offsetSelection.magnitude > 6)
-                    Graphics.DrawTexture(SelectNodesRect, Res.SelectionRect, 3, 3, 3, 3);
+                    DrawTexture(SelectNodesRect, Res.SelectionRect, 3, 3, 3, 3);
             }
         }
     }
@@ -302,38 +350,26 @@
         float width = Res.BGTexture.width;
         float height = Res.BGTexture.height;
 
-
         int scaleTex = (int)((Res.BGTexture.width * CurDrawable.Zoom) / width);
 
         width *= scaleTex;
         height *= scaleTex;
 
-         
-
-
-
         int startPosX = Mathf.RoundToInt(-CurDrawable.EditGraphDragOffset.x / width) - 1;
         int startPosY = Mathf.RoundToInt(-CurDrawable.EditGraphDragOffset.y / height) - 1;
 
         int countX = Mathf.CeilToInt((EditGraphRect.width * CurDrawable.Zoom) / width) + 2;
         int countY = Mathf.CeilToInt((EditGraphRect.height * CurDrawable.Zoom) / width) + 2;
 
-
         for (float x = startPosX; x < startPosX + countX; x++)
         {
             for (float y = startPosY; y < startPosY + countY; y++)
             {
-                GUI.DrawTexture(CreateRect(x * width + CurDrawable.EditGraphDragOffset.x, y * height + CurDrawable.EditGraphDragOffset.y, width, height), Res.BGTexture);
+                GUI.DrawTexture(new Rect(x * width + CurDrawable.EditGraphDragOffset.x, y * height + CurDrawable.EditGraphDragOffset.y, width, height), Res.BGTexture);
             }
         }
     }
 
-
-
-    
-
-    
-
     private bool b_DragEditGraph = false;
 
     private void DrawLinksConnections()
@@ -341,13 +377,11 @@
         List<LinkInfo> drawPinLinks = new List<LinkInfo>();
         drawPinLinks.AddRange(CurDrawable.NodePinsLinks);
 
-        foreach (LinkInfo link in drawPinLinks.ToList())
+        foreach (LinkInfo link in drawPinLinks)
         {
             if (Linking.DragPinLinks.Contains(link))
                 continue;
 
-
-
             Node SourceNode = CurDrawable.Nodes.Find(x => x.NodeID == link.LNodeID);
             Node EndNode = CurDrawable.Nodes.Find(x => x.NodeID == link.NodeID);
 
@@ -360,7 +394,6 @@
             Node_Pin SourcePin = SourceNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID);
             Node_Pin EndPin = EndNode.Config.InPins.Find(x => x.PinID == link.NodeConPinID);
 
-
             if (SourcePin == null || EndPin == null)
             {
                 CurDrawable.NodePinsLinks.Remove(link);
@@ -373,7 +406,6 @@
             SourcePin.Connected++;
             EndPin.Connected++;
 
-
             Vector2 start = new Vector2
             (
                 SourceNode.NodeRect.x + SourcePin.PosX + 7,
@@ -386,19 +418,18 @@
                 EndNode.NodeRect.y + EndPin.PosY + 9
             );
 
-
             if (SourcePin.type != null && EndPin.type != null)
             {
                 if (SourcePin.type.PType == typeof(float) && EndPin.type.PType == typeof(int))
                 {
                     float menuWidth = 50;
 
-                    string[] variants = new[] {"Round", "Floor", "Ceil" };
+                    string[] variants = new[] { "Round", "Floor", "Ceil" };
 
                     if (EndPin.TypesConvertVariant >= variants.Length)
                         EndPin.TypesConvertVariant = 0;
 
-                    var scitchRect = CreateRect(end - new Vector2(menuWidth + 18, 7), new Vector2(menuWidth, 16));
+                    var scitchRect = new Rect(end - new Vector2(menuWidth + 18, 7), new Vector2(menuWidth, 16));
                     GUI.Box(scitchRect, variants[EndPin.TypesConvertVariant], Res.ButtonSimple);
 
                     if (scitchRect.Contains(Event.current.mousePosition))
@@ -438,14 +469,12 @@
                     valStr = EndPin.DebugValue + "";
                 }
 
-
                 DebugValuesDrawList.Add(new ToolTipeData(valStr, end.x - 25, end.y - 8, 1, link.HighLite, color, EndPin));
 
                 //DebugValuesDrawList.Add(new ToolTipeData(valStr, start.x + 20, start.y - 8, 0, link.HighLite, color, SourcePin));
                 //if(Vector2.Distance(start, end) > 300)
                 //    DebugValuesDrawList.Add(new ToolTipeData(valStr, end.x - 25, end.y - 8, 1, link.HighLite, color, SourcePin));
 
-
                 if (Vector3.Distance(start, end) > 600)
                 {
                     Vector2 centerLinkDraw = (start + end) / 2;
@@ -453,7 +482,6 @@
                 }
             }
 
-
             if (!CanBeLinked && !NewNode_Window.b_Filtering)
             {
                 //DrawNodeCurve(start, end, Color.white, 4, false, link);
@@ -476,12 +504,11 @@
         List<LinkInfo> drawConnLinks = new List<LinkInfo>();
         drawConnLinks.AddRange(CurDrawable.NodeConnectorsLinks);
 
-        foreach (LinkInfo link in drawConnLinks.ToList())
+        foreach (LinkInfo link in drawConnLinks)
         {
             if (Linking.DragConnectorLinks.Contains(link))
                 continue;
 
-
             Node SourceNode = CurDrawable.Nodes.Find(x => x.NodeID == link.NodeID);
             Node EndNode = CurDrawable.Nodes.Find(x => x.NodeID == link.LNodeID);
 
@@ -500,11 +527,9 @@
                 return;
             }
 
-
             SourceConnector.Connected = true;
             EndConnector.Connected = true;
 
-
             Vector2 start = new Vector2
             (
                 SourceNode.NodeRect.x + SourceConnector.PosX + 12,
@@ -524,11 +549,9 @@
             DrawNodeCurve(start, end, color, 4, false, link);
         }
 
-
         //DragLinks
 
-
-        if(Linking.b_PinDragLinking)
+        if (Linking.b_PinDragLinking)
         {
             foreach (var link in Linking.DragPinLinks)
             {
@@ -547,8 +570,7 @@
 
                 Node_Pin realPin = null;
 
-
-                if(Linking.NodePin.PinType == PinTypeE.PinOut)
+                if (Linking.NodePin.PinType == PinTypeE.PinOut)
                 {
                     realPin = SourceNode.Config.InPins.Find(x => x.PinID == link.NodeConPinID);
                 }
@@ -556,7 +578,6 @@
                 {
                     realPin = SourceNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID);
                 }
-     
 
                 if (realPin == null)
                 {
@@ -564,7 +585,6 @@
                     continue;
                 }
 
-
                 if (SourceNode != null)
                 {
                     bool invert = false;
@@ -580,7 +600,7 @@
                         SourceNode.NodeRect.x + realPin.PosX + 7,
                         SourceNode.NodeRect.y + realPin.PosY + 7
                     );
-                    //- new Vector2(EditGraphRect.x, EditGraphRect.y)  
+                    //- new Vector2(EditGraphRect.x, EditGraphRect.y)
                     DrawNodeCurve(CurDrawable.GetLinkingNewNodeMousePos + CurDrawable.EditGraphDragOffset, end, GetColorByType(realPin.type.PType), 2, invert, null);
                 }
             }
@@ -588,10 +608,8 @@
 
         if (Linking.b_PinLinking)
         {
-
             Node SourceNode = CurDrawable.Nodes.Find(x => x.NodeID == Linking.NodeID);
 
-
             if (SourceNode != null)
             {
                 bool invert = false;
@@ -607,13 +625,11 @@
                     SourceNode.NodeRect.x + Linking.NodePin.PosX + 7,
                     SourceNode.NodeRect.y + Linking.NodePin.PosY + 7
                 );
-                //- new Vector2(EditGraphRect.x, EditGraphRect.y)  
+                //- new Vector2(EditGraphRect.x, EditGraphRect.y)
                 DrawNodeCurve(CurDrawable.GetLinkingNewNodeMousePos + CurDrawable.EditGraphDragOffset, end, GetColorByType(Linking.NodePin.type.PType), 2, invert, null);
             }
         }
 
-
-
         if (Linking.b_ConnectorDragLinking)
         {
             foreach (var link in Linking.DragConnectorLinks)
@@ -637,13 +653,11 @@
                 else
                     realConnector = SourceNode.ConnectorsOut.Find(x => x.ConnectorID == link.NodeConPinID);
 
-
                 if (realConnector == null)
                 {
                     Debug.Log("Can't find pin " + link.NodeConPinID + " in node " + link.NodeID + " for drawing the redirect linking");
                     continue;
                 }
-      
 
                 if (SourceNode != null)
                 {
@@ -663,18 +677,14 @@
                     );
                     // - new Vector2(EditGraphRect.x, EditGraphRect.y)
                     DrawNodeCurve(CurDrawable.GetLinkingNewNodeMousePos + CurDrawable.EditGraphDragOffset, end, new Color(0.9f, 0.9f, 0.9f, 0.9f), 3, invert, null);
-
                 }
             }
         }
 
-
         if (Linking.b_ConnLinking)
         {
-
             Node SourceNode = CurDrawable.Nodes.Find(x => x.NodeID == Linking.NodeID);
 
-
             if (SourceNode != null)
             {
                 bool invert = false;
@@ -693,7 +703,6 @@
                 );
                 // - new Vector2(EditGraphRect.x, EditGraphRect.y)
                 DrawNodeCurve(CurDrawable.GetLinkingNewNodeMousePos + CurDrawable.EditGraphDragOffset, end, new Color(0.9f, 0.9f, 0.9f, 0.9f), 3, invert, null);
-
             }
         }
     }
@@ -732,9 +741,6 @@
             else if (offsetXlabel == 2)
                 posx -= labelPixelsSize / 2;
 
-           
-      
-
             float offsetOpen = 0;
 
             bool drawOpenClassButton = OwnerPin.DebugValue != null && OwnerPin.DebugValue.GetType().IsClass;
@@ -745,44 +751,40 @@
                 posx -= offsetOpen;
             }
 
-      
-
-            Rect dataDrawRect = CreateRect(posx - 2, PosY - 2, labelPixelsSize + 4 + offsetOpen, 22);
+            Rect dataDrawRect = new Rect(posx - 2, PosY - 2, labelPixelsSize + 4 + offsetOpen, 22);
 
             if (!RealEditGraphRect.Overlaps(dataDrawRect))
                 return;
 
             GUI.color = new Color(drawColor.r, drawColor.g, drawColor.b, Mathf.Clamp(HighLite, 0.1f, 0.7f));
 
-            Graphics.DrawTexture(dataDrawRect, Res.Debug_Box, CreateRect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
+            DrawTexture(dataDrawRect, Res.Debug_Box, new Rect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
 
-            dataDrawRect = CreateRect(posx, PosY, labelPixelsSize, 18);
+            dataDrawRect = new Rect(posx, PosY, labelPixelsSize, 18);
             GUI.color = new Color(1, 1, 1, Mathf.Clamp(HighLite, 0.1f, 0.2f));
             //GUI.DrawTexture(dataDrawRect, Res.Debug_Box);
-            Graphics.DrawTexture(dataDrawRect, Res.Debug_Box, CreateRect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
+            DrawTexture(dataDrawRect, Res.Debug_Box, new Rect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
 
-    
             if (drawOpenClassButton)
             {
-                Rect ButtonClOpenRect = CreateRect(dataDrawRect.x + labelPixelsSize + 4 + offsetOpen - 18, dataDrawRect.y, 15, 16);
-            
-                //Graphics.DrawTexture(ButtonClOpenRect, Res.Debug_Box, CreateRect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
+                Rect ButtonClOpenRect = new Rect(dataDrawRect.x + labelPixelsSize + 4 + offsetOpen - 18, dataDrawRect.y, 15, 16);
 
-                GUI.color = Color.white;
+                //DrawTexture(ButtonClOpenRect, Res.Debug_Box, new Rect(0, 0, 1, 1), 3, 3, 3, 3, GUI.color);
 
+                GUI.color = Color.white;
 
                 if (_LMB_Down && ButtonClOpenRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate { };
                 }
 
-                if(GUI.Button(ButtonClOpenRect, Res.DropDownButton))
+                if (GUI.Button(ButtonClOpenRect, Res.DropDownButton))
                 {
                     DebugClassValue.Show(GlobalMousePos, OwnerPin);
                 }
 
-                //ButtonClOpenRect = CreateRect(dataDrawRect.x + dataDrawRect.width - 10, dataDrawRect.y + 5, 7, 7);
-                //Graphics.DrawTexture(ButtonClOpenRect, Res.DropDownButton);
+                //ButtonClOpenRect = new Rect(dataDrawRect.x + dataDrawRect.width - 10, dataDrawRect.y + 5, 7, 7);
+                //DrawTexture(ButtonClOpenRect, Res.DropDownButton);
             }
 
             dataDrawRect.x += 7;
@@ -793,4 +795,4 @@
             GUI.color = Color.white;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/f_Window_Toolbar.cs Editor/f_Window_Toolbar.cs
--- .Editor/f_Window_Toolbar.cs	2018-06-30 08:59:18.461604000 +0700
+++ Editor/f_Window_Toolbar.cs	2018-06-30 09:02:03.815509900 +0700
@@ -1,33 +1,27 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static float ClassesDrawPosY = 0;
 
     private float NestedOffsetX = 0;
 
-
     private bool b_DisableClassDrawing = false;
 
     private Vector2 v_ClassesScroll = Vector2.zero;
+
     private void DrawClasses()
     {
         b_DisableClassDrawing = false;
         NestedOffsetX = 0;
 
-        v_ClassesScroll = GUI.BeginScrollView(CreateRect(0, FoldDrawPosY, DetailsRect.width - 20, ClassesDrawPosY + 18), v_ClassesScroll, CreateRect(0, 0, ClassesDraw_MaxWidth + 5, ClassesDrawPosY));
+        v_ClassesScroll = GUI.BeginScrollView(new Rect(0, FoldDrawPosY, DetailsRect.width - 20, ClassesDrawPosY + 18), v_ClassesScroll, new Rect(0, 0, ClassesDraw_MaxWidth + 5, ClassesDrawPosY));
         ClassesDrawPosY = 0;
         ClassesDraw_MaxWidth = 0;
 
-
         foreach (ScriptClass clas in CurScript.Classes)
         {
             //if (clas.StructType)
@@ -35,8 +29,6 @@
 
             DrawClassRecurs(clas);
 
-
-
             if (b_DisableClassDrawing)
                 break;
 
@@ -48,7 +40,9 @@
 
         GUI.EndScrollView();
     }
+
     private float ClassesDraw_MaxWidth = 0;
+
     private void DrawClassRecurs(ScriptClass clas)
     {
         ClassesDraw_MaxWidth = Math.Max(clas.DrawClass(ClassesDrawPosY, NestedOffsetX), ClassesDraw_MaxWidth);
@@ -57,50 +51,35 @@
         float StartPosY = ClassesDrawPosY;
         float StartPosX = NestedOffsetX;
 
-
         ClassesDrawPosY += 18;
 
-
-
-
-
         if (b_DisableClassDrawing)
             return;
 
-
         NestedOffsetX += 25;
 
         Rect vertNestLineRect;
 
-
-
         foreach (ScriptClass subClass in clas.NestedClasses)
         {
-            vertNestLineRect = CreateRect(StartPosX + 25, ClassesDrawPosY + 6, 24, 3);
+            vertNestLineRect = new Rect(StartPosX + 25, ClassesDrawPosY + 6, 24, 3);
             GUI.DrawTexture(vertNestLineRect, Res.ClassNestedLine_Hor);
 
             DrawClassRecurs(subClass);
 
-
-
             if (b_DisableClassDrawing)
                 break;
         }
 
-
-
-
         DrawNested(clas);
 
         if (clas.NestedClasses.Count > 0)
         {
-            vertNestLineRect = CreateRect(NestedOffsetX, StartPosY + 16, 3, ClassesDrawPosY - StartPosY - 25);
+            vertNestLineRect = new Rect(NestedOffsetX, StartPosY + 16, 3, ClassesDrawPosY - StartPosY - 25);
             GUI.DrawTexture(vertNestLineRect, Res.ClassNestedLine_Vert);
         }
 
         NestedOffsetX -= 25;
-
-
     }
 
     /*
@@ -109,10 +88,10 @@
         if (!DragScriptObj || CurScript.SelectedScriptObjects.Count != 1 || !(CurScript.SelectedScriptObjects[0] is ScriptClass) || CurScript.isSelected(thisClass) || (CurScript.SelectedScriptObjects[0] as ScriptClass) == thisClass)
             return;
 
-        Rect InheritRect = CreateRect(NestedOffsetX + ToolbarRect.width / 2, ClassesDrawPosY, ToolbarRect.width / 2, 18);
+        Rect InheritRect = new Rect(NestedOffsetX + ToolbarRect.width / 2, ClassesDrawPosY, ToolbarRect.width / 2, 18);
         GUI.DrawTexture(InheritRect, Res.ClassInheritRect);
 
-        if (InheritRect.Contains(Event.current.mousePosition))
+        if (InheritRect.Contains(ev.mousePosition))
         {
             DragObjName_Prefix = thisClass.Config.Name + " inherit ";
 
@@ -132,7 +111,6 @@
         CurScript.NamespaceName = newName;
     }
 
-
     private bool GetRootClass(ScriptClass dropToClass, ScriptClass dragClass)
     {
         if (dropToClass == dragClass)
@@ -140,8 +118,6 @@
 
         ScriptClass testClass = dropToClass;
 
-
-
         while (testClass.NestedOwner != -1)
         {
             testClass = CurScript.FindClassFromID(testClass.NestedOwner);
@@ -155,26 +131,21 @@
 
     private void DrawNested(ScriptClass dropToClass)
     {
-        if (!DragScriptObj || CurScript.SelectedScriptObjects.Count != 1 || !(CurScript.SelectedScriptObjects[0] is ScriptClass) || CurScript.isSelected(dropToClass) || (Event.current.button != 1))
+        if (!DragScriptObj || CurScript.SelectedScriptObjects.Count != 1 || !(CurScript.SelectedScriptObjects[0] is ScriptClass) || CurScript.isSelected(dropToClass) || (ev.button != 1))
             return;
 
         ScriptClass dragingClass = CurScript.SelectedScriptObjects[0] as ScriptClass;
 
-
         if (dropToClass.Obj_ID == dragingClass.NestedOwner)
             return;
 
-
         if (dragingClass.NestedClasses.Count != 0 && GetRootClass(dropToClass, dragingClass))
             return;
 
-
-
-
-        Rect NestedRect = CreateRect(NestedOffsetX, ClassesDrawPosY, ToolbarRect.width / 2, 18);
+        Rect NestedRect = new Rect(NestedOffsetX, ClassesDrawPosY, ToolbarRect.width / 2, 18);
         GUI.DrawTexture(NestedRect, Res.ClassMoveNestRect);
 
-        if (NestedRect.Contains(Event.current.mousePosition))
+        if (NestedRect.Contains(ev.mousePosition))
         {
             DragObjName_Postfix = " nested to: " + dropToClass.Config.Name;
 
@@ -182,7 +153,6 @@
             {
                 DragScriptObj = false;
 
-
                 if (dragingClass.NestedOwner != -1)
                 {
                     ScriptClass thatClassOwner = CurScript.FindClassFromID(dragingClass.NestedOwner);
@@ -193,8 +163,6 @@
                     CurScript.Classes.Remove(dragingClass);
                 }
 
-
-
                 dropToClass.NestedClasses.Add(dragingClass);
 
                 dragingClass.NestedOwner = dropToClass.Obj_ID;
@@ -207,10 +175,9 @@
         ClassesDrawPosY += 17;
     }
 
-
     private void DrawScriptNested(ScriptClass afterScriptClass)
     {
-        if (!DragScriptObj || CurScript.SelectedScriptObjects.Count != 1 || !(CurScript.SelectedScriptObjects[0] is ScriptClass) || (Event.current.button != 1))
+        if (!DragScriptObj || CurScript.SelectedScriptObjects.Count != 1 || !(CurScript.SelectedScriptObjects[0] is ScriptClass) || (ev.button != 1))
             return;
 
         ScriptClass thatClass = CurScript.SelectedScriptObjects[0] as ScriptClass;
@@ -218,10 +185,10 @@
         if (thatClass.NestedOwner == -1)
             return;
 
-        Rect NestedRect = CreateRect(NestedOffsetX, ClassesDrawPosY, ToolbarRect.width / 2, 18);
-        Graphics.DrawTexture(NestedRect, Res.ClassMoveNestRect);
+        Rect NestedRect = new Rect(NestedOffsetX, ClassesDrawPosY, ToolbarRect.width / 2, 18);
+        DrawTexture(NestedRect, Res.ClassMoveNestRect);
 
-        if (NestedRect.Contains(Event.current.mousePosition))
+        if (NestedRect.Contains(ev.mousePosition))
         {
             DragObjName_Postfix = " nested to: Script";
 
@@ -239,17 +206,14 @@
                     CurScript.Classes.Remove(thatClass);
                 }
 
-
                 int index = CurScript.Classes.IndexOf(afterScriptClass);
 
                 CurScript.Classes.Insert(index + 1, thatClass);
 
-
                 thatClass.NestedOwner = -1;
 
                 b_DisableClassDrawing = true;
 
-
                 thatClass.CheckModifiers();
             }
         }
@@ -258,7 +222,6 @@
 
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-
     private Vector2 v_ObjsScroll = Vector2.zero;
     private float ScrollObjsLength = 0;
 
@@ -266,8 +229,10 @@
 
     private M_Foldout Foldout_Classes = new M_Foldout();
     private M_Foldout Foldout_Constructors = new M_Foldout();
-    private M_Foldout Foldout_Structs = new M_Foldout();
+
+    // private M_Foldout Foldout_Structs = new M_Foldout();
     private M_Foldout Foldout_Variables = new M_Foldout();
+
     private M_Foldout Foldout_InherVariables = new M_Foldout(false);
     private M_Foldout Foldout_Properties = new M_Foldout();
     private M_Foldout Foldout_InherProperties = new M_Foldout(false);
@@ -299,7 +264,7 @@
         {
             EditorGUIUtility.AddCursorRect(docRect, MouseCursor.Link);
 
-            if (_LMB_Down && docRect.Contains(Event.current.mousePosition))
+            if (_LMB_Down && docRect.Contains(ev.mousePosition))
             {
                 LMB_Down_Deleg = delegate
                 {
@@ -311,13 +276,12 @@
 
     void WindowToolbar()
     {
-        Graphics.DrawTexture(CreateRect(ToolbarRect.x, ToolbarRect.y, ToolbarRect.width, ToolbarRect.height), Res.Window, 180, 10, 50, 10);
+        DrawTexture(new Rect(ToolbarRect.x, ToolbarRect.y, ToolbarRect.width, ToolbarRect.height), Res.Window, 180, 10, 50, 10);
 
-        Rect DrawlabelRect = CreateRect(30, ToolbarRect.y + 5, 100, 20);
+        Rect DrawlabelRect = new Rect(30, ToolbarRect.y + 5, 100, 20);
         GUI.Label(DrawlabelRect, "Script Objects", Res.NodePinLabel);
 
-
-        GUI.Label(CreateRect(5, 3, 20, 17), "_", Res.ButtonSimple);
+        GUI.Label(new Rect(5, 3, 20, 17), "_", Res.ButtonSimple);
 
         FoldDrawPosY = ToolbarRect.y + 24;
 
@@ -334,24 +298,22 @@
 
         TBWidth = ScrollObjsLength + 26 > ToolbarRect.height - FoldDrawPosY ? ToolbarRect.width - 15 : ToolbarRect.width;
 
-        v_ObjsScroll = GUI.BeginScrollView(CreateRect(0, FoldDrawPosY, ToolbarRect.width, ToolbarRect.height - FoldDrawPosY - HideOptionsListHeight), v_ObjsScroll, CreateRect(0, 0, 100, ScrollObjsLength));
+        v_ObjsScroll = GUI.BeginScrollView(new Rect(0, FoldDrawPosY, ToolbarRect.width, ToolbarRect.height - FoldDrawPosY - HideOptionsListHeight), v_ObjsScroll, new Rect(0, 0, 100, ScrollObjsLength));
         FoldDrawPosY = 0;
 
-
-        if(NS_Renamer == null)
+        if (NS_Renamer == null)
             NS_Renamer = new RenameField(NS_EndRename);
 
-        var nsRenamerRect = CreateRect(5, FoldDrawPosY, TBWidth - 10, 24);
+        var nsRenamerRect = new Rect(5, FoldDrawPosY, TBWidth - 10, 24);
 
         GUI.Box(nsRenamerRect, "", Res.Box);
         FoldDrawPosY += 4;
-        nsRenamerRect = CreateRect(10, FoldDrawPosY, TBWidth / 2 - 10, 16);
+        nsRenamerRect = new Rect(10, FoldDrawPosY, TBWidth / 2 - 10, 16);
 
         GUI.Label(nsRenamerRect, "Namespace:", Res.Label);
-        nsRenamerRect = CreateRect(100, FoldDrawPosY, TBWidth - 110, 16);
+        nsRenamerRect = new Rect(100, FoldDrawPosY, TBWidth - 110, 16);
         NS_Renamer.Draw(nsRenamerRect, CurScript.NamespaceName, true, Res.NormalStyle, Res.TextField, true);
 
-
         FoldDrawPosY += 20;
         ////////////////////////////////////////////////////////////////////
         inPinsDraw = delegate
@@ -363,12 +325,11 @@
             //FoldDrawPosY += 18;
         };
 
-        iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+        iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
 
-        FoldDrawPosY += Foldout_Classes.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Script Classes & Structs", inPinsDraw, null, 
+        FoldDrawPosY += Foldout_Classes.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Script Classes & Structs", inPinsDraw, null,
             typeof(ScriptClass), TypeSelect_Type.Undefined, "Class", CurScript.Classes.Count > 0);
 
-
         DrawDocButton(iconR, Res.IconClass, "http://nottorus.net/articles.php?article_id=35");
         ////////////////////////////////////////////////////////////////////
 
@@ -406,9 +367,9 @@
                         FoldDrawPosY += 5;
                 };
 
-                iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
 
-                FoldDrawPosY += Foldout_Constructors.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Constructors", inPinsDraw, null, 
+                FoldDrawPosY += Foldout_Constructors.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Constructors", inPinsDraw, null,
                     typeof(ScriptClassConstructor), TypeSelect_Type.Undefined, "Constructor", CurClass.ClassConstructors.Count > 0);
 
                 DrawDocButton(iconR, Res.IconClass, "http://nottorus.net/articles.php?article_id=36");
@@ -417,7 +378,6 @@
                 FoldDrawPosY += 5;
             }
 
-
             ////////////////////////////////////////////////////////////////////////////////////////////
 
             List<ScriptClassVariable> DrawVarsList = CurClass.ClassVariables.FindAll(x => !x.IsInherited);
@@ -435,22 +395,20 @@
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_Variables.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Variables", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_Variables.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Variables", inPinsDraw, null,
                 typeof(ScriptClassVariable), TypeSelect_Type.Undefined, "Variable", DrawVarsList.Count > 0);
 
             DrawDocButton(iconR, Res.IconField, "http://nottorus.net/articles.php?article_id=28");
 
             FoldDrawPosY += 5;
 
-
             DrawVarsList = CurClass.ClassVariables.FindAll(x => x.IsInherited);
 
-
             hideScriptObjs_InhVars += DrawVarsList.Count;
             if (!Options.b_HideInheritedVariables)
             {
-                if(DrawVarsList.Count > 0)
+                if (DrawVarsList.Count > 0)
                 {
                     inPinsDraw = delegate
                     {
@@ -465,7 +423,7 @@
                             FoldDrawPosY += 5;
                     };
 
-                    iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                    iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
                     FoldDrawPosY += Foldout_InherVariables.Draw(0, FoldDrawPosY, TBWidth, "       Inherited " + ScriptStructSwitch + " Variables (" + DrawVarsList.Count + ")", inPinsDraw, DrawVarsList.Count > 0);
                     GUI.DrawTexture(iconR, Res.IconField);
 
@@ -474,7 +432,7 @@
             }
 
             ////////////////////////////////////////////////////////////////////////////////////////////
-         
+
             ////////////////////////////////////////////////////////////////////////////////////////////
 
             List<ScriptProperty> DrawPropertiesList = CurClass.ScriptProperties.FindAll(x => !x.IsInherited && !x.m_Indexer);
@@ -496,9 +454,8 @@
                         FoldDrawPosY += 5;
                 };
 
-
-                iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-                FoldDrawPosY += Foldout_Properties.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Properties", inPinsDraw, null, 
+                iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+                FoldDrawPosY += Foldout_Properties.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Properties", inPinsDraw, null,
                     typeof(ScriptProperty), TypeSelect_Type.Undefined, "Property", DrawPropertiesList.Count > 0);
 
                 DrawDocButton(iconR, Res.IconProperty, "http://nottorus.net/articles.php?article_id=31");
@@ -527,8 +484,7 @@
                             FoldDrawPosY += 5;
                     };
 
-
-                    iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                    iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
                     FoldDrawPosY += Foldout_InherProperties.Draw(0, FoldDrawPosY, TBWidth, "       Inherited Properties (" + DrawPropertiesList.Count + ")", inPinsDraw, DrawPropertiesList.Count > 0);
                     GUI.DrawTexture(iconR, Res.IconProperty);
 
@@ -536,9 +492,6 @@
                 }
             }
 
-            
-
-
             DrawPropertiesList = CurClass.ScriptProperties.FindAll(x => x.m_Indexer);
             hideScriptObjs_Indexers += DrawPropertiesList.Count;
 
@@ -558,24 +511,15 @@
                         FoldDrawPosY += 5;
                 };
 
-
-                iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-                FoldDrawPosY += Foldout_Indexers.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Indexers", inPinsDraw, null, 
+                iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+                FoldDrawPosY += Foldout_Indexers.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       " + ScriptStructSwitch + " Indexers", inPinsDraw, null,
                     typeof(ScriptIndexer), TypeSelect_Type.Undefined, "Indexer", DrawPropertiesList.Count > 0);
- 
+
                 DrawDocButton(iconR, Res.IconIndexer, "http://nottorus.net/articles.php?article_id=34");
 
                 FoldDrawPosY += 5;
             }
 
-
-
-
-
-
-
-
-
             ////////////////////////////////////////////////////////////////////////////////////////////
 
             List<ScriptFunction> DrawFunctions = CurClass.Functions.FindAll(x => !x.IsInherited || x.Nodes.Count > 2);
@@ -593,8 +537,8 @@
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_Functions.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "      " + ScriptStructSwitch + " Functions", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_Functions.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "      " + ScriptStructSwitch + " Functions", inPinsDraw, null,
                 typeof(ScriptFunction), TypeSelect_Type.Undefined, "Function", DrawFunctions.Count > 0);
 
             DrawDocButton(iconR, Res.IconMethod, "http://nottorus.net/articles.php?article_id=29");
@@ -617,7 +561,6 @@
                                 continue;
                             lastFuncName = funct.Config.Name;
 
-
                             if (funct.DrawFunc())
                                 break;
 
@@ -627,7 +570,7 @@
                             FoldDrawPosY += 5;
                     };
 
-                    iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                    iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
                     FoldDrawPosY += Foldout_InherFunctions.Draw(0, FoldDrawPosY, TBWidth, "       Inherited Functions (" + DrawFunctions.Count + ")", inPinsDraw, DrawFunctions.Count > 0);
                     GUI.DrawTexture(iconR, Res.IconMethod);
                 }
@@ -654,7 +597,7 @@
                         FoldDrawPosY += 5;
                 };
 
-                iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
                 FoldDrawPosY += Foldout_Events.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "      " + ScriptStructSwitch + " Events", inPinsDraw, null,
                     typeof(ScriptClassEvent), TypeSelect_Type.Undefined, "Event", DrawEvents.Count > 0);
 
@@ -682,7 +625,7 @@
                             FoldDrawPosY += 5;
                     };
 
-                    iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+                    iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
                     FoldDrawPosY += Foldout_InhEvents.Draw(0, FoldDrawPosY, TBWidth, "       Inherited Events (" + DrawEvents.Count + ")", inPinsDraw, DrawEvents.Count > 0);
                     GUI.DrawTexture(iconR, Res.IconEnum);
                 }
@@ -691,7 +634,6 @@
             FoldDrawPosY += 5;
         }
 
-
         ////////////////////////////////////////////////////////////////////////////////////////////
         if (CurrentDrawLocalVariables != null)
         {
@@ -702,24 +644,23 @@
                     if (var.DrawVar())
                         break;
                     FoldDrawPosY += 17;
-                } 
+                }
                 if (CurrentDrawLocalVariables.Count > 0)
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_LocalVariables.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Local Variables", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_LocalVariables.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Local Variables", inPinsDraw, null,
                 typeof(ScriptLocalVariable), TypeSelect_Type.Undefined, "Local Variable", CurrentDrawLocalVariables.Count > 0);
 
             DrawDocButton(iconR, Res.IconField, "http://nottorus.net/articles.php?article_id=30");
-
         }
         FoldDrawPosY += 5;
         ////////////////////////////////////////////////////////////////////////////////////////////
         hideScriptObjs_Enums += CurScript.ScriptEnums.Count;
         if (!Options.b_HideEnums)
         {
-            inPinsDraw = delegate 
+            inPinsDraw = delegate
             {
                 foreach (ScriptEnum enm in CurScript.ScriptEnums)
                 {
@@ -731,12 +672,11 @@
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_Enums.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Enums", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_Enums.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Enums", inPinsDraw, null,
                 typeof(ScriptEnum), TypeSelect_Type.Undefined, "Enum", CurScript.ScriptEnums.Count > 0);
 
             DrawDocButton(iconR, Res.IconEnum, "http://nottorus.net/articles.php?article_id=32");
-
         }
         FoldDrawPosY += 5;
         ////////////////////////////////////////////////////////////////////////////////////////////
@@ -755,8 +695,8 @@
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_Delegates.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Delegates", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_Delegates.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Delegates", inPinsDraw, null,
                 typeof(ScriptDelegate), TypeSelect_Type.Undefined, "Delegate", CurScript.ScriptDelegates.Count > 0);
 
             DrawDocButton(iconR, Res.IconDelegate, "http://nottorus.net/articles.php?article_id=33");
@@ -780,8 +720,8 @@
                     FoldDrawPosY += 5;
             };
 
-            iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
-            FoldDrawPosY += Foldout_Interfaces.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Interfaces", inPinsDraw, null, 
+            iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
+            FoldDrawPosY += Foldout_Interfaces.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       Interfaces", inPinsDraw, null,
                 typeof(ScriptClassInterface), TypeSelect_Type.Undefined, "Interface", CurScript.ScriptInterfaces.Count > 0);
 
             DrawDocButton(iconR, Res.IconInterface, "");
@@ -793,33 +733,26 @@
 
         DrawStateMachineFold();
 
-
         ////////////////////////////////////////////////////////////////////////////////////////////
-        /// 
-        /// 
+        ///
+        ///
         //DebugLinks();
         //DebugNodePinInfo();
 
         GUI.EndScrollView();
 
-
-
         ScrollObjsLength = FoldDrawPosY;
 
-        if (Event.current.isKey && Event.current.keyCode == Options.DeleteKey && Event.current.type == EventType.KeyDown && CurScript.SelectedScriptObjects.Count > 0 && ToolbarRect.Contains(Event.current.mousePosition))
+        if (Options.IsDeleteKey(ev.keyCode) && ev.type == EventType.KeyDown && CurScript.SelectedScriptObjects.Count > 0 && ToolbarRect.Contains(ev.mousePosition))
         {
             DeleteSelectedScriptObjs();
         }
 
-      
-       
         //DebugRenameAssemb();
 
         DrawHideOptionsList();
     }
 
-
-
     private void DrawStateMachineFold()
     {
         if (CurClass == null)
@@ -835,9 +768,8 @@
             GUI.Label(new Rect(5, FoldDrawPosY, 200, 20), "Nodes:", Res.Label);
             FoldDrawPosY += 20;
 
-
-                //Draw nodes
-                if (CurClass.SMachineSaveData.States.Count == 0)
+            //Draw nodes
+            if (CurClass.SMachineSaveData.States.Count == 0)
             {
                 GUI.Label(new Rect(0, FoldDrawPosY, 200, 20), "Nodes empty.", Res.Label);
                 FoldDrawPosY += 20;
@@ -848,11 +780,11 @@
                 {
                     Transitions.AddRange(node.Transitions);
 
-                        //  if (node.NodeType == NSM_Editor.SM_NodeType.Entry ||
-                        //      node.NodeType == NSM_Editor.SM_NodeType.Exit)
-                        //     continue;
+                    //  if (node.NodeType == NSM_Editor.SM_NodeType.Entry ||
+                    //      node.NodeType == NSM_Editor.SM_NodeType.Exit)
+                    //     continue;
 
-                        DrawEvent(node.NodeName, ref node.FoldOpened, node, null);
+                    DrawEvent(node.NodeName, ref node.FoldOpened, node, null);
                 }
 
                 FoldDrawPosY += 5;
@@ -866,21 +798,17 @@
                 }
             }
 
-
-
             FoldDrawPosY += 10;
         };
 
-        iconR = CreateRect(20, FoldDrawPosY + 3, 14, 14);
+        iconR = new Rect(20, FoldDrawPosY + 3, 14, 14);
         FoldDrawPosY += Foldout_StateMachine.DrawWithAddButton(0, FoldDrawPosY, TBWidth, "       State Machine",
             inPinsDraw, null, typeof(NSM_Editor.NSM_StateMachine_SaveData), TypeSelect_Type.Undefined,
             "State Machine", CurClass.SMachineSaveData != null);
 
-
         DrawDocButton(iconR, Res.IconStateMachine, "http://nottorus.net/articles.php?article_id=21");
 
         //GUI.DrawTexture(iconR, Res.IconStateMachine);
-
     }
 
     private static void DrawEvent(string name, ref bool opened, NSM_Editor.SM_Node curNode,
@@ -891,7 +819,7 @@
         var foldBoxRect = new Rect(0, FoldDrawPosY + 1, labelName + 60, 20);
         GUI.Box(foldBoxRect, "", Res.Box);
 
-        Rect toggleRect = CreateRect(3, FoldDrawPosY + 7, 8, 8);
+        Rect toggleRect = new Rect(3, FoldDrawPosY + 7, 8, 8);
 
         if (opened)
             GUI.DrawTexture(toggleRect, Res.ListButtonOpen);
@@ -900,7 +828,7 @@
 
         var foldOpen = foldBoxRect;
         foldOpen.width -= 16;
-        if (_LMB_Down && foldOpen.Contains(Event.current.mousePosition))
+        if (_LMB_Down && foldOpen.Contains(ev.mousePosition))
         {
             opened = !opened;
         }
@@ -926,7 +854,6 @@
             GUI.Box(new Rect(0, FoldDrawPosY, TBWidth - 20, height), "", Res.Box);
             FoldDrawPosY += 5;
 
-
             if (curNode != null)
             {
                 curNode.DoBeforeEntering.Drawbl.Draw();
@@ -960,13 +887,10 @@
                 FoldDrawPosY += 20;
             }
 
-
-
             FoldDrawPosY += 10;
         }
     }
 
-
     private float HideOptionsListHeight = 0;
 
     int hideScriptObjs_Constr = 0;
@@ -983,58 +907,58 @@
 
     private void DrawHideOptionsList()
     {
-        Rect drawRect = CreateRect(0, ToolbarRect.height - HideOptionsListHeight - 1, ToolbarRect.width, HideOptionsListHeight);
+        Rect drawRect = new Rect(0, ToolbarRect.height - HideOptionsListHeight - 1, ToolbarRect.width, HideOptionsListHeight);
 
         DrawDeleg inPinsDraw = delegate
         {
             EditorGUI.BeginChangeCheck();
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Constructors: (" + hideScriptObjs_Constr + ")", Res.Label);
-            Options.b_HideConstructors = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideConstructors, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Constructors: (" + hideScriptObjs_Constr + ")", Res.Label);
+            Options.b_HideConstructors = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideConstructors, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Properties (" + hideScriptObjs_Prop + ")", Res.Label);
-            Options.b_HideScriptProperties = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideScriptProperties, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Properties (" + hideScriptObjs_Prop + ")", Res.Label);
+            Options.b_HideScriptProperties = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideScriptProperties, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Indexers (" + hideScriptObjs_Indexers + ")", Res.Label);
-            Options.b_HideScriptIndexers = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideScriptIndexers, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Indexers (" + hideScriptObjs_Indexers + ")", Res.Label);
+            Options.b_HideScriptIndexers = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideScriptIndexers, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Inherited Variables (" + hideScriptObjs_InhVars + ")", Res.Label);
-            Options.b_HideInheritedVariables = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedVariables, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Inherited Variables (" + hideScriptObjs_InhVars + ")", Res.Label);
+            Options.b_HideInheritedVariables = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedVariables, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Inherited Properties (" + hideScriptObjs_InhProp + ")", Res.Label);
-            Options.b_HideInheritedProperties = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedProperties, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Inherited Properties (" + hideScriptObjs_InhProp + ")", Res.Label);
+            Options.b_HideInheritedProperties = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedProperties, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Inherited Functions (" + hideScriptObjs_InhMethods + ")", Res.Label);
-            Options.b_HideInheritedMethods = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedMethods, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Inherited Functions (" + hideScriptObjs_InhMethods + ")", Res.Label);
+            Options.b_HideInheritedMethods = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideInheritedMethods, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Events (" + hideScriptObjs_Events + ")", Res.Label);
-            Options.b_HideEvents = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideEvents, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Events (" + hideScriptObjs_Events + ")", Res.Label);
+            Options.b_HideEvents = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideEvents, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Inherited Events (" + hideScriptObjs_InhEvents + ")", Res.Label);
-            Options.b_HideInhEvents = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideInhEvents, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Inherited Events (" + hideScriptObjs_InhEvents + ")", Res.Label);
+            Options.b_HideInhEvents = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideInhEvents, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Enums (" + hideScriptObjs_Enums + ")", Res.Label);
-            Options.b_HideEnums = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideEnums, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Enums (" + hideScriptObjs_Enums + ")", Res.Label);
+            Options.b_HideEnums = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideEnums, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Delegates (" + hideScriptObjs_Delegates + ")", Res.Label);
-            Options.b_HideDelegates = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideDelegates, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Delegates (" + hideScriptObjs_Delegates + ")", Res.Label);
+            Options.b_HideDelegates = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideDelegates, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(30, FoldDrawPosY, 200, 16), "Show Interfaces (" + hideScriptObjs_Interfaces + ")", Res.Label);
-            Options.b_HideInterfaces = !EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 140, 16), !Options.b_HideInterfaces, Res.CheckBoxButton);
+            GUI.Label(new Rect(30, FoldDrawPosY, 200, 16), "Show Interfaces (" + hideScriptObjs_Interfaces + ")", Res.Label);
+            Options.b_HideInterfaces = !EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 140, 16), !Options.b_HideInterfaces, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
             if (EditorGUI.EndChangeCheck())
             {
-                EditorOptions.Save(); 
+                EditorOptions.Save();
             }
         };
 
@@ -1061,10 +985,9 @@
                 HideScriptObs_Fold.Opened = false;
         }
 
-
         int hideCount = 0;
 
-        if(Options.b_HideConstructors)
+        if (Options.b_HideConstructors)
         {
             hideCount += hideScriptObjs_Constr;
         }
@@ -1102,15 +1025,10 @@
             hideCount += hideScriptObjs_Interfaces;
         }
 
-
         HideOptionsListHeight = HideScriptObs_Fold.Draw(0, ToolbarRect.height - HideOptionsListHeight - 1, ToolbarRect.width, "Hidden script objects (" + hideCount + ")", inPinsDraw, true);
-
-
-
-    
     }
-    private M_Foldout HideScriptObs_Fold = new M_Foldout(false);
 
+    private M_Foldout HideScriptObs_Fold = new M_Foldout(false);
 
     private void DebugRenameAssemb()
     {
@@ -1118,16 +1036,16 @@
             return;
 
         FoldDrawPosY += 50;
-        GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Renamers:");
+        GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Renamers:");
         FoldDrawPosY += 30;
 
         foreach (var ren in CurScript._RenameInReflection)
         {
-            GUI.Label(CreateRect(5, FoldDrawPosY, 500, 20), "Owner: '" + ren.OwnerTypeName + "' OrigOwner: '" + ren.OriginalOwnerTypeName + "' Name: '" + ren.MemberName + "' NewName: '" + ren.NewMemberName + "'");
+            GUI.Label(new Rect(5, FoldDrawPosY, 500, 20), "Owner: '" + ren.OwnerTypeName + "' OrigOwner: '" + ren.OriginalOwnerTypeName + "' Name: '" + ren.MemberName + "' NewName: '" + ren.NewMemberName + "'");
             FoldDrawPosY += 20;
         }
 
-        if (GUI.Button(CreateRect(5, FoldDrawPosY, 300, 20), "Clear"))
+        if (GUI.Button(new Rect(5, FoldDrawPosY, 300, 20), "Clear"))
         {
             CurScript._RenameInReflection = new List<NewNameReflection>();
         }
@@ -1140,92 +1058,84 @@
 
         FoldDrawPosY += 50;
 
-        GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Pins Links:");
+        GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Pins Links:");
         FoldDrawPosY += 20;
 
         foreach (LinkInfo link in CurDrawable.NodePinsLinks)
         {
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "ID: " + link.NodeID + " Index:" + link.NodeConPinID + " ->LNodeID: " + link.LNodeID + " LIndex: " + link.LNodeConPinID);
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "ID: " + link.NodeID + " Index:" + link.NodeConPinID + " ->LNodeID: " + link.LNodeID + " LIndex: " + link.LNodeConPinID);
             FoldDrawPosY += 20;
         }
 
         FoldDrawPosY += 20;
 
-        GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Connectors Links:");
+        GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Connectors Links:");
         FoldDrawPosY += 20;
 
         foreach (LinkInfo link in CurDrawable.NodeConnectorsLinks)
         {
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "ID: " + link.NodeID + " Index:" + link.NodeConPinID + " ->LNodeID: " + link.LNodeID + " LIndex: " + link.LNodeConPinID);
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "ID: " + link.NodeID + " Index:" + link.NodeConPinID + " ->LNodeID: " + link.LNodeID + " LIndex: " + link.LNodeConPinID);
             FoldDrawPosY += 20;
         }
         FoldDrawPosY += 20;
     }
 
-
     private static void DebugNodePinInfo()
     {
         if (CurDrawable == null)
             return;
 
-        if(CurDrawable.SelectedNodes.Count == 1)
+        if (CurDrawable.SelectedNodes.Count == 1)
         {
             FoldDrawPosY += 30;
             Node drawNode = CurDrawable.Nodes.Find(x => x.NodeID == CurDrawable.SelectedNodes[0]);
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Type: " + drawNode.NodeType);
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Type: " + drawNode.NodeType);
             FoldDrawPosY += 20;
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "DType: " + drawNode.DNodeType);
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "DType: " + drawNode.DNodeType);
             FoldDrawPosY += 20;
 
-
             if (drawNode == null)
                 return;
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Connectors:");
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Connectors:");
             FoldDrawPosY += 20;
 
-
             foreach (var conn in drawNode.ConnectorsOut)
             {
-                GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "ConnName: '" + conn.ConectorName + "' ID: " + conn.ConnectorID);
+                GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "ConnName: '" + conn.ConectorName + "' ID: " + conn.ConnectorID);
                 FoldDrawPosY += 20;
             }
 
-
-
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "In Params pins:");
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "In Params pins:");
             FoldDrawPosY += 20;
 
             foreach (Node_Pin pin in drawNode.Config.InPins_GParameters)
             {
-                GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Param Pin: '" + pin.PinName + "' ID: " + pin.PinID + " type: " + pin.type.PType);
+                GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Param Pin: '" + pin.PinName + "' ID: " + pin.PinID + " type: " + pin.type.PType);
                 FoldDrawPosY += 20;
             }
 
             FoldDrawPosY += 30;
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "In pins:");
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "In pins:");
             FoldDrawPosY += 20;
 
             foreach (Node_Pin pin in drawNode.Config.InPins)
             {
-                GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Pin: '" + pin.PinName + "' ID: " + pin.PinID + " Constr: " + pin.TempVarConstrPin);
+                GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Pin: '" + pin.PinName + "' ID: " + pin.PinID + " Constr: " + pin.TempVarConstrPin);
                 FoldDrawPosY += 20;
             }
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Out pins:");
+            GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Out pins:");
             FoldDrawPosY += 20;
 
             foreach (Node_Pin pin in drawNode.Config.OutPins)
             {
-                GUI.Label(CreateRect(5, FoldDrawPosY, 300, 20), "Pin: '" + pin.PinName + "' ID: " + pin.PinID);
+                GUI.Label(new Rect(5, FoldDrawPosY, 300, 20), "Pin: '" + pin.PinName + "' ID: " + pin.PinID);
                 FoldDrawPosY += 20;
             }
-
         }
     }
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_AssetInspector.cs Editor/m_AssetInspector.cs
--- .Editor/m_AssetInspector.cs	2018-06-30 08:59:18.463603900 +0700
+++ Editor/m_AssetInspector.cs	2018-06-30 09:02:03.816510200 +0700
@@ -1,15 +1,12 @@
-﻿using UnityEngine;
+﻿using System.IO;
 using UnityEditor;
-using System.Collections;
-using System.IO;
+using UnityEngine;
 
 [CustomEditor(typeof(DefaultAsset))]
-
 public class m_AssetInspector : Editor
 {
     private string AssetPath = "";
 
-
     public override void OnInspectorGUI()
     {
         Object selPrefab = Selection.activeObject;
@@ -20,12 +17,11 @@
 
             if (Path.GetExtension(AssetPath) == Nottorus.ExtensionType)
             {
-             
                 AssetPath = AssetPath.Replace(Nottorus.ExtensionType, "");
 
-                if(Nottorus.BPE != null)
+                if (Nottorus.BPE != null)
                 {
-                    if(Nottorus.CheckAllreadyOpened(AssetPath))
+                    if (Nottorus.CheckAllreadyOpened(AssetPath))
                     {
                         var prevGuiEn = GUI.enabled;
                         GUI.enabled = true;
@@ -41,10 +37,7 @@
             }
         }
 
-
-
         DrawDefaultInspector();
-
     }
 
     private void DrawNottorusInspector()
@@ -56,4 +49,4 @@
                 Nottorus.OpenAddScript(AssetPath.Replace(Nottorus.ExtensionType, string.Empty), true);
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_AutoSave.cs Editor/m_AutoSave.cs
--- .Editor/m_AutoSave.cs	2018-06-30 08:59:18.465605100 +0700
+++ Editor/m_AutoSave.cs	2018-06-30 09:02:03.817510100 +0700
@@ -1,15 +1,10 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
+﻿using ICSharpCode.SharpZipLib.Zip;
 using System;
 using System.IO;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-using ICSharpCode.SharpZipLib.Zip;
-using System.Runtime.InteropServices;
+using UnityEditor;
+using UnityEngine;
 
-public partial class Nottorus : EditorWindow 
+public partial class Nottorus : EditorWindow
 {
     public static m_AutoSave AutoSave = new m_AutoSave();
 
@@ -25,25 +20,27 @@
             float nextAutosave = Options.LastAutoSaveTime + Options.AutosaveDelay;
             //if(Options.b_ShowDebug)Debug.Log("Conf: " + Options.LastAutoSaveTime + "Curr: " + TImeTime + " next: " + nextAutosave);
 
-            if(nextAutosave < TImeTime || (nextAutosave - TImeTime) > Options.AutosaveDelay)
+            if (nextAutosave < TImeTime || (nextAutosave - TImeTime) > Options.AutosaveDelay)
             {
                 Options.LastAutoSaveTime = TImeTime;
 
-                if(!b_Processsing)
+                if (!b_Processsing)
                 {
                     b_Processsing = true;
-                    m_AutosaveThread = new System.Threading.Thread(DoAutoSave_Async);
-                    m_AutosaveThread.Priority = Options.ThreadSearchPriority;
+                    m_AutosaveThread = new System.Threading.Thread(DoAutoSave_Async)
+                    {
+                        Priority = Options.ThreadSearchPriority
+                    };
                     m_AutosaveThread.Start();
-                }      
-            }  
+                }
+            }
         }
 
         public System.Threading.Thread m_AutosaveThread = null;
 
         public void AbortThread()
         {
-            if(m_AutosaveThread != null && !b_ThreadAbort)
+            if (m_AutosaveThread != null && !b_ThreadAbort)
             {
                 b_ThreadAbort = true;
                 m_AutosaveThread.Abort();
@@ -52,6 +49,7 @@
 
         private bool b_Processsing = false;
         private bool b_ThreadAbort = false;
+
         public void DoAutoSave_Async()
         {
             try
@@ -59,8 +57,6 @@
                 EditorOptions.Save();
                 Directory.CreateDirectory(EditorFolder + AutosaveDirectory);
 
-           
-
                 foreach (ScriptData script in Scripts)
                 {
                     if (b_ThreadAbort) break;
@@ -81,8 +77,6 @@
                             File.Delete(Path_BPS);
                         }
 
-
-
                         Serialize_Script(script, Path_BPS, false);
 
                         if (CurScript == script)
@@ -105,12 +99,11 @@
                         if (b_ThreadAbort) break;
                     }
                 }
-
             }
             catch (Exception exc)
             {
                 InfoMessages.ShowMessage("Failed to make autosave", 1);
-                if(Options.b_ShowDebug)Debug.Log(exc);
+                if (Options.b_ShowDebug) Debug.Log(exc);
             }
 
             b_Processsing = false;
@@ -119,4 +112,4 @@
             m_AutosaveThread = null;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_BaseScriptObject.cs Editor/m_BaseScriptObject.cs
--- .Editor/m_BaseScriptObject.cs	2018-06-30 08:59:18.473606300 +0700
+++ Editor/m_BaseScriptObject.cs	2018-06-30 09:02:03.821511600 +0700
@@ -1,21 +1,15 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using UnityEditorInternal;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Text.RegularExpressions;
-using System.Linq;
 using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public partial class BaseScriptObject
     {
-		[XmlIgnore]
+        [XmlIgnore]
         public RenameField Renamer;
 
         public int Obj_ID = 0;
@@ -28,28 +22,17 @@
         public string InheritedType = "";
         public NodeGenPins Inherit_CustomNode;
 
-
-
-        private ScriptProperty _ownerProperty = null;
-
+        // private ScriptProperty _ownerProperty = null;
 
         [XmlIgnore]
         public ScriptProperty OwnerProperty { get; set; }
 
-
-
-
-
-
-
-
         public void ChangeVarType(Type newType)
         {
             Config.NodeRefType.SetVarType(newType);
             ReinitConfig_Var();
         }
 
-
         public virtual bool _IsStatic
         {
             get
@@ -58,13 +41,11 @@
             }
         }
 
-
         public virtual void ReinitConfig_Var()
         {
-            if(Options.b_ShowDebug)Debug.Log("Must be overrided!");
+            if (Options.b_ShowDebug) Debug.Log("Must be overrided!");
         }
 
-
         public BaseScriptObject()
         {
             Renamer = new RenameField(Open, EndChangeName);
@@ -72,18 +53,14 @@
 
         public virtual void EndChangeName(string newName)
         {
-
         }
 
-
         public virtual void Open()
         {
-
         }
 
         public virtual void StartDrag()
         {
-
         }
 
         public virtual bool b_IsSelected()
@@ -110,6 +87,7 @@
 
         [XmlIgnore]
         public bool AllowRMBDrag = false;
+
         public void Draw(Texture icon, string origName, Color iconColor, float widthOffset, float drawOffsetX)
         {
             if (OffsetX == 999)
@@ -117,7 +95,7 @@
 
             OffsetX = Mathf.Lerp(OffsetX, 0, 0.1f);
 
-            Rect FuncVarDrawRect = CreateRect(OffsetX + drawOffsetX, FoldDrawPosY, ToolbarRect.width - widthOffset, 16);
+            Rect FuncVarDrawRect = new Rect(OffsetX + drawOffsetX, FoldDrawPosY, ToolbarRect.width - widthOffset, 16);
 
             if (_TryOpen_RMB_Menu && FuncVarDrawRect.Contains(Event.current.mousePosition) && !Renamer.b_ChangeName)
             {
@@ -127,7 +105,6 @@
                 };
             }
 
-
             if (_LMB_Down)
             {
                 if (FuncVarDrawRect.Contains(Event.current.mousePosition))
@@ -137,19 +114,15 @@
                         StartDrag();
                     };
                 }
-
             }
 
-
-            FuncVarDrawRect = CreateRect(OffsetX + 20 + drawOffsetX, FoldDrawPosY, ToolbarRect.width - 25 - widthOffset, 16);
-
+            FuncVarDrawRect = new Rect(OffsetX + 20 + drawOffsetX, FoldDrawPosY, ToolbarRect.width - 25 - widthOffset, 16);
 
             GUIStyle style = b_IsSelected() ? Res.SelectedStyle : (b_IsPassiveSelected() ? Res.PasssiveSelectedStyle : Res.NormalStyle);
 
-
             Renamer.Draw(FuncVarDrawRect, origName, b_AllowRename(), style, Res.TextField, false);
 
-            Rect iconRect = CreateRect(OffsetX + drawOffsetX, FoldDrawPosY + 1, 15, 13);
+            Rect iconRect = new Rect(OffsetX + drawOffsetX, FoldDrawPosY + 1, 15, 13);
 
             GUI.color = iconColor;
             GUI.DrawTexture(iconRect, icon);
@@ -158,12 +131,12 @@
 
         public void Draw(string origName, float widthOffset, float drawOffsetX, float drawOffsetY)
         {
-            if (OffsetX == 999) 
+            if (OffsetX == 999)
                 OffsetX = -ToolbarRect.width;
 
             OffsetX = Mathf.Lerp(OffsetX, 0, 0.1f);
 
-            Rect FuncVarDrawRect = CreateRect(OffsetX + drawOffsetX, drawOffsetY, ToolbarRect.width - widthOffset, 16);
+            Rect FuncVarDrawRect = new Rect(OffsetX + drawOffsetX, drawOffsetY, ToolbarRect.width - widthOffset, 16);
 
             if (_TryOpen_RMB_Menu && FuncVarDrawRect.Contains(Event.current.mousePosition) && !Renamer.b_ChangeName)
             {
@@ -184,15 +157,12 @@
                 }
             }
 
-
-            FuncVarDrawRect = CreateRect(OffsetX + 5 + drawOffsetX, drawOffsetY, ToolbarRect.width - 10 - widthOffset, 16);
-
+            FuncVarDrawRect = new Rect(OffsetX + 5 + drawOffsetX, drawOffsetY, ToolbarRect.width - 10 - widthOffset, 16);
 
             GUIStyle style = b_IsSelected() ? Res.SelectedStyle : (b_IsPassiveSelected() ? Res.PasssiveSelectedStyle : Res.NormalStyle);
             Renamer.Draw(FuncVarDrawRect, origName, b_AllowRename(), style, Res.TextField, false);
         }
 
-
         public static void Spawn(Type spawnPar)
         {
             UndoSystem.RegisterUndo("Created script object");
@@ -200,7 +170,7 @@
             if (spawnPar == typeof(ScriptClassVariable))
             {
                 ScriptClassVariable newVar = _CreateVariable("NewVariable", CurClass.ClassVariables, true);
-                CurScript.SetSelectedObject = newVar;      
+                CurScript.SetSelectedObject = newVar;
             }
             else if (spawnPar == typeof(ScriptClass))
             {
@@ -226,7 +196,7 @@
             }
             else if (spawnPar == typeof(ScriptProperty))
             {
-                ScriptProperty newProperty = _CreateProperty("NewProperty", true, true,true, true, CurClass.ScriptProperties);
+                ScriptProperty newProperty = _CreateProperty("NewProperty", true, true, true, true, CurClass.ScriptProperties);
                 CurScript.SetSelectedObject = newProperty;
             }
             else if (spawnPar == typeof(ScriptIndexer))
@@ -259,13 +229,14 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Spawn type is not defined!");
+                if (Options.b_ShowDebug) Debug.Log("Spawn type is not defined!");
             }
         }
-        
+
         public List<ScriptObject_Attribute> AttributeDrawers = new List<ScriptObject_Attribute>();
 
         private M_Foldout Attribute_Fold = new M_Foldout();
+
         public void DrawAttributes(AttributeTargets targetType)
         {
             DrawDeleg inPinsDraw = delegate
@@ -282,6 +253,7 @@
 
             AttributeDrawers.RemoveAll(x => x.AttribStyle == null);
         }
+
         private void SetNewAttribType(Type newAtrType)
         {
             //AttributeDrawer.SetAttribType(newAtrType);
@@ -295,6 +267,7 @@
             AttributeDrawers.Add(newAttrib);
             return newAttrib;
         }
+
         public string GetAttributesCode()
         {
             string result = "";
@@ -303,18 +276,18 @@
             return result;
         }
 
-
         public class PinDrawRename
         {
             [XmlIgnore]
             public ChangeVarType VarTypeChanger = new ChangeVarType();
+
             [XmlIgnore]
             public RenameField PinRenamer;
+
             public float DrawWidth = 0;
 
             private List<Node_Pin> pinList;
 
-
             public PinDrawRename(Node_Pin pin, List<Node_Pin> pinList)
             {
                 this.pinList = pinList;
@@ -362,10 +335,8 @@
                 }
             }
         }
-
     }
 
-
     ///////////////////////////////
 
     private static ScriptProperty _CreateIndexer()//"NewIndexer"
@@ -374,11 +345,10 @@
         newProperty.m_Indexer = true;
         newProperty.CheckIndexersParamCount();
         newProperty.ReinitConfig_Var();
-    
+
         return newProperty;
     }
 
-
     public static ScriptClassConstructor _CreateConstructor(string name, bool setCurDrawabl, List<ScriptClassConstructor> listAdd)
     {
         ScriptClassConstructor newConstr = new ScriptClassConstructor(name);
@@ -396,6 +366,7 @@
 
         return newConstr;
     }
+
     public static ScriptLocalVariable _CreateLocalVariable(string name)
     {
         ScriptLocalVariable newvar = new ScriptLocalVariable(name);
@@ -403,6 +374,7 @@
         CurScript.SetSelectedObject = newvar;
         return newvar;
     }
+
     public static ScriptEnum _CreateEnum(string name)
     {
         ScriptEnum newvar = new ScriptEnum(name);
@@ -426,7 +398,6 @@
         return newvar;
     }
 
-
     public static ScriptClass CreateClass(string ClassName)
     {
         ScriptClass newClass = new ScriptClass(ClassName);
@@ -434,7 +405,6 @@
         return newClass;
     }
 
-
     public static ScriptClassVariable _CreateVariable(string name, List<ScriptClassVariable> listAdd, bool checkFreeName)
     {
         ScriptClassVariable newVar = new ScriptClassVariable(name, checkFreeName);
@@ -455,7 +425,6 @@
 
         addList.Add(newProperty);
 
-
         if (setCurDraw)
         {
             CurClass.CurrentDrawable.ID = newProperty.PropertyID;
@@ -466,23 +435,31 @@
 
         if (allowNodes)
         {
-            Node get_entry = new Node(newProperty.Get_SetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y);
-            get_entry.b_Inherited = inherited;
+            Node get_entry = new Node(newProperty.Get_SetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y)
+            {
+                b_Inherited = inherited
+            };
             newProperty.Drawable_Set.Nodes.Add(get_entry);
 
-            get_entry = new Node(newProperty.Get_SetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y);
-            get_entry.b_Inherited = inherited;
+            get_entry = new Node(newProperty.Get_SetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y)
+            {
+                b_Inherited = inherited
+            };
             newProperty.Drawable_Set.Nodes.Add(get_entry);
 
-            Node Entry = new Node(newProperty.Get_GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y);
-            Entry.b_Inherited = inherited;
+            Node Entry = new Node(newProperty.Get_GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y)
+            {
+                b_Inherited = inherited
+            };
             newProperty.Drawable_Get.Nodes.Add(Entry);
 
-            Node exit = new Node(newProperty.Get_GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y);
-            exit.b_Inherited = inherited;
+            Node exit = new Node(newProperty.Get_GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y)
+            {
+                b_Inherited = inherited
+            };
             newProperty.Drawable_Get.Nodes.Add(exit);
 
-            if(linkRet)
+            if (linkRet)
                 newProperty.Drawable_Get.NodeConnectorsLinks.Add(new LinkInfo(Entry.NodeID, 0, exit.NodeID, 0));
         }
 
@@ -505,12 +482,16 @@
 
         if (allowNodes)
         {
-            Node entry = new Node(newFunc.GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y);
-            entry.b_Inherited = false;
+            Node entry = new Node(newFunc.GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y)
+            {
+                b_Inherited = false
+            };
             newFunc.Nodes.Add(entry);
 
-            Node exit = new Node(newFunc.GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y);
-            exit.b_Inherited = false;
+            Node exit = new Node(newFunc.GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y)
+            {
+                b_Inherited = false
+            };
             newFunc.Nodes.Add(exit);
         }
 
@@ -519,15 +500,6 @@
 
     ///////////////////////////////
 
-
-
-
-
-
-
-
-
-
     private static Vector2 DefaultSpawnNode1
     {
         get
@@ -543,8 +515,4 @@
             return new Vector2(BPE.position.width - 400 - EditGraphRect.position.x, 100 - EditGraphRect.position.y);
         }
     }
-
-
-
-
-} 
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_BaseScriptObject_Drawable.cs Editor/m_BaseScriptObject_Drawable.cs
--- .Editor/m_BaseScriptObject_Drawable.cs	2018-06-30 08:59:18.476606500 +0700
+++ Editor/m_BaseScriptObject_Drawable.cs	2018-06-30 09:02:03.822511500 +0700
@@ -1,14 +1,8 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-using System.Text.RegularExpressions;
-using Nottorus_Debug;
-
 public partial class Nottorus : EditorWindow
 {
     public partial class BaseScriptObject
@@ -28,7 +22,7 @@
         public List<Matrix4x4> GUIMatrices = new List<Matrix4x4>();
 
         public float Zoom = 1;
-           
+
         [XmlIgnore]
         public List<LinkInfo> SelectedLinks = new List<LinkInfo>();
 
@@ -37,8 +31,6 @@
 
         public List<ScriptLocalVariable> LocalVariables = new List<ScriptLocalVariable>();
 
-
-
         public List<DebugPinConfig> DebugPinValues = new List<DebugPinConfig>();
 
         public bool CheckReturn(bool ignoreRetCheck)
@@ -51,13 +43,10 @@
             if (m_ReturnChecker.UnrechableCodeDetected)
                 BConsole.EditorLog("Unreachable code detected. Use the Sequence diagram tool to find the sourceof problem.", 1, m_ReturnChecker.UnreachableNodeId);
 
-            if(!ignoreRetCheck)
+            if (!ignoreRetCheck)
                 if (!DrawblReturnReally)
                     return true;
 
-           
-
-
             return result;
         }
 
@@ -78,10 +67,9 @@
 
         public void ReinitAllNodes_MathPins()
         {
-          CurClass.GetAllNodes().ForEach(x => x.ReinitMathPins());
+            CurClass.GetAllNodes().ForEach(x => x.ReinitMathPins());
         }
 
-
         public Vector2 GetEGPosFromPos(Vector2 realPos)
         {
             return ((realPos - EditGraphRect.position) * Zoom) - EditGraphDragOffset;
@@ -97,10 +85,9 @@
             return (realPos / Zoom) + EditGraphRect.position;
         }
 
-
         public Rect GetEGSelectionRect()
         {
-            Rect result = CreateRect();
+            Rect result = new Rect();
             result.position = GetEGPosFromPos_NoOffset(SelectNodesStartPos);
             result.size = GetEGPosFromPos_NoOffset(GlobalMousePos) - result.position;
             return result;
@@ -108,34 +95,28 @@
 
         public Rect GetEGSelectionRect_WithOffs()
         {
-            Rect result = CreateRect();
+            Rect result = new Rect();
             result.position = GetEGPosFromPos(SelectNodesStartPos);
             result.size = GetEGPosFromPos(GlobalMousePos) - result.position;
             return result;
         }
 
-
         public Rect GetEGRect(Rect curr)
         {
-            Rect result = CreateRect();
+            Rect result = new Rect();
             result.position = GetEGPosFromPos_NoOffset(curr.position);
             result.size = GetEGPosFromPos_NoOffset(curr.position + curr.size) - result.position;
             return result;
         }
 
-
-
         public Rect GetRealRect_FromEGRect(Rect curr)
         {
-            Rect result = CreateRect();
+            Rect result = new Rect();
             result.position = GetRealPos_FromEGPos_NoOffset(curr.position);
             result.size = GetRealPos_FromEGPos_NoOffset(curr.position + curr.size) - result.position;
             return result;
         }
 
-
-
-
         [XmlIgnore]
         public Vector2 GetEditGraphRealMousePos_NoOffset
         {
@@ -145,16 +126,12 @@
             }
         }
 
-
         [XmlIgnore]
         public Vector2 GetLinkingNewNodeMousePos
         {
             get
             {
-                if (NewNode_Window.b_Active)
-                    return GetEGPosFromPos(NewNode_Window.DrawRect.position);
-                else
-                    return GetEditGraphRealMousePos_NoOffset;
+                return GetEditGraphRealMousePos_NoOffset;
             }
         }
 
@@ -162,34 +139,32 @@
         {
             int startID = 0;
 
-            while(Commentary.Find( x=> x.CommentID == startID) != null)
+            while (Commentary.Find(x => x.CommentID == startID) != null)
             {
                 startID++;
             }
 
-
             return startID;
         }
 
         public virtual void DrawDetails()
         {
-            if(Options.b_ShowDebug)Debug.Log("You must override details draw func");
+            if (Options.b_ShowDebug) Debug.Log("You must override details draw func");
         }
 
         public void DeleteNodeCheck(int nodeID)
         {
             Node delNode = CurDrawable.Nodes.Find(x => x.NodeID == nodeID);
 
-            if(delNode == null)
+            if (delNode == null)
             {
                 return;
             }
 
-
             if (
-                delNode.NodeType == NodeTypeE.ClassFunctionEntry || 
-                delNode.NodeType == NodeTypeE.ConstructorEntry || 
-                delNode.NodeType == NodeTypeE.ClassPropertyEntry_Set || 
+                delNode.NodeType == NodeTypeE.ClassFunctionEntry ||
+                delNode.NodeType == NodeTypeE.ConstructorEntry ||
+                delNode.NodeType == NodeTypeE.ClassPropertyEntry_Set ||
                 delNode.NodeType == NodeTypeE.ClassPropertyEntry_Get ||
 
                 delNode.NodeType == NodeTypeE.StateMachineNode_Entry ||
@@ -238,15 +213,13 @@
             {
                 DeleteNode(delNode);
             }
-        } 
+        }
 
         private void DeleteNode(Node node)
         {
             Linking.RemoveAllNodePinsConnections(node);
             CurDrawable.Nodes.Remove(node);
         }
-
-
     }
 
     public class DrawableIdent
@@ -268,4 +241,4 @@
         StateMachine_TransitionCondition,
         StateMachine_TransitionPosition,
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_BPColor.cs Editor/m_BPColor.cs
--- .Editor/m_BPColor.cs	2018-06-30 08:59:18.469605600 +0700
+++ Editor/m_BPColor.cs	2018-06-30 09:02:03.818510700 +0700
@@ -1,13 +1,6 @@
 ﻿using UnityEditor;
-using System.Collections.Generic;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public class BPColor
@@ -49,4 +42,4 @@
             return new Color32(r, g, b, a);
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_BType.cs Editor/m_BType.cs
--- .Editor/m_BType.cs	2018-06-30 08:59:18.471607100 +0700
+++ Editor/m_BType.cs	2018-06-30 09:02:03.820511600 +0700
@@ -1,13 +1,10 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
+using System.Reflection;
 using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -31,21 +28,19 @@
         {
             if (newType == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("newType is null");
+                if (Options.b_ShowDebug) Debug.Log("newType is null");
                 SetVarType(typeof(ErrorClassType));
                 return;
             }
             if (newType.Assembly == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("Assembly is null");
+                if (Options.b_ShowDebug) Debug.Log("Assembly is null");
                 SetVarType(typeof(ErrorClassType));
                 return;
             }
 
-
             SetVarTypeByAsmName(newType.Assembly.FullName, newType.FullName);
 
-
             type = newType;// GetTypeByName(assemblyName, typeFullName);
             ArrayRanks = GetTypeArrayRanks(type);
         }
@@ -76,9 +71,9 @@
                     //if(type == null)
                     //    if(Options.b_ShowDebug)Debug.Log("Can't find type. Type is null: " + assemblyName + " | " + typeFullName);
                 }
-                 
+
                 return type;
-            } 
+            }
             set
             {
                 type = value;
@@ -89,7 +84,7 @@
         //[JsonConstructor]
         public BType() { }
 
-        public BType(Type newType) 
+        public BType(Type newType)
         {
             SetVarType(newType);
         }
@@ -98,12 +93,10 @@
         {
             SetVarTypeByAsmName(other.assemblyName, other.typeFullName);
 
-
             type = other.type;
         }
     }
 
-
     public static Type GetTypeByName(string assemblyName, ref string TypeFullName, int iterations = 0)
     {
         /*
@@ -123,15 +116,12 @@
             return null;
         }
 
-         
-
-
         //if(Options.b_ShowDebug)Debug.Log("Loading assembly: '" + assemblyName + "' t: '" + TypeFullName + "'" + "  Own ass: " + typeof(Nottorus).Assembly.GetName().Name);
 
         string tppath = assemblyName + "|" + TypeFullName;
 
         Type tp = null;
-        if(TypeNames.TryGetValue(tppath, out tp))
+        if (TypeNames.TryGetValue(tppath, out tp))
             return tp;
 
         try
@@ -146,22 +136,19 @@
                 //AssemblyName AN = new AssemblyName(assemblyName);
                 assembly = Assembly.Load(assemblyName);
             }
-            
-            if(assembly == null)
+
+            if (assembly == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find & load assembly: " + assemblyName + " for extracting type: " + TypeFullName);
+                if (Options.b_ShowDebug) Debug.Log("Can't find & load assembly: " + assemblyName + " for extracting type: " + TypeFullName);
                 return null;
             }
 
-
             tp = assembly.GetType(TypeFullName);
 
             if (tp == null)
             {
                 var typeShortname = TypeFullName;
 
-           
-
                 if (typeShortname.Contains("+"))
                 {
                     typeShortname = typeShortname.Replace("+", ".");
@@ -172,29 +159,28 @@
                     typeShortname = typeShortname.Substring(typeShortname.LastIndexOf("."));
                 }
 
-                var foundTypes = assembly.GetTypes().ToList().FindAll(x => ("." + x.Name).EndsWith(typeShortname));
+                var foundTypes = assembly.GetTypes().Where(x => ("." + x.Name).EndsWith(typeShortname)).ToList();
 
                 if (foundTypes.Count == 1)
                 {
                     tp = foundTypes[0];
                     assemblyName = tp.Assembly.FullName;
                     TypeFullName = tp.FullName;
-
                 }
-                else if(foundTypes.Count > 1)
+                else if (foundTypes.Count > 1)
                 {
                     tp = foundTypes[0];
-                    if(Options.b_ShowDebug)Debug.Log("Find more than one type of: " + typeShortname + ". Using first: " + tp);    
+                    if (Options.b_ShowDebug) Debug.Log("Find more than one type of: " + typeShortname + ". Using first: " + tp);
                 }
-            }        
+            }
         }
         catch
         {
-            if(Options.b_ShowDebug)Debug.Log("Can't load assembly: '" + assemblyName + "' typeFullName: '" + TypeFullName + "'");
+            if (Options.b_ShowDebug) Debug.Log("Can't load assembly: '" + assemblyName + "' typeFullName: '" + TypeFullName + "'");
         }
 
         if (TypeFullName == "T[]")
-            tp = typeof (T[]);
+            tp = typeof(T[]);
 
         if (tp == null)
         {
@@ -228,7 +214,6 @@
                 else
                     finallyRenamedName += ".";
 
-
                 finallyRenamedName += curPartName;
             }
 
@@ -247,14 +232,9 @@
                 TypeFullName = finallyRenamedName;
                 BConsole.EditorLog("Fixed assembly type renaming, Old name: '" + TypeFullName + "', new name: '" + finallyRenamedName, 0);
             }
-
         }
         */
 
-
-
-
-
         if (!TypeNames.ContainsKey(tppath))
             TypeNames.Add(tppath, tp);
 
@@ -262,6 +242,4 @@
     }
 
     private static Dictionary<string, Type> TypeNames = new Dictionary<string, Type>();
-
-
-}
\ No newline at end of file
+}
Only in .Editor: m_CheckWindow.cs
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ColorPicker.cs Editor/m_ColorPicker.cs
--- .Editor/m_ColorPicker.cs	2018-06-30 08:59:18.481608600 +0700
+++ Editor/m_ColorPicker.cs	2018-06-30 09:02:03.823511800 +0700
@@ -1,8 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-using System;
+﻿using System;
 using System.Globalization;
+using UnityEditor;
+using UnityEngine;
 using UnityEngine.Events;
 
 public partial class Nottorus : EditorWindow
@@ -11,7 +10,6 @@
 
     private class ColorPickerWindow
     {
- 
         public bool b_Active = false;
 
         private object RetObj = null;
@@ -33,11 +31,9 @@
             if (pos.x + d_Width + 50 > BPE.position.width)
                 pos.x = BPE.position.width - d_Width - 50;
 
-
-            DrawRect = CreateRect(pos.x, pos.y, d_Width, d_Height);
+            DrawRect = new Rect(pos.x, pos.y, d_Width, d_Height);
             InitPicker();
 
-
             CurrentColor = GetRetColor();
         }
 
@@ -54,7 +50,7 @@
                 if (displayAlpha)
                     TRVH.ConstructorTempVars[3].TempVarPrimitive = color.a;
             }
-            else if(RetObj is ColorSaver)
+            else if (RetObj is ColorSaver)
             {
                 var CS = RetObj as ColorSaver;
                 CS.SetColor(color);
@@ -98,6 +94,7 @@
         }
 
         private bool bInitialized = false;
+
         private void InitPicker()
         {
             if (bInitialized) return;
@@ -120,14 +117,14 @@
                 SetRetColor(color);
             });
 
-
             onValueChanged.AddListener(UpdateHex);
-
         }
+
         private void UpdateHex(Color newColor)
         {
             HexColor = ColorToHex(newColor);
         }
+
         private string ColorToHex(Color32 color)
         {
             if (displayAlpha)
@@ -147,24 +144,20 @@
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     RMB_Up_Deleg = delegate
                     {
-
                     };
                 }
                 else
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     RMB_Up_Deleg = delegate
                     {
-
                     };
 
                     b_Active = false;
@@ -174,7 +167,6 @@
             DrawRect = GUI.Window(124, DrawRect, ColorPickerWind, "");
         }
 
-
         private ColorPickerSlider Picker_R;
         private ColorPickerSlider Picker_G;
         private ColorPickerSlider Picker_B;
@@ -189,36 +181,32 @@
         private m_BoxSlider BoxSlider;
 
         private float drawPosY;
+
         private void ColorPickerWind(int windowId)
         {
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
-            GUI.Label(CreateRect(d_Width / 2 - 25, 4, 100, 30), "Color", Res.BigWindowLabel);
-
-            GUI.Box(CreateRect(5, 35, d_Width - 10, d_Height - 40), "", Res.Box);
-
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
+            GUI.Label(new Rect(d_Width / 2 - 25, 4, 100, 30), "Color", Res.BigWindowLabel);
 
+            GUI.Box(new Rect(5, 35, d_Width - 10, d_Height - 40), "", Res.Box);
 
-            var resRect = CreateRect(15, 40, 209, 20);
+            var resRect = new Rect(15, 40, 209, 20);
             GUI.color = CurrentColor;
             GUI.DrawTexture(resRect, Res.WhiteEmpty);
             GUI.color = Color.white;
             GUI.Box(resRect, "", Res.Box_Borders);
 
+            BoxSlider.Draw(new Rect(15, 65, 184, 184));
 
-            BoxSlider.Draw(CreateRect(15, 65, 184, 184));
-
-         
             Picker_Hue.Draw(new Vector2(15 + 184 + 5, 65), 14, 184, Color.white);
 
             drawPosY = 65 + 184 + 10;
 
-
             Picker_R.Draw(new Vector2(25, drawPosY), 14, 160, Color.red);
             drawPosY += 25;
             Picker_G.Draw(new Vector2(25, drawPosY), 14, 160, Color.green);
             drawPosY += 25;
             Picker_B.Draw(new Vector2(25, drawPosY), 14, 160, Color.blue);
-         
+
             if (displayAlpha)
             {
                 drawPosY += 30;
@@ -234,12 +222,11 @@
 
             drawPosY += 25;
 
+            GUI.Label(new Rect(100, drawPosY, 90, 20), "Hex:", Res.Label);
 
-            GUI.Label(CreateRect(100, drawPosY, 90, 20), "Hex:", Res.Label);
+            var hColor = EditorGUI.TextField(new Rect(135, drawPosY, 90, 20), HexColor, Res.TextField);
 
-            var hColor = EditorGUI.TextField(CreateRect(135, drawPosY, 90, 20), HexColor, Res.TextField);
-
-            if(hColor != HexColor)
+            if (hColor != HexColor)
             {
                 UpdateColor(hColor);
             }
@@ -259,11 +246,10 @@
                 Debug.Log("hex value is in the wrong format, valid formats are: #RGB, #RGBA, #RRGGBB and #RRGGBBAA (# is optional)");
         }
 
-
-
         private string HexColor;
 
         private const string hexRegex = "^#?(?:[0-9a-fA-F]{3,4}){1,2}$";
+
         public static bool HexToColor(string hex, out Color32 color)
         {
             // Check if this is a valid hex string (# is optional)
@@ -507,24 +493,31 @@
                 case ColorValues.R:
                     R = value;
                     break;
+
                 case ColorValues.G:
                     G = value;
                     break;
+
                 case ColorValues.B:
                     B = value;
                     break;
+
                 case ColorValues.A:
                     A = value;
                     break;
+
                 case ColorValues.Hue:
                     H = value;
                     break;
+
                 case ColorValues.Saturation:
                     S = value;
                     break;
+
                 case ColorValues.Value:
                     V = value;
                     break;
+
                 default:
                     break;
             }
@@ -536,26 +529,31 @@
             {
                 case ColorValues.R:
                     return R;
+
                 case ColorValues.G:
                     return G;
+
                 case ColorValues.B:
                     return B;
+
                 case ColorValues.A:
                     return A;
+
                 case ColorValues.Hue:
                     return H;
+
                 case ColorValues.Saturation:
                     return S;
+
                 case ColorValues.Value:
                     return V;
+
                 default:
                     throw new System.NotImplementedException("");
             }
         }
-
     }
 
-
     private class ColorPickerSlider
     {
         private ColorPickerWindow picker;
@@ -564,7 +562,7 @@
         private string Name = "";
         private Texture2D drawTex;
 
-        public Direction direction;
+        // private Direction direction;
 
         public ColorPickerSlider(ColorPickerWindow hsvpicker, ColorValues type, bool horisontal, string name, Texture2D tex = null)
         {
@@ -578,19 +576,16 @@
             hsvpicker.onHSVChanged.AddListener(HSVChanged);
         }
 
-
-
         private bool ColorSliderMoving = false;
         private float SliderValue = 0;
 
-
         public void Draw(Vector2 pos, float width, float length, Color color)
         {
             Rect drawrect;
 
             if (b_Horisontal)
             {
-                drawrect = CreateRect(pos.x, pos.y, length, width);
+                drawrect = new Rect(pos.x, pos.y, length, width);
 
                 var nameRect = drawrect;
                 nameRect.x -= 15;
@@ -598,7 +593,7 @@
             }
             else
             {
-                drawrect = CreateRect(pos.x, pos.y, width, length);
+                drawrect = new Rect(pos.x, pos.y, width, length);
             }
 
             //Background
@@ -616,20 +611,18 @@
             GUI.Box(drawrect, "", Res.Box_Borders);
 
             //Slider
-           
 
             if (b_Horisontal)
             {
                 float sliderPosYOffset = Mathf.Lerp(-3, length - 6, SliderValue);
-                Graphics.DrawTexture(CreateRect(drawrect.x + sliderPosYOffset, drawrect.y - 5, 7, 24), Res.CP_ColorGradTHor);
+                DrawTexture(new Rect(drawrect.x + sliderPosYOffset, drawrect.y - 5, 7, 24), Res.CP_ColorGradTHor);
             }
             else
             {
                 float sliderPosYOffset = Mathf.Lerp(3, length, 1 - SliderValue);
-                Graphics.DrawTexture(CreateRect(drawrect.x - 5, drawrect.y - 5 + sliderPosYOffset, 24, 7), Res.CP_ColorGradT);
+                DrawTexture(new Rect(drawrect.x - 5, drawrect.y - 5 + sliderPosYOffset, 24, 7), Res.CP_ColorGradT);
             }
 
-        
             ///////
 
             var ecp = Event.current.mousePosition;
@@ -638,7 +631,6 @@
                 ColorSliderMoving = true;
             }
 
-
             if (!_LMB_Down_L || _LMB_Up)
                 ColorSliderMoving = false;
 
@@ -656,7 +648,6 @@
                 SliderChanged(SliderValue);
             }
 
-
             if (b_Horisontal)
             {
                 drawrect.y -= 2;
@@ -664,7 +655,6 @@
                 drawrect.width = 35;
                 drawrect.height = 18;
 
-
                 int val = Mathf.RoundToInt(255f * SliderValue);
                 val = EditorGUI.IntField(drawrect, val, Res.TextField);
 
@@ -674,7 +664,6 @@
         }
 
         //////////////////////////////////////
-       
 
         private bool listen = true;
 
@@ -686,15 +675,19 @@
                 case ColorValues.R:
                     SliderValue = newColor.r;
                     break;
+
                 case ColorValues.G:
                     SliderValue = newColor.g;
                     break;
+
                 case ColorValues.B:
                     SliderValue = newColor.b;
                     break;
+
                 case ColorValues.A:
                     SliderValue = newColor.a;
                     break;
+
                 default:
                     break;
             }
@@ -708,6 +701,7 @@
                 case ColorValues.Value:
                     RegenerateTexture();
                     break;
+
                 case ColorValues.A:
                 case ColorValues.Hue:
                 default:
@@ -723,12 +717,15 @@
                 case ColorValues.Hue:
                     SliderValue = hue; //1 - hue;
                     break;
+
                 case ColorValues.Saturation:
                     SliderValue = saturation;
                     break;
+
                 case ColorValues.Value:
                     SliderValue = value;
                     break;
+
                 default:
                     break;
             }
@@ -742,6 +739,7 @@
                 case ColorValues.Value:
                     RegenerateTexture();
                     break;
+
                 case ColorValues.A:
                 case ColorValues.Hue:
                 default:
@@ -759,11 +757,6 @@
             listen = true;
         }
 
-
-
-
-
-
         private void RegenerateTexture()
         {
             Color32 baseColor = picker != null ? picker.CurrentColor : Color.black;
@@ -775,8 +768,8 @@
             Texture2D texture;
             Color32[] colors;
 
-            bool vertical = direction == Direction.BottomToTop || direction == Direction.TopToBottom;
-            bool inverted = direction == Direction.TopToBottom || direction == Direction.RightToLeft;
+            bool vertical = false; // direction == Direction.BottomToTop || direction == Direction.TopToBottom;
+            bool inverted = false; // direction == Direction.TopToBottom || direction == Direction.RightToLeft;
 
             int size;
             switch (type)
@@ -787,13 +780,16 @@
                 case ColorValues.A:
                     size = 255;
                     break;
+
                 case ColorValues.Hue:
                     size = 360;
                     break;
+
                 case ColorValues.Saturation:
                 case ColorValues.Value:
                     size = 100;
                     break;
+
                 default:
                     throw new System.NotImplementedException("");
             }
@@ -813,55 +809,59 @@
                         colors[inverted ? size - 1 - i : i] = new Color32(i, baseColor.g, baseColor.b, 255);
                     }
                     break;
+
                 case ColorValues.G:
                     for (byte i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r, i, baseColor.b, 255);
                     }
                     break;
+
                 case ColorValues.B:
                     for (byte i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = new Color32(baseColor.r, baseColor.g, i, 255);
                     }
                     break;
+
                 case ColorValues.A:
                     for (byte i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = new Color32(i, i, i, 255);
                     }
                     break;
+
                 case ColorValues.Hue:
                     for (int i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = ConvertHsvToRgb(i, 1, 1, 1);
                     }
                     break;
+
                 case ColorValues.Saturation:
                     for (int i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = ConvertHsvToRgb(h * 360, (float)i / size, v, 1);
                     }
                     break;
+
                 case ColorValues.Value:
                     for (int i = 0; i < size; i++)
                     {
                         colors[inverted ? size - 1 - i : i] = ConvertHsvToRgb(h * 360, s, (float)i / size, 1);
                     }
                     break;
+
                 default:
                     throw new System.NotImplementedException("");
             }
             texture.SetPixels32(colors);
             texture.Apply();
 
-
             drawTex = texture;
         }
     }
 
-
-
     private class m_BoxSlider
     {
         private float PP_PosX = 0.3f;
@@ -871,6 +871,7 @@
         private float lastH = -1;
 
         private Texture2D BoxTex;
+
         public m_BoxSlider(ColorPickerWindow hsvpicker)
         {
             picker = hsvpicker;
@@ -879,7 +880,7 @@
 
         public void Draw(Rect gradRect)
         {
-            Graphics.DrawTexture(gradRect, BoxTex);
+            DrawTexture(gradRect, BoxTex);
             GUI.Box(gradRect, "", Res.Box_Borders);
 
             var ecp = Event.current.mousePosition;
@@ -888,14 +889,13 @@
                 ColorPointMoving = true;
             }
 
-
             if (!_LMB_Down_L || _LMB_Up)
                 ColorPointMoving = false;
 
             if (ColorPointMoving)
             {
                 PP_PosX = (ecp.x - gradRect.x) / gradRect.width;
-                PP_PosY = (ecp.y - gradRect.y) / gradRect.height;   
+                PP_PosY = (ecp.y - gradRect.y) / gradRect.height;
                 PP_PosY = 1 - PP_PosY;
 
                 PP_PosX = Mathf.Clamp(PP_PosX, 0, 1);
@@ -903,7 +903,6 @@
 
                 SliderChanged(PP_PosX, PP_PosY);
             }
-         
 
             GUI.DrawTexture(new Rect(gradRect.x + gradRect.width * PP_PosX - 6, gradRect.y + gradRect.height * (1 - PP_PosY) - 6, 12, 12), Res.CP_ColorPointPick);
         }
@@ -961,7 +960,6 @@
         }
     }
 
-
     public enum ColorValues
     {
         R,
@@ -974,19 +972,15 @@
         Value
     }
 
-
     [Serializable]
     public class ColorChangedEvent : UnityEvent<Color>
     {
-
     }
 
     public class HSVChangedEvent : UnityEvent<float, float, float>
     {
-
     }
 
-
     public static HsvColor ConvertRgbToHsv(double r, double b, double g)
     {
         double delta, min;
@@ -1017,10 +1011,12 @@
                 h += 360;
         }
 
-        HsvColor hsvColor = new HsvColor();
-        hsvColor.H = 360 - h;
-        hsvColor.S = s;
-        hsvColor.V = v / 255;
+        HsvColor hsvColor = new HsvColor
+        {
+            H = 360 - h,
+            S = s,
+            V = v / 255
+        };
 
         return hsvColor;
     }
@@ -1033,7 +1029,6 @@
     // Converts an HSV color to an RGB color.
     public static Color ConvertHsvToRgb(double h, double s, double v, float alpha)
     {
-
         double r = 0, g = 0, b = 0;
 
         if (s == 0)
@@ -1042,13 +1037,11 @@
             g = v;
             b = v;
         }
-
         else
         {
             int i;
             double f, p, q, t;
 
-
             if (h == 360)
                 h = 0;
             else
@@ -1061,7 +1054,6 @@
             q = v * (1.0 - (s * f));
             t = v * (1.0 - (s * (1.0f - f)));
 
-
             switch (i)
             {
                 case 0:
@@ -1100,11 +1092,9 @@
                     b = q;
                     break;
             }
-
         }
 
         return new Color((float)r, (float)g, (float)b, alpha);
-
     }
 
     public struct HsvColor
@@ -1172,7 +1162,6 @@
         }
     }
 
-
     //
     // Summary:
     //     ///
@@ -1186,18 +1175,21 @@
         //     From left to right.
         //     ///
         LeftToRight = 0,
+
         //
         // Summary:
         //     ///
         //     From right to left.
         //     ///
         RightToLeft = 1,
+
         //
         // Summary:
         //     ///
         //     From bottom to top.
         //     ///
         BottomToTop = 2,
+
         //
         // Summary:
         //     ///
@@ -1205,4 +1197,4 @@
         //     ///
         TopToBottom = 3
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Commentary.cs Editor/m_Commentary.cs
--- .Editor/m_Commentary.cs	2018-06-30 08:59:18.483610100 +0700
+++ Editor/m_Commentary.cs	2018-06-30 09:02:03.824512800 +0700
@@ -1,29 +1,22 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-using System.Collections;
-
 public partial class Nottorus : EditorWindow
 {
-
     public class Commentary
     {
         public Commentary()
         {
             Renamer = new RenameField(ChangeName);
         }
-         
+
         public void ChangeName(string newName)
         {
             CommentaryName = newName;
         }
 
-
         public Commentary(Rect drawRect)
         {
             SetRect(drawRect);
@@ -42,7 +35,6 @@
                 Width = drawRect.width;
             }
 
-
             if (drawRect.height < 0)
             {
                 Height = -drawRect.height;
@@ -54,11 +46,9 @@
                 Height = drawRect.height;
             }
 
-
             InitComment();
         }
 
-
         public float Width = 0;
         public float Height = 0;
 
@@ -72,7 +62,6 @@
             Renamer = new RenameField(ChangeName);
         }
 
-
         public Commentary(List<int> selNodes)// For noode RMB Menu
         {
             CommentaryNodes = selNodes;
@@ -128,10 +117,10 @@
 
         //[XmlIgnore]
         public List<int> CommentaryNodes = new List<int>();
+
         [XmlIgnore]
         public List<int> CommentaryCommentaries = new List<int>();
 
-
         public float PosX = 400;
         public float PosY = 400;
 
@@ -139,14 +128,13 @@
 
         public string CommentaryName = "Commentary";
 
-
         public float WidthLerp = 0;
         public float HeightLerp = 0;
 
-        public Rect CommentaryRect = CreateRect();
+        public Rect CommentaryRect = new Rect();
 
         public static bool b_StartSelectCommentary = false;
-         
+
         private RenameField Renamer;
 
         private int i_ResizeComment = 0;
@@ -162,18 +150,16 @@
             if (Height < 70)
                 Height = 70;
 
-
             WidthLerp = Mathf.Lerp(WidthLerp, Width, 0.1f);
             HeightLerp = Mathf.Lerp(HeightLerp, Height, 0.1f);
 
             float rPosX = Mathf.RoundToInt(PosX / 16) * 16;
             float rPosY = Mathf.RoundToInt(PosY / 16) * 16;
 
-
             float rWidth = Mathf.RoundToInt(WidthLerp / 16) * 16;
             float rHeight = Mathf.RoundToInt(HeightLerp / 16) * 16;
 
-            CommentaryRect = CreateRect(rPosX + 20 + drawOffs.x, rPosY + 20 + drawOffs.y, rWidth + 4, rHeight + 4); 
+            CommentaryRect = new Rect(rPosX + 20 + drawOffs.x, rPosY + 20 + drawOffs.y, rWidth + 4, rHeight + 4);
 
             if (!RealEditGraphRect.Overlaps(CommentaryRect))
                 return;
@@ -184,29 +170,26 @@
                 PosY = rPosY;
             }
 
-
             if (b_SelectNodes)
             {
                 Rect localRect = CurDrawable.GetEGSelectionRect();
 
-                Rect Top = CreateRect();
+                Rect Top = new Rect();
                 Top.position = CommentaryRect.position;
                 Top.size = new Vector2(CommentaryRect.width, 2);
 
-                Rect Bot = CreateRect();
+                Rect Bot = new Rect();
                 Bot.position = CommentaryRect.position + Vector2.up * CommentaryRect.height;
                 Bot.size = new Vector2(CommentaryRect.width, 2);
 
-                Rect Rt = CreateRect();
+                Rect Rt = new Rect();
                 Rt.position = CommentaryRect.position + Vector2.right * CommentaryRect.width;
                 Rt.size = new Vector2(2, CommentaryRect.height);
 
-                Rect Lt = CreateRect();
+                Rect Lt = new Rect();
                 Lt.position = CommentaryRect.position;
                 Lt.size = new Vector2(2, CommentaryRect.height);
 
-         
-                
                 if (localRect.Overlaps(Top, true) && localRect.Overlaps(Bot, true) && localRect.Overlaps(Rt, true) && localRect.Overlaps(Lt, true))
                 {
                     if (!CurDrawable.SelectedCommentary.Contains(CommentID))
@@ -218,15 +201,8 @@
                 }
             }
 
-
-
             Texture NodeTexture;
 
-
-
-
-
-
             if (CurDrawable.SelectedCommentary.Contains(CommentID))
             {
                 NodeTexture = Res.CommentaryNode_Selected;
@@ -236,29 +212,14 @@
                 NodeTexture = Res.CommentaryNode_Normal;
             }
 
+            DrawTexture(new Rect(CommentaryRect.x - 15, CommentaryRect.y - 10, CommentaryRect.width + 30, CommentaryRect.height + 20), NodeTexture, 45, 45, 45, 45);
 
-            Graphics.DrawTexture(CreateRect(CommentaryRect.x - 15, CommentaryRect.y - 10, CommentaryRect.width + 30, CommentaryRect.height + 20), NodeTexture, 45, 45, 45, 45);
-
-
-
-            Rect GlossRect = CreateRect(CommentaryRect.x, CommentaryRect.y + 4, CommentaryRect.width + 1, 35);
-            //Title gloss 
+            Rect GlossRect = new Rect(CommentaryRect.x, CommentaryRect.y + 4, CommentaryRect.width + 1, 35);
+            //Title gloss
             GUI.DrawTexture(GlossRect, Res.Commentary_Label_BG);
 
-
-
-
-
             //////////////////////////// Resize /////////////////////////////////////
 
-      
-
-         
-
-        
-
-
-
             if (i_ResizeComment > 0 && Event.current.button == 0 && Event.current.type == EventType.MouseDrag)
             {
                 if (i_ResizeComment == 1)
@@ -288,10 +249,6 @@
 
             //////////////////////////////////////////////////////////////////////////
 
-
-
-
-
             float CommLabelWidth = 0;
 
             if (Renamer.b_ChangeName)
@@ -307,22 +264,16 @@
                 CurDrawable.SelectedNodes = new List<int>();
                 CurDrawable.SelectedCommentary = new List<int>();
 
-
-
-
                 LMB_Down_Deleg = delegate
                 {
-
                 };
 
                 RMB_Up_Deleg = delegate
                 {
-
                 };
             }
 
-            Renamer.Draw(CreateRect(GlossRect.x + 5, GlossRect.y + 10, CommLabelWidth + 10, 20), CommentaryName, true, Res.CommentaryEditField_Normal, Res.CommentaryEditField_Edit, false);
-
+            Renamer.Draw(new Rect(GlossRect.x + 5, GlossRect.y + 10, CommLabelWidth + 10, 20), CommentaryName, true, Res.CommentaryEditField_Normal, Res.CommentaryEditField_Edit, false);
 
             if (_LMB_Up || !Global_MouseInEditGraph)
             {
@@ -336,7 +287,7 @@
                 {
                     LMB_Down_Deleg = delegate
                     {
-                        if (b_TestLMBDeleg) if(Options.b_ShowDebug)Debug.Log("TestDeleg");
+                        if (b_TestLMBDeleg) if (Options.b_ShowDebug) Debug.Log("TestDeleg");
                         //UndoSystem.RegisterUndo("Move Commentary");
 
                         Node.DraggingNode = null;
@@ -354,7 +305,6 @@
 
                             CurDrawable.SelectedCommentary.Add(CommentID);
                         }
-
                         else
                         {
                             if (Event.current.control)
@@ -364,64 +314,53 @@
                         }
 
                         StartDrag();
-
                     };
                 }
             }
-            Rect ResizeRect = CreateRect(CommentaryRect.x + CommentaryRect.width - 20, CommentaryRect.y + CommentaryRect.height - 25, 20, 20);
-
+            Rect ResizeRect = new Rect(CommentaryRect.x + CommentaryRect.width - 20, CommentaryRect.y + CommentaryRect.height - 25, 20, 20);
 
             GUI.DrawTexture(ResizeRect, Res.ResizeCorner);
 
-            if (CreateRect(CommentaryRect.x - 15, CommentaryRect.y - 15, CommentaryRect.width + 30, CommentaryRect.height + 30).Contains(Event.current.mousePosition))
+            if (new Rect(CommentaryRect.x - 15, CommentaryRect.y - 15, CommentaryRect.width + 30, CommentaryRect.height + 30).Contains(Event.current.mousePosition))
             {
-                ResizeRect = CreateRect(CommentaryRect.x + CommentaryRect.width - 10, CommentaryRect.y + CommentaryRect.height - 15, 20, 20);
+                ResizeRect = new Rect(CommentaryRect.x + CommentaryRect.width - 10, CommentaryRect.y + CommentaryRect.height - 15, 20, 20);
                 EditorGUIUtility.AddCursorRect(ResizeRect, MouseCursor.ResizeUpLeft);
 
-
                 if (_LMB_Down && ResizeRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                         i_ResizeComment = 3;
                     };
                 }
 
-                ResizeRect = CreateRect(CommentaryRect.x + CommentaryRect.width - 10, CommentaryRect.y + 10, 20, CommentaryRect.height - 30);
-
+                ResizeRect = new Rect(CommentaryRect.x + CommentaryRect.width - 10, CommentaryRect.y + 10, 20, CommentaryRect.height - 30);
 
                 EditorGUIUtility.AddCursorRect(ResizeRect, MouseCursor.ResizeHorizontal);
 
-
                 if (_LMB_Down && ResizeRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                         i_ResizeComment = 1;
                     };
                 }
 
-                ResizeRect = CreateRect(CommentaryRect.x + 10, CommentaryRect.y + CommentaryRect.height - 10, CommentaryRect.width - 30, 20);
+                ResizeRect = new Rect(CommentaryRect.x + 10, CommentaryRect.y + CommentaryRect.height - 10, CommentaryRect.width - 30, 20);
 
                 EditorGUIUtility.AddCursorRect(ResizeRect, MouseCursor.ResizeVertical);
 
-
                 if (_LMB_Down && ResizeRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                         i_ResizeComment = 2;
                     };
                 }
 
-                ResizeRect = CreateRect(CommentaryRect.x - 10, CommentaryRect.y + 15, 20, CommentaryRect.height - 30);
+                ResizeRect = new Rect(CommentaryRect.x - 10, CommentaryRect.y + 15, 20, CommentaryRect.height - 30);
                 EditorGUIUtility.AddCursorRect(ResizeRect, MouseCursor.ResizeHorizontal);
 
-
-
                 if (_LMB_Down && ResizeRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate
@@ -430,27 +369,24 @@
                     };
                 }
 
-                ResizeRect = CreateRect(CommentaryRect.x + 10, CommentaryRect.y - 10, CommentaryRect.width - 30, 20);
+                ResizeRect = new Rect(CommentaryRect.x + 10, CommentaryRect.y - 10, CommentaryRect.width - 30, 20);
                 EditorGUIUtility.AddCursorRect(ResizeRect, MouseCursor.ResizeVertical);
 
                 if (_LMB_Down && ResizeRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                         i_ResizeComment = 5;
                     };
                 }
             }
 
-
             if (b_Drag && Event.current.button == 0 && Event.current.type == EventType.MouseDrag) // GlossRect.Contains(Event.current.mousePosition))
             {
                 PosX += Event.current.delta.x;
                 PosY += Event.current.delta.y;
             }
 
-
             if (!Global_MouseInEditGraph || _LMB_Up)
             {
                 if (i_ResizeComment != 0 || b_Drag)
@@ -463,7 +399,7 @@
 
         public static void StartDrag()
         {
-            Commentary[] selComms = CurDrawable.Commentary.FindAll(x => CurDrawable.SelectedCommentary.Contains(x.CommentID)).ToArray();
+            List<Commentary> selComms = CurDrawable.Commentary.FindAll(x => CurDrawable.SelectedCommentary.Contains(x.CommentID));
 
             foreach (Commentary selnode in selComms)
             {
@@ -477,14 +413,14 @@
 
             b_Drag = true;
 
-            Node[] commNodes = CurDrawable.Nodes.FindAll(x => CommentaryNodes.Contains(x.NodeID)).ToArray();
+            List<Node> commNodes = CurDrawable.Nodes.FindAll(x => CommentaryNodes.Contains(x.NodeID));
 
             foreach (Node selnode in commNodes)
             {
                 selnode.b_Drag = true;
             }
 
-            Commentary[] selComms = CurDrawable.Commentary.FindAll(x => CommentaryCommentaries.Contains(x.CommentID)).ToArray();
+            List<Commentary> selComms = CurDrawable.Commentary.FindAll(x => CommentaryCommentaries.Contains(x.CommentID));
 
             foreach (Commentary selnode in selComms)
             {
@@ -525,4 +461,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Compilation_Nodes.cs Editor/m_Compilation_Nodes.cs
--- .Editor/m_Compilation_Nodes.cs	2018-06-30 08:59:18.486609900 +0700
+++ Editor/m_Compilation_Nodes.cs	2018-06-30 09:02:03.826512600 +0700
@@ -1,12 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -29,6 +26,7 @@
         public bool CreateOutPinTempVar = false;
         private int CycleCheck_IterCount = 0;
         private int CycleCheck_CompileNum = 10;
+
         private string GetNextNodeCode(int connId)
         {
             LinkInfo link = Linking.SourceConnectorLinkExite(NodeID, connId);
@@ -38,11 +36,12 @@
                 link.HighLite = -2;
                 Node linkNode = CurScript.FindNodeFromID(link.LNodeID);
 
-
                 if (linkNode != null)
                 {
-                    Node_Connector thisConnector = ConnectorsOut.Find(x => x.ConnectorID == connId);
-                    Node_Connector thatConnector = linkNode.ConnectorsIn.Find(x => x.ConnectorID == link.LNodeConPinID);
+                    /*Node_Connector thisConnector =*/
+                    ConnectorsOut.Find(x => x.ConnectorID == connId);
+                    /*Node_Connector thatConnector =*/
+                    linkNode.ConnectorsIn.Find(x => x.ConnectorID == link.LNodeConPinID);
 
                     //AddLinkRetCheck(link, this, linkNode, thisConnector, thatConnector);
 
@@ -50,7 +49,7 @@
 
                     var commentary = CurScriptObj_Compile.Commentary.FindAll(x => x.CommentaryNodes.Contains(linkNode.NodeID));
                     string commentCode = "";
-                    foreach(var comment in commentary)
+                    foreach (var comment in commentary)
                     {
                         commentCode += "\r\n" + cg_GetSpacing() + "///" + comment.CommentaryName;
                     }
@@ -64,14 +63,13 @@
                         if (CurScriptObj_Compile._IsStatic)
                             staticFix = "null";
 
-                        return "\r\n" + CompilationDebugStartDirective + "\r\n" + cg_GetSpacing() + "BP_Utils.InvokeSequenceNode(" + link.NodeID + ", " + link.LNodeID + ", " + 
+                        return "\r\n" + CompilationDebugStartDirective + "\r\n" + cg_GetSpacing() + "BP_Utils.InvokeSequenceNode(" + link.NodeID + ", " + link.LNodeID + ", " +
                             staticFix + ", \"" + CurrCompileClass.Config.Name + "\", null, false);//Debug sequence\r\n" + CompilationDebugEndDirective + codeNext;
                     }
                     else
                     {
                         return codeNext;
                     }
-
                 }
                 else
                 {
@@ -85,13 +83,8 @@
             }
         }
 
-
-
-
         public string GetNodeCode(int pin)
         {
-        
-
             if (CycleCheck())
                 return "&ERROR&";
 
@@ -115,8 +108,6 @@
 
                 codeF += GetNextNodeCode(0);
 
-
-
                 resultCode = codeF;
             }
             /*
@@ -131,7 +122,7 @@
             */
             else if (NodeType == NodeTypeE.ClassVariable || NodeType == NodeTypeE.ClassEvent)
             {
-                if(DelegNode_Invoke)
+                if (DelegNode_Invoke)
                 {
                     string codeV = "\r\n" + cg_GetSpacing() + Config.Name + "(";
 
@@ -144,7 +135,6 @@
                         else
                             codeV += ", ";
                         codeV += GetInPinCode(inPNoC[i].PinID);
-
                     }
                     codeV += ");";
 
@@ -160,13 +150,11 @@
 
                     resultCode = codeV;
                 }
-            
             }
             else if (NodeType == NodeTypeE.Field)
             {
                 string codeV = "\r\n" + cg_GetSpacing();
 
-
                 string fieldName = CurScript.TryRenameReflection(Config.NodeRefType.PType.Name, Config.Name, 2);
 
                 if (isStatic)
@@ -175,7 +163,7 @@
                 }
                 else
                 {
-                    if(!b_Inherited)
+                    if (!b_Inherited)
                         codeV += GetInPinCode(0) + "." + fieldName + " = " + GetInPinCode(1) + ";";
                     else
                         codeV += fieldName + " = " + GetInPinCode(0) + ";";
@@ -210,7 +198,7 @@
 
                 if (refConfig != null)
                 {
-                    if(refConfig.m_Indexer)
+                    if (refConfig.m_Indexer)
                     {
                         propCode = "\r\n" + cg_GetSpacing() + "this[";
 
@@ -221,7 +209,7 @@
 
                             propCode += GetInPinCode(i + 1);
                         }
-                        propCode += "] = " + GetInPinCode(0) + ";";                      
+                        propCode += "] = " + GetInPinCode(0) + ";";
                     }
                     else
                     {
@@ -230,11 +218,10 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find referenced property with id: " + ReferenceID + "!");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find referenced property with id: " + ReferenceID + "!");
                     resultCode = "&ERROR&";
                 }
 
-
                 propCode += GetNextNodeCode(0);
 
                 resultCode = propCode;
@@ -245,7 +232,6 @@
 
                 string codeM = "\r\n" + cg_GetSpacing() + GetMethodCode() + ";";
 
-
                 codeM += GetNextNodeCode(0);
                 resultCode = codeM;
             }
@@ -276,9 +262,7 @@
 
                     string propCode = "";
 
-
-   
-                    if(Config.Name == "Item" && Config.NodeRefType3_Indexer.Count > 0)
+                    if (Config.Name == "Item" && Config.NodeRefType3_Indexer.Count > 0)
                     {
                         propCode = GetInPinCode(0) + "[";
 
@@ -339,7 +323,7 @@
                 }
                 else
                     resultCode = "\r\n" + cg_GetSpacing() + "return;";
-         
+
                 if (ConnectorsOut.Count > 0)
                     resultCode += GetNextNodeCode(0);
             }
@@ -374,7 +358,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't define type of node: " + NodeType);
+                if (Options.b_ShowDebug) Debug.Log("Can't define type of node: " + NodeType);
             }
 
             resultCode = InsertBefore_NodeCode + resultCode;
@@ -382,15 +366,11 @@
             if (CurScript.b_DebugMode)
                 resultCode = InsertDebug_NodeCode + resultCode;
 
-
- 
-
             InsertDebug_NodeCode = "";
 
             return resultCode;
         }
 
-
         private bool CycleCheck()
         {
             if (CycleCheck_CompileNum != CompilationNumber)
@@ -402,11 +382,11 @@
             CycleCheck_IterCount++;
             //if(Options.b_ShowDebug)Debug.Log(CycleCheck_IterCount + " id: " + NodeID);
 
-
             if (CycleCheck_IterCount >= Options.CycleIterCount_Max)
             {
                 //BConsole.CompileLog("Closed cycle. Maybe you should use 'while loop' instead of closing cycle. Use the Sequence diagram tool to find the source of problem.", 2, NodeID);
-                CompiledCode = "&ERROR&";
+                CompiledCode.Length = 0;
+                CompiledCode.Append("&ERROR&");
                 return true;
             }
             return false;
@@ -416,13 +396,15 @@
 
         private void SetInsertDebug_NodeCode(string codeAdd)
         {
-            if(CurCompileNode != null)
+            if (CurCompileNode != null)
                 CurCompileNode.InsertDebug_NodeCode += "\r\n" + cg_GetSpacing() + codeAdd;
         }
+
         private string InsertDebug_NodeCode = "";
 
         public string CustomIteratorName = "";
         private static bool CheckLoopBreakContinue = false;
+
         private string CustomNodesCompilation(int pin)
         {
             if (DNodeType == DefNodeType.FlowControl)
@@ -432,7 +414,6 @@
                 foreach (Node_Connector cnctr in ConnectorsOut)
                     code += GetNextNodeCode(cnctr.ConnectorID);
 
-
                 return code;
             }
             else if (DNodeType == DefNodeType.If)
@@ -473,8 +454,6 @@
                         ifCode += "\r\n" + cg_GetSpacing() + "else";
                     }
 
-
-
                     ifCode += "\r\n" + cg_GetSpacing() + "{";
                     _cg_Spacing++;
 
@@ -492,12 +471,10 @@
             }
             else if (DNodeType == DefNodeType.While)
             {
-
                 string whileCode = "";
 
                 string conditionCode = GetInPinCode(0);
 
-
                 _cg_Spacing++;
                 CheckLoopBreakContinue = true;
                 string loopCode = GetNextNodeCode(0);
@@ -518,31 +495,26 @@
                 }
                 whileCode += GetNextNodeCode(1);
 
-
-
                 return whileCode;
             }
             else if (DNodeType == DefNodeType.For)
             {
                 string forCode = "";
                 string iteratorName = "i_" + NodeID;
-               
-                if(CustomIteratorName.Length > 0)
+
+                if (CustomIteratorName.Length > 0)
                 {
                     iteratorName = CustomIteratorName;
                 }
 
-
                 string inPinCode_0 = GetInPinCode(0);
-          
+
                 string inPinCode_1 = GetInPinCode(1);
                 string inPinCode_2 = GetInPinCode(2);
 
-
-
                 string incExpr = "";
 
-                if(inPinCode_2 == "1")
+                if (inPinCode_2 == "1")
                 {
                     incExpr = "++";
                 }
@@ -598,7 +570,7 @@
                     if (Options.b_ShowDebug) Debug.LogError("Can't find value pin in 'Get/Set array element' node.");
                     valuePin = Config.InPins_NoConstr.Last();
                 }
-                 SAE += "] = " + GetInPinCode(valuePin.PinID) + ";";
+                SAE += "] = " + GetInPinCode(valuePin.PinID) + ";";
 
                 SAE += GetNextNodeCode(0);
 
@@ -606,14 +578,10 @@
             }
             else if (DNodeType == DefNodeType.ForEachIndex)
             {
-
-
                 string forCode = "";
 
-
                 _cg_Spacing++;
-          
-                
+
                 _cg_Spacing--;
 
                 //if (loopCode.Length > 1)
@@ -628,7 +596,7 @@
                         Config.InPins[0].ErrorPinMessage = message;
 
                         BConsole.CompileLog(message, 2, NodeID);
-                        if(Options.b_ShowDebug)Debug.Log(message);
+                        if (Options.b_ShowDebug) Debug.Log(message);
                         return "&ERROR&";
                     }
 
@@ -637,10 +605,8 @@
                         iteratorName = CustomIteratorName;
                     }
 
-
                     Type inPin0Type = Config.InPins[0].type.PType;
 
-
                     bool isDictionary = false;
                     bool isTransform = false;
 
@@ -667,7 +633,7 @@
                                 string message = "Connected pin generic type argument type is not defined! You must to select type. Type 'T' is not allowed during compilation.";
                                 Config.InPins[0].ErrorPinMessage = message;
                                 BConsole.CompileLog(message, 2, NodeID);
-                                if(Options.b_ShowDebug)Debug.Log(message);
+                                if (Options.b_ShowDebug) Debug.Log(message);
                                 return "&ERROR&";
                             }
                         }
@@ -684,17 +650,17 @@
                         Config.InPins[0].ErrorPinMessage = message;
 
                         BConsole.CompileLog(message, 2, NodeID);
-                        if(Options.b_ShowDebug)Debug.Log(message);
+                        if (Options.b_ShowDebug) Debug.Log(message);
                         return "&ERROR&";
                     }
 
-                    if(isTransform)
+                    if (isTransform)
                     {
                         forCode = "\r\n" + cg_GetSpacing() + "foreach (Transform " + iteratorName + " in " + GetInPinCode(0) + ")";
                         forCode += "\r\n" + cg_GetSpacing() + "{";
                         _cg_Spacing++;
                     }
-                    else if(inPin0Type.IsArray)
+                    else if (inPin0Type.IsArray)
                     {//RenameTypeVarName(inPin0Type.GetElementType())
                         forCode = "\r\n" + cg_GetSpacing() + "foreach (var " + iteratorName + " in " + GetInPinCode(0) + ")";
                         forCode += "\r\n" + cg_GetSpacing() + "{";
@@ -714,7 +680,7 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Undefined foreach loop..");
+                        if (Options.b_ShowDebug) Debug.Log("Undefined foreach loop..");
                         /*
                         forCode = "\r\n" + cg_GetSpacing() + "for (int " + i_Name + " = 0; " + i_Name + " < " + GetInPinCode(0) + "." + contLength + "; " + i_Name + "++)";
                         forCode += "\r\n" + cg_GetSpacing() + "{";
@@ -756,7 +722,7 @@
 
                     string catchTypeName = RenameTypeVarName(nodePin.type.PType, false);
 
-                    if(TestExceprions.Contains(catchTypeName))
+                    if (TestExceprions.Contains(catchTypeName))
                     {
                         BConsole.CompileLog("A previous catch clause already catches all exceptions of this type: '" + catchTypeName + "'", 2, NodeID);
                         return "&ERROR&";
@@ -829,15 +795,14 @@
             }
             */
             //else if (DNodeType == DefNodeType.MakeDelegate)
-           // {
-               
-           // }
+            // {
+            // }
             else if (DNodeType == DefNodeType.Break)
             {
                 if (!CheckLoopBreakContinue)
                 {
                     BConsole.CompileLog("A 'break' statement was encountered outside of a loop.", 2, NodeID);
-                    if(Options.b_ShowDebug)Debug.Log("A 'break' statement was encountered outside of a loop.");
+                    if (Options.b_ShowDebug) Debug.Log("A 'break' statement was encountered outside of a loop.");
                     return "&ERROR&";
                 }
                 return "\r\n" + cg_GetSpacing() + "break;";
@@ -847,7 +812,7 @@
                 if (!CheckLoopBreakContinue)
                 {
                     BConsole.CompileLog("A 'continue' statement was encountered outside of a loop.", 2, NodeID);
-                    if(Options.b_ShowDebug)Debug.Log("A 'continue' statement was encountered outside of a loop.");
+                    if (Options.b_ShowDebug) Debug.Log("A 'continue' statement was encountered outside of a loop.");
                     return "&ERROR&";
                 }
                 return "\r\n" + cg_GetSpacing() + "continue;";
@@ -855,7 +820,7 @@
             else if (DNodeType == DefNodeType.ConsolePrint)
             {
                 AddNewAssembly(typeof(Debug));
-           
+
                 string codeF = "";
 
                 AddNewAssembly(typeof(string));
@@ -895,7 +860,6 @@
 
                 lockCode += GetNextNodeCode(1);
 
-
                 return lockCode;
             }
             else if (DNodeType == DefNodeType.Throw)
@@ -923,7 +887,6 @@
                     opResult = GetInPinCode(0) + " " + Operation + " " + GetInPinCode(1) + ";";
                 }
 
-
                 string varCode = "\r\n" + cg_GetSpacing() + opResult;
                 varCode += GetNextNodeCode(0);
                 return varCode;
@@ -944,7 +907,6 @@
 
                 for (int i = 1; i < Config.InPins.Count; i++)
                 {
-
                     string tempVarCode = GetCodeTempVar(Config.InPins[i].type.PType, Config.InPins[i].TempVar_TempVarHolder, false, this, Config.InPins[i]);
 
                     if (!processedValues.Contains(tempVarCode))
@@ -952,29 +914,26 @@
                     else
                     {
                         Config.InPins[i].ErrorPin = true;
-                        Config.InPins[i].ErrorPinMessage = "Case node allready contains case: '" + tempVarCode + "'. Skipping..";
+                        Config.InPins[i].ErrorPinMessage = "Case node already contains case: '" + tempVarCode + "'. Skipping..";
                         //Debug.Log("Skip: " + tempVarCode);
                         continue;
                     }
 
-
                     switchCode += "\r\n" + cg_GetSpacing() + "case " + tempVarCode + ":";
 
                     _cg_Spacing++;
                     CheckLoopBreakContinue = true;
-                
 
                     CheckLoopBreakContinue = false;
 
                     string execCode = GetNextNodeCode(i - 1);
-            
-                    switchCode += execCode;
 
+                    switchCode += execCode;
 
                     var caseBreak = ConnectorsOut[i - 1].CaseBreak;
 
                     if (caseBreak)// !string.IsNullOrEmpty(execCode))
-                    {               
+                    {
                         switchCode += "\r\n" + cg_GetSpacing() + "break;";
                     }
                     else
@@ -985,7 +944,6 @@
                     _cg_Spacing--;
                 }
 
-
                 switchCode += "\r\n" + cg_GetSpacing() + "default:";
                 _cg_Spacing++;
                 CheckLoopBreakContinue = true;
@@ -1005,7 +963,6 @@
             }
             else if (DNodeType == DefNodeType.Using)
             {
-
                 string code = "\r\n" + cg_GetSpacing() + "using (var " + DisposableTempVarName + " = " + GetInPinCode(0) + ")";
                 code += "\r\n" + cg_GetSpacing() + "{";
                 _cg_Spacing++;
@@ -1035,7 +992,7 @@
             {
                 string code = "\r\n" + cg_GetSpacing();
 
-                if(Config.InPins.Count > 1)
+                if (Config.InPins.Count > 1)
                 {
                     code += "return " + GetInPinCode(1) + ";";
                 }
@@ -1044,7 +1001,6 @@
                     code += "return;";
                 }
 
-
                 code += GetNextNodeCode(0);
                 return code;
             }
@@ -1054,7 +1010,6 @@
 
                 string conditionCode = GetInPinCode(0);
 
-
                 _cg_Spacing++;
                 CheckLoopBreakContinue = true;
                 string loopCode = GetNextNodeCode(0);
@@ -1063,8 +1018,6 @@
 
                 if (loopCode.Length > 1)
                 {
-                   
-
                     doWhile += "\r\n" + cg_GetSpacing() + "do";
                     doWhile += "\r\n" + cg_GetSpacing() + "{";
                     _cg_Spacing++;
@@ -1077,8 +1030,6 @@
                 }
                 doWhile += GetNextNodeCode(1);
 
-
-
                 return doWhile;
             }
             else if (DNodeType == DefNodeType.PDirective)
@@ -1090,7 +1041,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Custom exec node type is not defined: " + DNodeType);
+                if (Options.b_ShowDebug) Debug.Log("Custom exec node type is not defined: " + DNodeType);
                 return "&ERROR&3";
             }
         }
@@ -1116,7 +1067,7 @@
             {
                 string message = "Can't find this Method " + Config.Name + " for node. Seems referenced function (or script) was removed.";
                 BConsole.CompileLog(message, 2, NodeID);
-                if(Options.b_ShowDebug)Debug.Log(message);
+                if (Options.b_ShowDebug) Debug.Log(message);
 
                 ErrorNodeType = 2;
                 ErrorNodeMessage = message;
@@ -1133,26 +1084,22 @@
                 else if (Config.InPins_NoConstr.Count > 1)
                     pinCode = GetInPinCode(0) + " " + Get_op_MethodOperation(Config.Name) + " " + GetInPinCode(1);
                 else
-                    if(Options.b_ShowDebug)Debug.Log("Can't define pin cnt");
+                    if (Options.b_ShowDebug) Debug.Log("Can't define pin cnt");
 
                 return pinCode;
             }
 
-
-
             int startPin = 0;
 
             AddNewAssembly(method.ReflectedType);
 
-            if(method.ReturnType != typeof(void))
+            if (method.ReturnType != typeof(void))
                 AddNewAssembly(method.ReturnType);
 
             if (method.IsStatic)
             {
                 if (!b_Inherited)
                     mCode = RenameType_ForCompilation(method.ReflectedType) + ".";
-
-             
             }
             else if (Config.InPins_NoConstr.Count > 0)
             {
@@ -1183,10 +1130,8 @@
 
                 if (pin.IsOptional)
                 {
-                    
                     if (Linking.SourcePinLinkExite(NodeID, pin.PinID) != null)
                     {
-
                     }
                     else
                     {
@@ -1196,7 +1141,6 @@
 
                 AddNewAssembly(pin.type.PType);
 
-
                 mCode += GetInPinCode(i);
 
                 if (mCode.Contains("&ERROR"))
@@ -1225,14 +1169,12 @@
         {
             string gParamsCode = "";
 
-
             for (int i = 0; i < Config.InPins_GParameters.Count; i++)
             {
                 if (i != 0)
                     gParamsCode += ", ";
                 Node_Pin pin = Config.InPins_GParameters[i];
 
-
                 if (pin.type.PType == null)//TempVar_TempVarHolder.TempVar_TypeType
                 {
                     if (Options.b_ShowDebug) Debug.Log("Can't convert type because it is null..(");
@@ -1249,13 +1191,9 @@
                 if (pin.type.PType == typeof(CurrentClassType))//TempVar_TempVarHolder.TempVar_TypeType
                     return "typeof(" + CurClass.Config.Name + ")";
 
-
-
                 gParamsCode = RenameType_ForCompilation(pin.type.PType);//TempVar_TempVarHolder.TempVar_TypeType
             }
 
-
-
             if (!string.IsNullOrEmpty(gParamsCode))
             {
                 return "<" + gParamsCode + ">";
@@ -1263,7 +1201,6 @@
             return "";
         }
 
-    
         public string GetOutPinCodeWithDebug(LinkInfo lInfo)
         {
             int pin = lInfo.LNodeConPinID;
@@ -1272,28 +1209,22 @@
             if (OutPin.LinkDelegVoid && !OutPin.LambdaDelegate)
                 return Config.Name;
 
-
-
-
             //Debug pins values
             if (CurScript.b_DebugMode && OutPin != null)
             {
-
                 bool AllowCreateVar = !IsEnumer(OutPin.type.PType) && !IsDeleg(OutPin.type.PType);
 
-                if(OutPin.type.PType.IsArray || OutPin.type.PType.IsClass)
+                if (OutPin.type.PType.IsArray || OutPin.type.PType.IsClass)
                 {
                     AllowCreateVar = true;
                 }
 
-                if(OutPin.type.PType == typeof(Null))
+                if (OutPin.type.PType == typeof(Null))
                     AllowCreateVar = false;
 
-
-                if(DNodeType == DefNodeType.Base || DNodeType == DefNodeType.MakeDelegate || DNodeType == DefNodeType.MakeAMethod || bLambdaDelegCompile > 0)
+                if (DNodeType == DefNodeType.Base || DNodeType == DefNodeType.MakeDelegate || DNodeType == DefNodeType.MakeAMethod || bLambdaDelegCompile > 0)
                     AllowCreateVar = false;
 
-
                 if (!AllowInsertCodeForDebug)
                     AllowCreateVar = false;
 
@@ -1306,15 +1237,14 @@
                         return code;
                     }
 
-
                     if (!code.Contains("yield "))
                     {
                         //if(Options.b_ShowDebug)Debug.Log("Create temp var for node: " + NodeID + " - " + Config.Name + " - " + NodeType);
 
-                        if(NodeType != NodeTypeE.ClassVariable && 
-                            NodeType != NodeTypeE.LocalVariable && 
-                            NodeType != NodeTypeE.Field && 
-                            NodeType != NodeTypeE.Property && 
+                        if (NodeType != NodeTypeE.ClassVariable &&
+                            NodeType != NodeTypeE.LocalVariable &&
+                            NodeType != NodeTypeE.Field &&
+                            NodeType != NodeTypeE.Property &&
                             NodeType != NodeTypeE.ClassProperty)
                         {
                             OutPinTempVarName = GetUniqTempVarName;
@@ -1351,11 +1281,9 @@
                 return OutPinTempVarName;
             }
 
-
             return GetOutPinCode(pin, OutPin);
         }
 
-
         private string OutPinTempVarName = "";
         private static int OutPinTempVarUniqNum = 0;
 
@@ -1387,9 +1315,6 @@
 
                 string propName = CurScript.TryRenameReflection(Config.NodeRefType2_propOwner.PType.Name, Config.Name, 3);
 
-              
-
-
                 string propCode = "";
 
                 if (b_Inherited)
@@ -1400,12 +1325,8 @@
                 {
                     if (isStatic)
                     {
-                      
-
-
-                        if(Config.NodeRefType2_propOwner.PType.IsGenericTypeDefinition && GenPinsSelector.GenList.Count > 0)
+                        if (Config.NodeRefType2_propOwner.PType.IsGenericTypeDefinition && GenPinsSelector.GenList.Count > 0)
                         {
-                            
                             var genTypes = GenPinsSelector.GenList.Select(x => x.Type.PType).ToArray();
 
                             var newGType = Config.NodeRefType2_propOwner.PType.MakeGenericType(genTypes);
@@ -1415,7 +1336,6 @@
                         {
                             propCode = RenameType_ForCompilation(Config.NodeRefType2_propOwner.PType);
                         }
-                        
                     }
                     else
                     {
@@ -1442,10 +1362,8 @@
                     {
                         propCode += "." + propName;
                     }
-
                 }
 
-
                 return propCode;
             }
             else if (NodeType == NodeTypeE.Field)
@@ -1477,8 +1395,6 @@
             {
                 SearchCheckEvent(false);
 
-
-
                 if (!ReflectionCkeckEventOk)
                 {
                     return "&ERROR&";
@@ -1502,10 +1418,8 @@
             }
             else if (NodeType == NodeTypeE.ClassProperty)
             {
-
                 ScriptProperty refConfig = ClassOwner.ScriptProperties.Find(x => x.PropertyID == ReferenceID);
 
-
                 string propCode = Config.Name;
 
                 if (refConfig != null)
@@ -1526,19 +1440,10 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find referenced property with id: " + ReferenceID + "!");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find referenced property with id: " + ReferenceID + "!");
                     return "&ERROR&";
                 }
 
-
-
-
-
-
-
-
-
-
                 return propCode;
             }
             /*
@@ -1561,17 +1466,15 @@
                         else
                             codeV += ", ";
                         codeV += GetInPinCode(i);
-
                     }
                     codeV += ")";
-                    
+
                     return codeV;
                 }
                 else
                 {
                     return Config.Name;
                 }
-             
             }
             else if (NodeType == NodeTypeE.LocalVariable)
             {
@@ -1592,7 +1495,6 @@
                     // Is assigned by default
                     ScriptLocalVariable localVar = CurScript.FindLocalVariableFromID(ReferenceID);
 
-
                     string tempVarCode = GetCodeTempVar(Config.NodeRefType.PType, localVar.TempVar, true, null, null);
 
                     if (tempVarCode != "TempVarIsNotDefined" || IsStruct(Config.NodeRefType.PType))
@@ -1603,7 +1505,7 @@
                     else
                     {
                         BConsole.CompileLog("Use unussigned local variable '" + Config.Name + "'", 2, NodeID);
-                        if(Options.b_ShowDebug)Debug.Log("Use unussigned local variable '" + Config.Name + "'");
+                        if (Options.b_ShowDebug) Debug.Log("Use unussigned local variable '" + Config.Name + "'");
 
                         return "&ERROR&";
                     }
@@ -1613,7 +1515,6 @@
             {
                 return OutPin.PinName;
             }
-
             else if (NodeType == NodeTypeE.ClassPropertyEntry_Set)
             {
                 return "value";
@@ -1622,7 +1523,6 @@
             {
                 return OutPin.PinName;
             }
-
             else if (NodeType == NodeTypeE.ConstructorEntry)
             {
                 return OutPin.PinName;
@@ -1694,12 +1594,11 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Out Type node not defined! NodeType: " + NodeType);
+                if (Options.b_ShowDebug) Debug.Log("Out Type node not defined! NodeType: " + NodeType);
                 return "&ERROR&";
             }
         }
 
-    
         /*
         private void CheckOutPinUsageCount()
         {
@@ -1788,7 +1687,7 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. 'For' compilation. Pin: " + pin);
+                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. 'For' compilation. Pin: " + pin);
                     return "&ERROR_PinNum&";
                 }
             }
@@ -1802,10 +1701,9 @@
                 }
                 else
                 {
-
                     string delegCode;
 
-                    if(DNodeType == DefNodeType.MakeAMethod)
+                    if (DNodeType == DefNodeType.MakeAMethod)
                     {
                         delegCode = "(";
                     }
@@ -1814,8 +1712,6 @@
                         delegCode = "delegate (";
                     }
 
-                
-
                     var links = Linking.EndPinLinksExite(NodeID, pin);
                     if (links.Count > 0)
                     {
@@ -1823,16 +1719,14 @@
 
                         Node linkNode = CurScript.FindNodeFromID(link.NodeID);
 
-
                         MethodInfo invoke = linkNode.Config.InPins.Find(x => x.PinID == link.NodeConPinID).type.PType.GetMethod("Invoke");
 
                         if (invoke == null)
                         {
-                            if(Options.b_ShowDebug)Debug.Log("Not a delegate.");
+                            if (Options.b_ShowDebug) Debug.Log("Not a delegate.");
                             return "&ERROR&";
                         }
 
-
                         ParameterInfo[] parameters = invoke.GetParameters();
                         for (int i = 0; i < parameters.Length; i++)
                         {
@@ -1841,25 +1735,19 @@
                             delegCode += RenameType_ForCompilation(parameters[i].ParameterType) + " " + parameters[i].Name;
                         }
 
-
-
-
                         delegCode += ")";
 
-
                         if (DNodeType == DefNodeType.MakeAMethod)
                         {
                             delegCode += " => ";
                         }
 
-
                         if (DNodeType == DefNodeType.MakeDelegate)
                             delegCode += "\r\n" + cg_GetSpacing();
 
                         delegCode += "{";
                         _cg_Spacing++;
 
-
                         if (DNodeType == DefNodeType.MakeAMethod)
                             AllowInsertCodeForDebug = false;
 
@@ -1873,7 +1761,6 @@
 
                         delegCode += delCodeSub;
 
-
                         _cg_Spacing--;
 
                         if (DNodeType == DefNodeType.MakeDelegate)
@@ -1885,7 +1772,7 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't find link to define delegate type");
+                        if (Options.b_ShowDebug) Debug.Log("Can't find link to define delegate type");
                         return "&ERROR_PinNum&";
                     }
                 }
@@ -1937,7 +1824,6 @@
                         return "&ERROR&";
                     }
                 }
-           
             }
             else if (DNodeType == DefNodeType.Var)
             {
@@ -1948,7 +1834,7 @@
                 else
                 {
                     BConsole.CompileLog("Use unussigned local variable '" + Config.Name + "'", 2, NodeID);
-                    if(Options.b_ShowDebug)Debug.Log("Use unussigned local variable '" + Config.Name + "'");
+                    if (Options.b_ShowDebug) Debug.Log("Use unussigned local variable '" + Config.Name + "'");
 
                     return "&ERROR&";
                 }
@@ -1966,8 +1852,6 @@
                     opResult = GetInPinCode(0) + " " + Operation + " " + GetInPinCode(1);
                 }
 
-
-
                 return opResult;
             }
             else if (DNodeType == DefNodeType.Using)
@@ -1975,7 +1859,7 @@
                 if (!DisposableVarCanBeUsed)
                 {
                     BConsole.CompileLog("You can't use disposable variable outside disposable code", 2, NodeID);
-                    if(Options.b_ShowDebug)Debug.Log("You can't use disposable variable outside disposable code");
+                    if (Options.b_ShowDebug) Debug.Log("You can't use disposable variable outside disposable code");
 
                     return "&ERROR&";
                 }
@@ -1996,10 +1880,9 @@
                 {
                     var indexPin = Config.InPins_NoConstr.Find(x => x.PinName.Contains("index:") && x.PinName.Contains(i.ToString()));
 
-                    if(indexPin == null)
+                    if (indexPin == null)
                         indexPin = Config.InPins_NoConstr.Find(x => x.PinName.Contains("index"));
 
-
                     if (indexPin != null)
                     {
                         if (first)
@@ -2026,21 +1909,21 @@
                     return nodePin.PinName;
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find out pin №" + pin + " of node 'TryCatchFinally'.");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find out pin №" + pin + " of node 'TryCatchFinally'.");
                     return "&ERROR&";
                 }
             }
 
-
             /////////////////
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Out Type Custom DNode not defined! NodeType: " + DNodeType);
+                if (Options.b_ShowDebug) Debug.Log("Out Type Custom DNode not defined! NodeType: " + DNodeType);
                 return "&ERROR&";
             }
         }
 
         public string TempVarNodeName = "";
+
         private string TempVar_GetName
         {
             get
@@ -2049,23 +1932,20 @@
             }
         }
 
-
         private string Out_LogicNodesCompilation(int pin, Node_Pin OutPin)
         {
             if (DNodeType == DefNodeType.Math)
             {
                 string codeRez = "";
 
-
                 string InCode0 = GetInPinCode(0);
                 string InCode1 = GetInPinCode(1);
 
                 string operat = GetRealOperation(Operation);
 
-                string allCode = InCode0 + InCode1;
+                // string allCode = InCode0 + InCode1;
                 bool brekets = true;//operat == "||";
 
-
                 //if (Operation == "!")
                 //    codeRez = "!" + GetInPinCode(0);
                 //else
@@ -2076,7 +1956,6 @@
                         codeRez = InCode0 + " " + operat + " " + InCode1;
                 }
 
-
                 return codeRez;
             }
             /*
@@ -2085,7 +1964,6 @@
                 return GetInPinCode(0) + "[" + GetInPinCode(1) + "]";
             }
             */
-
             else if (DNodeType == DefNodeType.MakeArray)
             {
                 string GAEOI = "new " + RenameType_ForCompilation(Config.OutPins[0].type.PType);
@@ -2093,13 +1971,13 @@
                 GAEOI += "\r\n" + cg_GetSpacing() + "{";
                 _cg_Spacing++;
 
-                var arrayPins = Config.InPins.Where(x => x.PinName.StartsWith("Element:")).ToArray();
+                var arrayPins = Config.InPins.Where(x => x.PinName.StartsWith("Element:"));
 
-                for (int i = 0; i < arrayPins.Length; i++)
+                foreach (var arrPin in arrayPins)
                 {
-                    var arrPin = arrayPins[i];
-                    GAEOI += "\r\n" + cg_GetSpacing() + GetInPinCode(arrPin.PinID) + ",";
+                     GAEOI += "\r\n" + cg_GetSpacing() + GetInPinCode(arrPin.PinID) + ",";
                 }
+
                 _cg_Spacing--;
                 GAEOI += "\r\n" + cg_GetSpacing() + "}";
 
@@ -2116,12 +1994,12 @@
                 }
                 else if (Operation == "(T)")
                 {
-                   // AddNewAssembly(Config.NodeRefType.PType);
+                    // AddNewAssembly(Config.NodeRefType.PType);
                     return "(" + RenameType_ForCompilation(Config.NodeRefType.PType) + ")" + GetInPinCode(0);
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. Undefine as is (T) operation.");
+                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. Undefine as is (T) operation.");
                     return "&ERROR&";
                 }
             }
@@ -2205,13 +2083,13 @@
                     return GetInPinCode(0) + "." + OutPin.PinName;
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find out pin №" + pin + " of node 'BreakVector'.");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find out pin №" + pin + " of node 'BreakVector'.");
                     return "&ERROR&";
                 }
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Out Type DNode Logic not defined! NodeType: " + DNodeType);
+                if (Options.b_ShowDebug) Debug.Log("Out Type DNode Logic not defined! NodeType: " + DNodeType);
                 return "&ERROR&";
             }
         }
@@ -2225,25 +2103,22 @@
                 inPIN.ErrorPin = false;
             }
 
-
             LinkInfo link = Linking.SourcePinLinkExite(NodeID, pin);
 
             if (link != null)
             {
                 Node linkNode = CurScript.FindNodeFromID(link.LNodeID);
-                
+
                 if (linkNode != null)
                 {
                     bool PinsCanBeLinked = Linking.PinsCanBeLinked(linkNode.NodeID, linkNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID), NodeID, inPIN, false);
 
-                    if(!PinsCanBeLinked)
+                    if (!PinsCanBeLinked)
                     {
-
                         DrawNode(Vector2.zero);
                         linkNode.DrawNode(Vector2.zero);
                         PinsCanBeLinked = Linking.PinsCanBeLinked(linkNode.NodeID, linkNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID), NodeID, inPIN, false);
 
-
                         //if (Options.b_ShowDebug) Debug.Log("can't be linked: " + linkNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID).type.PType + " - " + inPIN.type.PType);
                     }
 
@@ -2263,11 +2138,11 @@
                                 }
                                 else
                                 {
-                                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #6");
+                                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #6");
                                     return "&ERROR&";
                                 }
                             }
-                            else if(linkNode.DNodeType == DefNodeType.Var)
+                            else if (linkNode.DNodeType == DefNodeType.Var)
                             {
                                 if (inPIN.IsRef) //ussigned
                                 {
@@ -2279,14 +2154,14 @@
                                 }
                                 else
                                 {
-                                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #6");
+                                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #6");
                                     return "&ERROR&";
                                 }
                             }
                             else
                             {
                                 BConsole.CompileLog("A ref or out argument must be an assignable variable!", 2, NodeID);
-                                if(Options.b_ShowDebug)Debug.Log("A ref or out argument must be an assignable variable!" + NodeID);
+                                if (Options.b_ShowDebug) Debug.Log("A ref or out argument must be an assignable variable!" + NodeID);
 
                                 return "&ERROR&";
                             }
@@ -2298,10 +2173,8 @@
                             var pin1Type = linkNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID).type.PType;
                             var pin2Type = inPIN.type.PType;
 
-
                             string typeConvert = MathFreeConnType.GetConverterCode(pin1Type, pin2Type, inPIN.TypesConvertVariant);
 
-
                             if (typeConvert.Contains("&PIN&"))
                                 return typeConvert.Replace("&PIN&", thatOutCode);
                             else
@@ -2311,8 +2184,8 @@
                     else
                     {
                         string message = "Pin Types can't be linked!";
-                        BConsole.CompileLog(message, 2, NodeID); 
-                        if(Options.b_ShowDebug)Debug.Log(message);
+                        BConsole.CompileLog(message, 2, NodeID);
+                        if (Options.b_ShowDebug) Debug.Log(message);
 
                         ErrorNodeType = 2;
                         ErrorNodeMessage = message;
@@ -2323,21 +2196,20 @@
                 else
                 {
                     BConsole.CompileLog("Error generating code: Can't find node: " + link.LNodeID, 2);
-                    if(Options.b_ShowDebug)Debug.Log("Error generating code: Can't find node: " + link.LNodeID);
+                    if (Options.b_ShowDebug) Debug.Log("Error generating code: Can't find node: " + link.LNodeID);
 
                     return "&ERROR&";
                 }
             }
 
-           
             if (inPIN == null)
             {
-                if(Options.b_ShowDebug)
+                if (Options.b_ShowDebug)
                     Debug.Log("Can't find In pin id: " + pin + " in node '" + Config.Name + "' id: " + NodeID);
                 return "&ERROR_CantFindPin&";
             }
             else
-            {           
+            {
                 string outTempVar = GetCodeTempVar(inPIN.type.PType, inPIN.TempVar_TempVarHolder, false, this, inPIN);
 
                 ////////////
@@ -2353,7 +2225,6 @@
                 /*
                 if (inPIN.TempVar_TempVarHolder.TempVar_Primitive != null || inPIN.type.PType == typeof(string))
                 {
-
                     if (outTempVar == "TempVarIsNotDefined" || outTempVar == "null")
                     {
                         ErrorPinConnection(inPIN);
@@ -2365,7 +2236,6 @@
                 }
                 if (inPIN.TempVar_TempVarHolder.TempVar_TypeType != null || inPIN.TempVar_TempVarHolder.TempVar_TypeType.PType != null)
                 {
-  
                     if(outTempVar == "TempVarIsNotDefined" || outTempVar == "null")
                     {
                         ErrorPinConnection(inPIN);
@@ -2374,7 +2244,7 @@
                     AddNewAssembly(inPIN.TempVar_TempVarHolder.TempVar_TypeType.PType);
 
                     return outTempVar;
-                } 
+                }
                 else
                 {
                     ErrorPinConnection(inPIN);
@@ -2392,15 +2262,10 @@
             inPIN.ErrorPinMessage = message;
             BConsole.CompileLog(message, 2, NodeID);
 
-
-
-
-
             //if(Options.b_ShowDebug)Debug.Log(message);
 
-
             //ErrorNodeType = 2;
             //ErrorNodeMessage = message;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Compilation_Script.cs Editor/m_Compilation_Script.cs
--- .Editor/m_Compilation_Script.cs	2018-06-30 08:59:18.489610400 +0700
+++ Editor/m_Compilation_Script.cs	2018-06-30 09:02:03.827513200 +0700
@@ -1,27 +1,21 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
 using System.Linq;
-using Microsoft.CSharp;
-using System.CodeDom.Compiler;
-using System.Security.Cryptography;
-using System.Threading;
 using System.Reflection;
+using System.Security.Cryptography;
 using System.Text;
+using System.Threading;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public static int _cg_Spacing = 0;
+
     public static string cg_GetSpacing()
     {
-        string spacing = "";
-        for (int i = 0; i < _cg_Spacing; i++)
-            spacing += "\t";
-
-        return spacing;
+        return new string('\t', _cg_Spacing);
     }
 
     private static List<string> usedAssemblies = new List<string>();
@@ -37,24 +31,15 @@
             AssembliesPaths.Add(type.Assembly.Location);
         }
 
+        string addName = type.FullName ?? "";
 
-        if (LocalAsmsContainsType(type))
-        {
-           // return;
-        }
-
-
-        string addName = type.FullName;
-
-        if (type.FullName.Contains("`"))
+        if (addName != null && addName.Contains('`'))
         {
             int indexGen = addName.IndexOf('`');
 
             addName = addName.Substring(0, indexGen);
         }
 
-
-
         int idx = addName.LastIndexOf('.');
 
         if (idx >= 0)
@@ -63,11 +48,10 @@
         if (type.Name == addName)
             return;
 
-
-        if (addName.Contains(typeof(Nottorus).Name))
+        if (addName.Contains("Nottorus"))
             return;
 
-        if (addName.Contains("+"))
+        if (addName.Contains('+'))
             return;
 
         if (!usedAssemblies.Contains(addName))
@@ -81,24 +65,19 @@
         return func.Config.Name + "_TempReturnVar"; ;
     }
 
-    private static string CompiledCode = "";
+    private static StringBuilder CompiledCode = new StringBuilder();
 
     public static int CompilationNumber = 1;
 
-
-
-
-
     public static string CompilationDebugStartDirective = "#if UNITY_EDITOR\r\n#if NottorusDebug";
     public static string CompilationDebugEndDirective = "#endif\r\n#endif";
 
     public void CompileSaveScript()
     {
-        b_UsedStateMachine = false;
-           StartCompileScript = false;
+        // var w = new System.Diagnostics.Stopwatch(); w.Start();
+        StartCompileScript = false;
         CurScript.CompileStage = 2;
         AllowInsertCodeForDebug = true;
-        //SaveScript(false);
         Options.b_DirectTypesLinking = false;
 
         b_SaveWhileCompiling = true;
@@ -111,9 +90,7 @@
             return;
 
         b_HighliteLinksOnce = true;
-
-        //FunctionAllReturn = false;
-
+        
         CurScript.GetAllNodes().ForEach(x => x.UpdateConfig(true));
 
         CompilationNumber++;
@@ -121,10 +98,9 @@
         usedAssemblies = new List<string>();
         AssembliesPaths = new List<string>();
         CompilingScriptTypesVariants = new Dictionary<Type, CompileRenameTypeVariant>();
-        CompiledCode = "";
+        CompiledCode.Length = 0;
         _cg_Spacing = 0;
 
-
         if (CurScript.NamespaceName.Length > 0)
         {
             _cg_Spacing++;
@@ -139,26 +115,26 @@
 
         foreach (ScriptEnum Enum in CurScript.ScriptEnums)
         {
-            CompiledCode += Enum.GetEnumCode();
+            CompiledCode.Append(Enum.GetEnumCode());
         }
 
         if (CurScript.ScriptDelegates.Count > 0)
         {
-            CompiledCode += "\r\n";
+            CompiledCode.AppendLine();
             foreach (ScriptDelegate Deleg in CurScript.ScriptDelegates)
             {
-                CompiledCode += Deleg.GetAttributesCode();
-                CompiledCode += "\r\n" + Deleg.GetDelegCode();
+                CompiledCode.AppendLine(Deleg.GetAttributesCode());
+                CompiledCode.Append(Deleg.GetDelegCode());
             }
         }
 
         if (CurScript.ScriptInterfaces.Count > 0)
         {
-            CompiledCode += "\r\n";
+            CompiledCode.AppendLine();
             foreach (var interf in CurScript.ScriptInterfaces)
             {
-                CompiledCode += interf.GetAttributesCode();
-                CompiledCode += "\r\n" + interf.GetInterfaceCode();
+                CompiledCode.AppendLine(interf.GetAttributesCode());
+                CompiledCode.Append(interf.GetInterfaceCode());
             }
         }
 
@@ -174,7 +150,7 @@
             }
         }
 
-        if (CompiledCode.Contains("&ERROR"))
+        if (CompiledCode.ToString().Contains("&ERROR&"))
         {
             CurScript.CompileStage = 3;
             return;
@@ -183,21 +159,19 @@
         if (CurScript.NamespaceName.Length > 0)
             _cg_Spacing--;
 
-        if (CompThread != null)
-            CompThread.Abort();
-
-        CompThread = new Thread(Precompiler_Save_Thread);
-        CompThread.Priority = Options.ThreadSearchPriority;
-        CompThread.Start();
-
+        Precompiler_Save_Thread();
+        // w.Stop(); Debug.Log("Compilation done: " + w.ElapsedMilliseconds + " ms");
     }
+
     ////////////////////////////////
     public static bool bCompilingScriptTypes = false;
+
     private static Dictionary<Type, CompileRenameTypeVariant> CompilingScriptTypesVariants = new Dictionary<Type, CompileRenameTypeVariant>();
+
     private static CompileRenameTypeVariant AddCompileRenameType(Type type)
     {
         CompileRenameTypeVariant variant;
-        if(!CompilingScriptTypesVariants.TryGetValue(type, out variant))
+        if (!CompilingScriptTypesVariants.TryGetValue(type, out variant))
         {
             variant = new CompileRenameTypeVariant()
             {
@@ -208,11 +182,12 @@
         }
         return variant;
     }
+
     private void CheckRenamePrecompiledTypes()
     {
         var allAssemblies = CompilingScriptTypesVariants.Select(x => x.Key.Assembly).Distinct().ToList();
 
-        foreach(var checkType in CompilingScriptTypesVariants)
+        foreach (var checkType in CompilingScriptTypesVariants)
         {
             var type = checkType.Key;
             var foundTypes = AssembliesContainType(type, allAssemblies);
@@ -221,16 +196,16 @@
             if (foundTypes.Count > 1)
             {
                 checkType.Value.FinalName = RenameType_ForCompilation(type);
-               
+
                 if (Options.bShortTypeNameCompilation_ShowInfo)
                 {
                     string debugStr = "Found same assembly for type <b>" + type.Name + "</b> in: " + Environment.NewLine;
-                    foreach(var fType in foundTypes)
+                    foreach (var fType in foundTypes)
                     {
                         debugStr += "<b>" + fType.Assembly.GetName().Name + "</b> (type " + fType.FullName + ")" + Environment.NewLine;
                     }
                     debugStr += "Renamed to full name: <b>" + checkType.Value.FinalName + "</b>";
-                    if(Options.b_ShowDebug)
+                    if (Options.b_ShowDebug)
                         Debug.Log(debugStr);
                 }
             }
@@ -247,13 +222,12 @@
 
         foreach (var asm in asmbl)
         {
-            results.AddRange(asm.GetTypes().ToList().Where(y => y.Name == type.Name));
+            results.AddRange(asm.GetTypes().Where(y => y.Name == type.Name));
         }
-        
+
         results = results.Distinct().ToList();
 
-        
-        foreach (var ttpe in results.ToList())
+        foreach (var ttpe in results)
         {
             var nested = ttpe.GetNestedTypes();
 
@@ -263,7 +237,7 @@
                     results.Add(mestedType);
             }
         }
-        
+
         return results;
     }
 
@@ -275,201 +249,34 @@
     }
 
     ///////////////////////////////
-
-    public static Thread CompThread = null;
-
-    private static bool isThreadCompiling = false;
+    
     private static int AskOverrideFile_Changed = 0;
     private string assembliesCode = "";
-    private bool b_UsedStateMachine = false;
+    
     private void Precompiler_Save_Thread()
     {
-        isThreadCompiling = true;
         assembliesCode = CheckAssemblies();
 
-
         if (CurScript.b_DebugMode)
         {
             assembliesCode += CompilationDebugStartDirective + "\r\nusing Nottorus_Debug;\r\n" + CompilationDebugEndDirective;
         }
-        if (b_UsedStateMachine)
-        {
-            //assembliesCode += "\r\nusing Nottorus_StateMachine;";
-        }
-        assembliesCode += "\r\n";
-
-
-#if UNITY_EDITOR_OSX
-        if(Options.b_UsePrecompiler)
-        {
-            Options.b_UsePrecompiler = false;
-            EditorOptions.Save();
-        }
-#endif
-        CompilerResults precompilerErrors = null;
-
+        
         string debugDelegCode = "";
-        if (CurScript.b_DebugMode)
-        {
-            debugDelegCode = "#define NottorusDebug\r\n";
-        }
-
-     
-
-        if (Options.b_UsePrecompiler)
-        {
-
-            string compilerCode = CompiledCode;
-
-
-            if (CurScript.NamespaceName.Length > 0)
-            {
-                compilerCode = debugDelegCode + assembliesCode + "\r\nnamespace " + CurScript.NamespaceName + "\r\n{" + CompiledCode;
-                compilerCode += "\r\n}";
-            }
-            else
-            {
-                compilerCode = debugDelegCode + assembliesCode + "\r\n" + CompiledCode;
-            }
-
-
-            compilerCode = compilerCode.Replace("#if UNITY_EDITOR", "#if NottorusDebug");
-
-
-            Dictionary<string, string> providerOptions = new Dictionary<string, string> { { "CompilerVersion", "v3.5" } };
-
-            CompilerParameters compilerParams = new CompilerParameters
-            {
-                GenerateInMemory = true,
-                GenerateExecutable = false,  
-                WarningLevel = 1 
-            };
-
-            if (CurScript.ScriptType == ScriptType.ConsoleApp)
-            {
-                compilerParams.GenerateExecutable = true;
-                compilerParams.OutputAssembly = CurScript.ScriptName + ".exe";
-            }
-
-            compilerParams.IncludeDebugInformation = false;
-
-
-
-
-            if (b_UsedStateMachine)
-            {
-                var csasm = Assembly_CSH;
-
-                if (csasm != null)
-                {
-                    AssembliesPaths.Add(csasm.Location);
-                }
-                else
-                {
-                    BConsole.CompileLog("Can't find location of Assembly-CSharp.dll (no game scripts?) for loading state machine script. Try temporary disable Precompiler in options.", 1);
-                }
-            }
-
-
-
-            Assembly[] ASMBS = AppDomain.CurrentDomain.GetAssemblies();
-            foreach (Assembly asm in ASMBS)
-            {
-                string location = "";
-
-                try
-                {
-                    location = asm.Location;
-                }
-                catch { continue; }
-
-                if(!AssembliesPaths.Contains(location))
-                    AssembliesPaths.Add(asm.Location);
-            }
-
-            foreach (string refAs in AssembliesPaths.ToArray())
-            {
-                compilerParams.ReferencedAssemblies.Add(refAs);
-            }
-
-            try
-            {
-                using (CSharpCodeProvider provider = new CSharpCodeProvider(providerOptions))
-                {
-                    precompilerErrors = provider.CompileAssemblyFromSource(compilerParams, compilerCode);
-                }
-            }
-            catch (Exception e)
-            {
-                if (Options.b_ShowDebug) Debug.Log("Precompiler error: " + e);
-            }
-
-
-
-            bool hasErrors = false;
-
-            if (precompilerErrors != null && precompilerErrors.Errors.Count > 0)
-            {
-                foreach (var error in precompilerErrors.Errors)
-                {
-                    bool b_error = false;
-
-                    string errorInfo = error.ToString();
-
-                    errorInfo = errorInfo.Substring(errorInfo.IndexOf(" : ") + 3);
-
-                    string errorID = errorInfo.Substring(errorInfo.IndexOf(" CS") + 1);
-
-                    errorID = errorID.Substring(0, errorID.IndexOf(":"));
-
-                    CompileErrorID errorName = GetErrorByID(errorID);
-
-                    if (errorInfo.StartsWith("error"))
-                    {
-                        b_error = true;
-                        hasErrors = true;
-                    }
-
-                    if (errorName != null)
-                    {
-                        errorInfo = errorName.Name + " " + errorInfo.Substring(errorInfo.IndexOf(":"));
-
-                        BConsole.CompileLog("Precompiler " + errorInfo, b_error ? 2 : 1, errorName.URL);
-                    }
-                    else
-                    {
-                        BConsole.CompileLog("Precompiler " + errorInfo, b_error ? 2 : 1);
-                    }
-                }
-            }
-
-            isThreadCompiling = false;
-
-            if (hasErrors)
-            {
-                CurScript.CompileStage = 3;
-                return;
-            }
-        }
-
-
-       // CompiledCode = debugDelegCode + assembliesCode + CompiledCode;
-
-
+        
         if (CurScript.NamespaceName.Length > 0)
         {
-            CompiledCode = debugDelegCode + assembliesCode + "\r\nnamespace " + CurScript.NamespaceName + "\r\n{" + CompiledCode + "\r\n}";
+            CompiledCode.Insert(0, debugDelegCode + assembliesCode + "\r\nnamespace " + CurScript.NamespaceName + "\r\n{");
+            CompiledCode.Append(CompiledCode + "\r\n}");
         }
         else
         {
-            CompiledCode = debugDelegCode + assembliesCode + CompiledCode;
+            CompiledCode.Insert(0, debugDelegCode + assembliesCode);
         }
-           
-
-
-        isThreadCompiling = false;
-
 
+        // EOF blank line. Good for Git.
+        CompiledCode.AppendLine();
+        
         bool allowCompile = true;
 
         string FilePath = CurScript.ScriptFileName + ".cs";
@@ -477,7 +284,7 @@
         {
             string scriptFileCode = File.ReadAllText(FilePath);
 
-            if (scriptFileCode.Replace("\r\n", "").Replace("\r", "").Replace("\n", "") == (CheckSum + CompiledCode).Replace("\r\n", "").Replace("\r", "").Replace("\n", ""))
+            if (scriptFileCode == CompiledCode.ToString())
                 allowCompile = false;
 
             if (allowCompile && ModifiedOutside(scriptFileCode))
@@ -486,19 +293,22 @@
             }
         }
 
-        while (AskOverrideFile_Changed == 1) { }
+        if (AskOverrideFile_Changed == 1)
+        {
+            if (!EditorUtility.DisplayDialog("Override file?", "The script was modified outside the plugin. Do you want to override it?", "Override", "Cancel"))
+                AskOverrideFile_Changed = 2;
+            else
+                AskOverrideFile_Changed = 0;
+        }
 
         if (AskOverrideFile_Changed == 2)
         {
-            CompThread.Abort();
-            CompThread = null;
             return;
         }
 
-
-
         if (allowCompile)
         {
+            CurScript.LastSavedHash = GetHash(CompiledCode.ToString());
             SaveScript(true, true);
             SaveCompiledCode(FilePath);
         }
@@ -507,62 +317,20 @@
             SaveScript(true);
             InfoMessages.ShowMessage("No changes to recompile..");
         }
-        
-        CompThread.Abort();
-        CompThread = null;
     }
 
-    private const string HeshPrefix = "MD5Hash:";
-
     //0 - undefined, 1 - equal, 2 - modified outside
     private bool ModifiedOutside(string file)
     {
-        if (file.Contains(HeshPrefix))
-        {
-            string fileHash = "";
-
-            try
-            {
-                fileHash = file.Substring(file.IndexOf(HeshPrefix) + HeshPrefix.Length);
-                fileHash = fileHash.Substring(0, fileHash.IndexOf(";"));
-            }
-            catch
-            {
-                BConsole.EditorLog("Can't read (check) file hash at the first line of script file. (not critical)", 0);
-            }
-
-            if (fileHash.Length == 32)
-            {
-                string chsum = CheckSum;
-
-                string scriptHash = file.Substring(file.IndexOf(chsum) + chsum.Length);
-                scriptHash = scriptHash.Substring(0, scriptHash.Length - 2).Replace("\r\n", "").Replace("\r", "").Replace("\n", "");
-
-                scriptHash = GetHash(scriptHash);
-
-         
-
-                StringComparer comparer = StringComparer.OrdinalIgnoreCase;
-
-                return comparer.Compare(scriptHash, fileHash) != 0;
-            }
-            else
-            {
-                BConsole.EditorLog("Can't read (check) file hash at the first line of script file. (not critical)", 0);
-            }
-
-        }
-
-        return false;
+        return GetHash(file) != CurScript.LastSavedHash;
     }
 
-
     private string GetHash(string scriptData)
     {
         string hash = "";
         using (MD5 md5Hash = MD5.Create())
         {
-            byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(scriptData.Replace("\r\n", "").Replace("\r", "").Replace("\n", "")));
+            byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(scriptData.Trim()));
             StringBuilder sBuilder = new StringBuilder();
 
             for (int i = 0; i < data.Length; i++)
@@ -574,43 +342,26 @@
         return hash;
     }
 
-
     ///////////////////////////////////////////////////////////////////////////////////
 
-
-    private string CheckSum
-    {
-        get
-        {
-            return "//" + HeshPrefix + GetHash(CompiledCode) + ";\r\n";
-        }
-    }
-
     private void SaveCompiledCode(string FilePath)
     {
         var sr = File.CreateText(FilePath);
-
-        //Write hash
-        CompiledCode = CheckSum + CompiledCode;
-
-
-        sr.WriteLine(CompiledCode);
+        
+        sr.Write(CompiledCode);
         sr.Close();
         InfoMessages.ShowMessage("Succesfully compiled!");
 
-
         flag_ReimportAssets = true;
-        //AssetDatabase.ImportAsset(CurScript.ScriptFileName + ".cs", ImportAssetOptions.ForceUpdate);
     }
 
-    
     private string CheckAssemblies()
     {
         string assembUsing = "";
 
         foreach (string assem in usedAssemblies)
         {
-            if (assem == "Assembly-CSharp" || assem == "mscorlib")
+            if (assem == "Assembly-CSharp" || assem == "mscorlib" || string.IsNullOrEmpty(assem))
                 continue;
 
             if (assem == "mscorlib")
@@ -631,7 +382,6 @@
     //private string VarsCheck = "";
     //private byte[] dVars = new byte[0];
 
-       
     private void CompileClass(ScriptClass clas)
     {
         /*
@@ -641,12 +391,12 @@
 
            if (string.IsNullOrEmpty(finalString))
            {
-               CompiledCode += "&ЕRROR&";
+               CompiledCode.Append("&ЕRROR&");
                //Debug.Log("string.IsNullOrEmpty(finalString)");
                return;
            }
-           string num = new string((from c in VarsCheck where char.IsDigit(c) select c).ToArray());
-           string num2 = new string((from c in finalString where char.IsDigit(c) select c).ToArray());
+           string num = new string((from c in VarsCheck where char.IsDigit(c) select c));
+           string num2 = new string((from c in finalString where char.IsDigit(c) select c));
 
            int NumP = -1;
            int.TryParse(num, out NumP);
@@ -660,28 +410,51 @@
 
                if (NumD != NumP)
                {
-                   CompiledCode += "&ЕRROR&";
+                   CompiledCode.Append("&ЕRROR&");
 
                    //Debug.Log("NumD: " + NumD);//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    //Debug.Log("NumP: " + NumP);
                    return;
                }
-
            }
        }
        else
        {
            //Debug.Log("dVars != null && dVars.Length > 0 && VarsCheck != null && VarsCheck.Length > 0");
-           CompiledCode += "&ЕRROR&";
+           CompiledCode.Append("&ЕRROR&");
            return;
        }
 #endif
        */
 
         CurrCompileClass = clas;
-        CheckIndexersParams = new List<string>();
+        CheckIndexersParams.Clear();
         clas.CheckModifiers();
-      
+        CompileClassHeader(clas);
+
+        _cg_Spacing++;
+
+        CompileClassConstructors(clas);
+        CompileClassVariables(clas);
+
+        CompileClassEvents(clas);
+
+        CompileClassProperties(clas);
+        CompileClassFunctions(clas);
+
+        foreach (ScriptClass nestClass in clas.NestedClasses)
+            CompileClass(nestClass);
+
+        if (clas.SMachineSaveData != null)
+        {
+            CompiledCode.Append(clas.SMachineSaveData.GetCode());
+        }
+        _cg_Spacing--;
+        CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
+    }
+
+    private static void CompileClassHeader(ScriptClass clas)
+    {
         string classInher = clas.GetInheritName(false);
 
         string interfacesInher = clas.GetInheritInterfaces();
@@ -694,16 +467,11 @@
             }
         }
 
-
-
-
-
         if (classInher != "")
         {
             classInher = " : " + classInher;
         }
 
-
         if (interfacesInher != "")
         {
             if (classInher != "")
@@ -712,49 +480,19 @@
                 classInher = " : " + interfacesInher;
         }
 
-
         if (clas.InheritClassBType != null)
             AddNewAssembly(clas.InheritClassBType.PType);
 
-        CompiledCode += clas.GetAttributesCode();
-
+        CompiledCode.Append(clas.GetAttributesCode());
 
         string ClassStructSwitch = clas.StructType ? "struct" : "class";
 
-
-        CompiledCode += "\r\n" + cg_GetSpacing() + clas.GetModifiers() + " " + ClassStructSwitch + " " + clas.Config.Name + clas.GetGenericArgs() + classInher;// + " : MonoBehaviour";
-        CompiledCode += "\r\n" + cg_GetSpacing() + "{";
-        _cg_Spacing++;
-        //CompiledCode += "\r\n" + cg_GetSpacing() + "public BP_Utils SeqInvoke = new BP_Utils();";
-
-
-
-        CompileClassConstructors(clas);
-        CompileClassVariables(clas);
-
-        CompileClassEvents(clas);
-
-        CompileClassProperties(clas);
-        CompileClassFunctions(clas);
-
-     
-
-        foreach (ScriptClass nestClass in clas.NestedClasses)
-            CompileClass(nestClass);
-
-
-        if (clas.SMachineSaveData != null)
-        {
-            b_UsedStateMachine = true;
-               CompiledCode += clas.SMachineSaveData.GetCode();
-        }
-        _cg_Spacing--;
-        CompiledCode += "\r\n" + cg_GetSpacing() + "}";
+        CompiledCode.Append("\r\n" + cg_GetSpacing() + clas.GetModifiers() + " " + ClassStructSwitch + " " + clas.Config.Name + clas.GetGenericArgs() + classInher);// + " : MonoBehaviour";
+        CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
     }
 
-
-
     public static BaseScriptObject CurScriptObj_Compile = null;
+
     private void CompileClassConstructors(ScriptClass clas)
     {
         CurScriptObj_Compile = clas;
@@ -777,7 +515,7 @@
 
             string CtcyrAdd = "'" + args + "'";
 
-            List<Node> EntryFuncNodes = Constr.Nodes.FindAll(x => x.NodeType == NodeTypeE.ConstructorEntry).ToList();
+            List<Node> EntryFuncNodes = Constr.Nodes.FindAll(x => x.NodeType == NodeTypeE.ConstructorEntry);
 
             if (!CtctrsTest.Contains(CtcyrAdd))
             {
@@ -785,23 +523,18 @@
             }
             else
             {
-                BConsole.EditorLog("Class " + clas.Config.Name + " allready have a constructor with same parameters! Delete same constructors or change parameters! Skipping this Constructor..", 2);//, EntryFuncNodes[0].NodeID
+                BConsole.EditorLog("Class " + clas.Config.Name + " already have a constructor with same parameters! Delete same constructors or change parameters! Skipping this Constructor..", 2);//, EntryFuncNodes[0].NodeID
                 continue;
             }
 
-
-
-
-             
-            CompiledCode += Constr.GetAttributesCode();
-            CompiledCode += "\r\n" + cg_GetSpacing() + Constr.GetModifiers() + clas.Config.Name + "(" + Constr.GetFuncArguments() + ")";// + " : MonoBehaviour";
-
+            CompiledCode.Append(Constr.GetAttributesCode());
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + Constr.GetModifiers() + clas.Config.Name + "(" + Constr.GetFuncArguments() + ")");// + " : MonoBehaviour");
 
             if (Constr.m_ExecuteBase > 0)
             {
                 Node executeThisConstrNode;
 
-                if(Constr.m_ExecuteBase == 1)
+                if (Constr.m_ExecuteBase == 1)
                     executeThisConstrNode = Constr.Nodes.Find(x => x.DNodeType == DefNodeType.ExecBConstr);
                 else
                     executeThisConstrNode = Constr.Nodes.Find(x => x.DNodeType == DefNodeType.ExeThisBConstr);
@@ -811,9 +544,9 @@
                     if (executeThisConstrNode.Config.NodeRefType != null && executeThisConstrNode.Config.NodeRefType.PType != typeof(ErrorClassType) && executeThisConstrNode.Config.NodeRefType.PType != typeof(ErrorTypePin))
                     {
                         if (Constr.m_ExecuteBase == 1)
-                            CompiledCode += " : base(";
+                            CompiledCode.Append(" : base(");
                         else
-                            CompiledCode += " : this(";
+                            CompiledCode.Append(" : this(");
 
                         bool first = true;
                         foreach (var pin in executeThisConstrNode.Config.InPins)
@@ -821,33 +554,27 @@
                             if (first)
                                 first = false;
                             else
-                                CompiledCode += ", ";
+                                CompiledCode.Append(", ");
 
-                            CompiledCode += executeThisConstrNode.GetInPinCode(pin.PinID);
+                            CompiledCode.Append(executeThisConstrNode.GetInPinCode(pin.PinID));
                         }
 
-                        CompiledCode += ")";
+                        CompiledCode.Append(")");
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Constructor has 'Execute base/this' option, but can't find type of constructor. Skipping option..");
+                        if (Options.b_ShowDebug) Debug.Log("Constructor has 'Execute base/this' option, but can't find type of constructor. Skipping option..");
                     }
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Constructor has 'Execute base/this' option, but can't find 'Execute base/this' node. Skipping option..");
+                    if (Options.b_ShowDebug) Debug.Log("Constructor has 'Execute base/this' option, but can't find 'Execute base/this' node. Skipping option..");
                 }
             }
 
-
-
-
-
-
-            CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
             _cg_Spacing++;
 
-
             string funcVariables = "";
 
             foreach (ScriptLocalVariable fVar in Constr.LocalVariables)
@@ -860,7 +587,6 @@
 
                 AddNewAssembly(VarType);
 
-
                 string vTempVar = GetCodeTempVar(VarType, fVar.TempVar, true, null, null);
 
                 funcVariables += "\r\n" + cg_GetSpacing() + RenameType_ForCompilation(VarType) + " " + fVar.Config.Name;
@@ -871,47 +597,42 @@
                 funcVariables += ";";
             }
 
-
             if (funcVariables.Length > 3)
-                CompiledCode += funcVariables + "\r\n";
-
+                CompiledCode.Append(funcVariables + "\r\n");
 
             if (EntryFuncNodes.Count > 1)
             {
-                if(Options.b_ShowDebug)Debug.Log("Too much start nodes: " + EntryFuncNodes.Count);
+                if (Options.b_ShowDebug) Debug.Log("Too much start nodes: " + EntryFuncNodes.Count);
             }
             else if (EntryFuncNodes.Count == 1)
             {
-                CompiledCode += EntryFuncNodes[0].GetNodeCode(0);
+                CompiledCode.Append(EntryFuncNodes[0].GetNodeCode(0));
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Error: No entry node for constructor!");
+                if (Options.b_ShowDebug) Debug.Log("Error: No entry node for constructor!");
             }
 
             _cg_Spacing--;
-            CompiledCode += "\r\n" + cg_GetSpacing() + "}";
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
         }
     }
 
-
     private List<string> CheckIndexersParams = new List<string>();
 
     private void CompileClassProperties(ScriptClass clas)
     {
-        if(clas.ScriptProperties.Count > 0)
-            CompiledCode += "\r\n";
+        if (clas.ScriptProperties.Count > 0)
+            CompiledCode.Append("\r\n");
 
         foreach (ScriptProperty Prop in clas.ScriptProperties)
         {
             CurScriptObj_Compile = Prop;
 
-      
             if (Prop.IsInherited && !Prop.IsInheritedFromInterface)
                 continue;
 
-
-            if(Prop.m_Indexer)
+            if (Prop.m_Indexer)
             {
                 string propParams = Prop.GetIndexerParamTypes;
 
@@ -921,8 +642,9 @@
                 }
                 else
                 {
-                    BConsole.EditorLog("Indexer [" + propParams + "]  is allready defined in class '" + CurrCompileClass.Config.Name + "'. Change parameters of indexer.", 2);
-                    CompiledCode = "&ERROR&";
+                    BConsole.EditorLog("Indexer [" + propParams + "]  is already defined in class '" + CurrCompileClass.Config.Name + "'. Change parameters of indexer.", 2);
+                    CompiledCode.Length = 0;
+                    CompiledCode.Append( "&ERROR&");
                     return;
                 }
             }
@@ -939,7 +661,6 @@
 
                 string vTempVar = GetCodeTempVar(PropType, fVar.TempVar, true, null, null);
 
-
                 propLocalVars_Get += "\r\n" + cg_GetSpacing() + RenameType_ForCompilation(PropType) + " " + fVar.Config.Name;
 
                 if (vTempVar != "TempVarIsNotDefined")
@@ -947,7 +668,6 @@
                 propLocalVars_Get += ";";
             }
 
-
             string propLocalVars_Set = "";
             foreach (ScriptLocalVariable fVar in Prop.Drawable_Set.LocalVariables)
             {
@@ -957,7 +677,6 @@
 
                 string vTempVar = GetCodeTempVar(PropType, fVar.TempVar, true, null, null);
 
-
                 propLocalVars_Set += "\r\n" + cg_GetSpacing() + RenameType_ForCompilation(PropType) + " " + fVar.Config.Name;
 
                 if (vTempVar != "TempVarIsNotDefined")
@@ -967,26 +686,22 @@
             _cg_Spacing--;
             _cg_Spacing--;
 
-
-
-
-
             BConsole.SetDrawable(DrawableType.PropertyGet, Prop.PropertyID);
 
             Type VarType = Prop.Config.NodeRefType.PType;
 
             AddNewAssembly(VarType);
 
-            CompiledCode += Prop.GetAttributesCode();
-            CompiledCode += "\r\n" + cg_GetSpacing() + Prop.GetPropModifiers() + " " + RenameType_ForCompilation(VarType) + " ";
+            CompiledCode.Append(Prop.GetAttributesCode());
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + Prop.GetPropModifiers() + " " + RenameType_ForCompilation(VarType) + " ");
 
-            if(Prop.m_Indexer)
+            if (Prop.m_Indexer)
             {
-                CompiledCode += "this[" + Prop.GetPropIndexersCode() + "]";
+                CompiledCode.Append("this[" + Prop.GetPropIndexersCode() + "]");
             }
             else
             {
-                CompiledCode += Prop.Config.Name;
+                CompiledCode.Append(Prop.Config.Name);
             }
 
             _cg_Spacing++;
@@ -1002,24 +717,22 @@
             _cg_Spacing--;
             _cg_Spacing--;
 
-
             BConsole.SetDrawable(DrawableType.PropertySet, Prop.PropertyID);
 
             if (PropGetCode.Length == 0 && PropSetCode.Length == 0 && Prop._Get && Prop._Set)
             {
-                if(Prop.m_Indexer)
+                if (Prop.m_Indexer)
                 {
                     BConsole.EditorLog("Indexer [" + Prop.GetPropIndexersCode() + "] of class '" + CurrCompileClass.Config.Name + "' must have a body. Add nodes to get/set property code.", 2);
-                    CompiledCode = "&ERROR&";
+                    CompiledCode.Length = 0;
+                    CompiledCode.Append("&ERROR&");
                     return;
                 }
-                CompiledCode += " { get; set; }";
+                CompiledCode.Append(" { get; set; }");
                 continue;
             }
-       
-
 
-            CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
             _cg_Spacing++;
 
             if (Prop._Get)
@@ -1033,80 +746,73 @@
                         else
                             BConsole.CompileLog("Property '" + Prop.Config.Name + "': Not all code paths return a value. Open this property(Get) and use 'Sequence diagram' tool to found source of problem.", 2);
                     }
-                    CompiledCode += "&ERROR&";
+                    CompiledCode.Append("&ERROR&");
                     return;
                 }
 
                 /*
                 FuncRetCheck.Clear();
                 FuncRetCheck.AllCodeMustReturn = true;
-             
-             
+
                 Ret_IterCheckCount = 0;
                 FuncRetCheck.Draw(Vector2.zero);
 
                 if (FuncRetCheck.CheckState == 2 || FuncRetCheck.CheckState == 3)
                 {
                     //BConsole.CompileLog("Property '" + Prop.Config.Name + "'.Get: Not all code paths return a value. Open this property and use 'Sequence diagram' tool to found source of problem.", 2);
-                    //CompiledCode += "&ERROR&";
+                    //CompiledCode.Append("&ERROR&");
                     //return;
                 }
                 */
 
-                CompiledCode += "\r\n" + cg_GetSpacing() + "get";
-                CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "get");
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
                 _cg_Spacing++;
 
-                CompiledCode += propLocalVars_Get;
+                CompiledCode.Append(propLocalVars_Get);
 
-                CompiledCode += PropGetCode;
+                CompiledCode.Append(PropGetCode);
                 _cg_Spacing--;
-                CompiledCode += "\r\n" + cg_GetSpacing() + "}";
-             
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
             }
 
-
-
             if (Prop._Set)
             {
-                CompiledCode += "\r\n" + cg_GetSpacing() + "set";
-                CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "set");
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
                 _cg_Spacing++;
 
-                CompiledCode += propLocalVars_Set;
+                CompiledCode.Append(propLocalVars_Set);
 
-                CompiledCode += PropSetCode;
+                CompiledCode.Append(PropSetCode);
 
                 _cg_Spacing--;
-                CompiledCode += "\r\n" + cg_GetSpacing() + "}";
-                
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
             }
             _cg_Spacing--;
-            CompiledCode += "\r\n" + cg_GetSpacing() + "}";
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
         }
     }
 
-
     private bool StateMachine_Initialised = false;
     private bool StateMachine_Updating = false;
 
-
     private void CompileClassFunctions(ScriptClass clas)
     {
-        if(clas.Functions.Count > 0)
-            CompiledCode += "\r\n";
+        if (clas.Functions.Count > 0)
+            CompiledCode.Append("\r\n");
 
         StateMachine_Initialised = false;
         StateMachine_Updating = false;
 
-        List<string> CheckFuncEq = new List<string>(); 
+        List<string> CheckFuncEq = new List<string>();
 
         foreach (ScriptFunction func in clas.Functions)
         {
-            if(func.m_Extern)
+            if (func.m_Extern)
             {
-                CompiledCode += func.GetAttributesCode();
-                CompiledCode += "\r\n" + cg_GetSpacing() + func.GetFuncModifiers() + func.FuncReturnTypeName + " " + func.Config.Name + "(" + func.GetFuncArguments() + ");";
+                CompiledCode.Append(func.GetAttributesCode());
+                CompiledCode.Append("\r\n" + cg_GetSpacing() + func.GetFuncModifiers() + func.FuncReturnTypeName + " " + func.Config.Name + "(" + func.GetFuncArguments() + ");");
                 continue;
             }
 
@@ -1114,7 +820,6 @@
 
             BConsole.SetDrawable(DrawableType.Method, func.Obj_ID);
 
-
             if (func.IsInherited && !func.IsInheritedFromInterface)
             {
                 if (!func.AllowNodes_Inherited)
@@ -1126,91 +831,82 @@
                     continue;
                 }
             }
-     
-         
-
 
             string funcCode = func.GetCompileCode();
 
-
             if (!func.CheckReturn(false))
             {
-                if(!m_ReturnChecker.ClosedCycleDetected)
+                if (!m_ReturnChecker.ClosedCycleDetected)
                     BConsole.CompileLog("Function '" + func.Config.Name + "': Not all code paths return a value. Open this function and use 'Sequence diagram' tool to found source of problem.", 2);
-                CompiledCode += "&ERROR&";
+                CompiledCode.Append("&ERROR&");
                 return;
             }
 
-            foreach(var pin in func.Config.InPins)
+            foreach (var pin in func.Config.InPins)
             {
                 var foundSameNameVarAsParam = func.LocalVariables.Find(x => x.Config.Name == pin.PinName);
 
-                if(foundSameNameVarAsParam != null)
+                if (foundSameNameVarAsParam != null)
                 {
                     BConsole.CompileLog("Function '" + func.Config.Name + "' can't have local variable named same as parameter name. Rename parameter or local variable: " + pin.PinName, 2);
-                    CompiledCode += "&ERROR&";
+                    CompiledCode.Append("&ERROR&");
                 }
             }
 
-            CompiledCode += func.GetAttributesCode();
+            CompiledCode.Append(func.GetAttributesCode());
 
             var gArgs = func.GetGenericArgs();
             var args = func.GetFuncArguments();
 
             string checkEqFunc = func.Config.Name + gArgs + "(" + args + ")";
 
-            if(CheckFuncEq.Contains(checkEqFunc))
+            if (CheckFuncEq.Contains(checkEqFunc))
             {
                 BConsole.CompileLog("Function dublicate: Class already contain function: '" + checkEqFunc + "'. Rename the function or change its arguments.", 2);
-                CompiledCode += "&ERROR&";
+                CompiledCode.Append("&ERROR&");
                 return;
             }
             CheckFuncEq.Add(checkEqFunc);
 
-            CompiledCode += "\r\n" + cg_GetSpacing() + func.GetFuncModifiers() + func.FuncReturnTypeName + " " + checkEqFunc;
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + func.GetFuncModifiers() + func.FuncReturnTypeName + " " + checkEqFunc);
 
-            if(func.m_StaticVirtOvverAbstract == 4)
+            if (func.m_StaticVirtOvverAbstract == 4)
             {
-                CompiledCode += ";";
+                CompiledCode.Append(";");
                 continue;
             }
 
-            CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
             _cg_Spacing++;
 
-
             if (CurrCompileClass.SMachineSaveData != null && CurrCompileClass.IsMonobehaviour)
             {
                 if (func.Config.Name == "Update")
                 {
                     StateMachine_Updating = true;
-                    CompiledCode += "\r\n" + cg_GetSpacing() + NSM_Editor.SM_Name + "." + NSM_Editor.SM_UpdateName + "();";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + NSM_Editor.SM_Name + "." + NSM_Editor.SM_UpdateName + "();");
                 }
                 else if (func.Config.Name == "Start")
                 {
                     StateMachine_Initialised = true;
-                    CompiledCode += "\r\n" + cg_GetSpacing() + NSM_Editor.SM_InitName + "();";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + NSM_Editor.SM_InitName + "();");
                 }
             }
 
-            CompiledCode += CompileLocalVars(func.LocalVariables);
+            CompiledCode.Append(CompileLocalVars(func.LocalVariables));
 
-   
             //FunctionStartNode = EntryFuncNodes[0];
-            CompiledCode += funcCode;
-
+            CompiledCode.Append(funcCode);
 
             if (func.Config.OutPins.Count > 0)
             {
-                //CompiledCode += "\r\n" + cg_GetSpacing() + "return " + GetFuncTempVarName(func) + ";";
+                //CompiledCode.Append("\r\n" + cg_GetSpacing() + "return " + GetFuncTempVarName(func) + ";");
             }
 
-
             _cg_Spacing--;
-            CompiledCode += "\r\n" + cg_GetSpacing() + "}";
-
-            //Options.b_CompileEmptyFunctions || 
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
 
+            //Options.b_CompileEmptyFunctions ||
         }
 
         if (CurrCompileClass.SMachineSaveData != null)
@@ -1219,25 +915,25 @@
             {
                 if (!StateMachine_Updating)
                 {
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "void Update()";
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "void Update()");
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
                     _cg_Spacing++;
 
-                    CompiledCode += "\r\n" + cg_GetSpacing() + NSM_Editor.SM_Name + "." + NSM_Editor.SM_UpdateName + "();";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + NSM_Editor.SM_Name + "." + NSM_Editor.SM_UpdateName + "();");
 
                     _cg_Spacing--;
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "}";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
                 }
                 if (!StateMachine_Initialised)
                 {
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "void Start()";
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "{";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "void Start()");
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "{");
                     _cg_Spacing++;
 
-                    CompiledCode += "\r\n" + cg_GetSpacing() + NSM_Editor.SM_InitName + "();";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + NSM_Editor.SM_InitName + "();");
 
                     _cg_Spacing--;
-                    CompiledCode += "\r\n" + cg_GetSpacing() + "}";
+                    CompiledCode.Append("\r\n" + cg_GetSpacing() + "}");
                 }
             }
             else
@@ -1256,11 +952,10 @@
 
             //int isedCount = CurClass.UsedVarNodesCount(fVar);
             //if (isedCount == 0)
-             //   continue;
+            //   continue;
 
             AddNewAssembly(VarType);
 
-
             string vTempVar = GetCodeTempVar(VarType, fVar.TempVar, true, null, null);
 
             funcVariables += "\r\n" + cg_GetSpacing() + RenameType_ForCompilation(VarType) + " " + fVar.Config.Name;
@@ -1293,24 +988,20 @@
 
             AddNewAssembly(VarType);
 
-
-
-            CompiledCode += sVar.GetAttributesCode();
-            CompiledCode += "\r\n" + cg_GetSpacing() + sVar.GetVarModifiers() + " " + RenameType_ForCompilation(VarType) + " " + sVar.Config.Name;
+            CompiledCode.Append(sVar.GetAttributesCode());
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + sVar.GetVarModifiers() + " " + RenameType_ForCompilation(VarType) + " " + sVar.Config.Name);
 
             if (!clas.StructType)
             {
                 string vTempVar = GetCodeTempVar(VarType, sVar.TempVar, true, null, null);
                 if (vTempVar != "TempVarIsNotDefined")
-                    CompiledCode += " = " + vTempVar;
+                    CompiledCode.Append(" = " + vTempVar);
             }
 
-            CompiledCode += ";";
+            CompiledCode.Append(";");
         }
     }
 
-
-
     private void CompileClassEvents(ScriptClass clas)
     {
         foreach (ScriptClassEvent sVar in clas.ClassEvents)
@@ -1326,30 +1017,24 @@
 
             AddNewAssembly(VarType);
 
-
-
-            CompiledCode += sVar.GetAttributesCode();
-            CompiledCode += "\r\n" + cg_GetSpacing() + sVar.GetVarModifiers() + " event " + RenameType_ForCompilation(VarType) + " " + sVar.Config.Name;
+            CompiledCode.Append(sVar.GetAttributesCode());
+            CompiledCode.Append("\r\n" + cg_GetSpacing() + sVar.GetVarModifiers() + " event " + RenameType_ForCompilation(VarType) + " " + sVar.Config.Name);
 
             if (!clas.StructType)
             {
                 string vTempVar = GetCodeTempVar(VarType, sVar.TempVar, true, null, null);
                 if (vTempVar != "TempVarIsNotDefined")
-                    CompiledCode += " = " + vTempVar;
+                    CompiledCode.Append(" = " + vTempVar);
             }
 
-            CompiledCode += ";";
+            CompiledCode.Append(";");
         }
     }
 
-
-
-
     private bool CheckMonobeh()
     {
         List<ScriptClass> MonobClasses = CurScript.GetAllClasses().FindAll(x => x.IsMonobehaviour);
 
-
         if (MonobClasses.Count > 1)
         {
             BConsole.EditorLog("You cannot create more than one MonoBehaviour class in script!", 2);
@@ -1373,5 +1058,4 @@
 
         return true;
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_CompileErrorID.cs Editor/m_CompileErrorID.cs
--- .Editor/m_CompileErrorID.cs	2018-06-30 08:59:18.492611600 +0700
+++ Editor/m_CompileErrorID.cs	2018-06-30 09:02:03.829513100 +0700
@@ -1,17 +1,8 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-
+﻿using System.Collections.Generic;
+using UnityEditor;
 
 public partial class Nottorus : EditorWindow
 {
-
     private class CompileErrorID
     {
         public CompileErrorID(string URL, string ID, string Name)
@@ -20,6 +11,7 @@
             this.Name = Name;
             this.URL = URL;
         }
+
         public string ID = "";
         public string Name = "";
         public string URL = "";
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ConsoleWindow.cs Editor/m_ConsoleWindow.cs
--- .Editor/m_ConsoleWindow.cs	2018-06-30 08:59:18.495612100 +0700
+++ Editor/m_ConsoleWindow.cs	2018-06-30 09:02:03.830514100 +0700
@@ -1,15 +1,15 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
+﻿using System.Collections.Generic;
 using System.Linq;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
-
     public class BConsole
     {
-        public BConsole() { }
+        public BConsole()
+        {
+        }
 
         public bool b_Active = false;
         public static float Width = 300;
@@ -18,7 +18,6 @@
 
         private static DrawableIdent DrawTable = new DrawableIdent();
 
-
         public static void SetDrawable(DrawableType drawType, int windowID)
         {
             DrawTable.DrawType = drawType;
@@ -27,29 +26,24 @@
 
         public List<ConsoleMessage> Messages = new List<ConsoleMessage>();
 
-        public Rect WIndowDrawRect = CreateRect();
-        public Rect LabelRect = CreateRect();
+        public Rect WIndowDrawRect = new Rect();
+        public Rect LabelRect = new Rect();
+
         public void Draw()
         {
-
             LerpHeight = Mathf.Lerp(LerpHeight, b_Active ? Mathf.Clamp(DrawPos, 0, BPE.position.height / 3) : 20, 0.04f);
 
             if (CurScript == null)
             {
                 Width = BPE.position.width;
-                WIndowDrawRect = CreateRect(0, BPE.position.height - LerpHeight, Width, LerpHeight);
+                WIndowDrawRect = new Rect(0, BPE.position.height - LerpHeight, Width, LerpHeight);
             }
             else
             {
                 Width = BPE.position.width - DetailsRect.width - 3;
-                WIndowDrawRect = CreateRect(DetailsRect.width + 2, BPE.position.height - LerpHeight, Width, LerpHeight);
+                WIndowDrawRect = new Rect(DetailsRect.width + 2, BPE.position.height - LerpHeight, Width, LerpHeight);
             }
 
-
-
-
-
-
             if (_LMB_Down || _RMB_Down)
             {
                 if (WIndowDrawRect.Contains(Event.current.mousePosition))
@@ -59,18 +53,16 @@
                 }
                 else
                 {
-
                 }
             }
 
-            LabelRect = CreateRect(WIndowDrawRect.x + 170, WIndowDrawRect.y, Width - 170, 20);
+            LabelRect = new Rect(WIndowDrawRect.x + 170, WIndowDrawRect.y, Width - 170, 20);
 
             if (_LMB_Down && LabelRect.Contains(Event.current.mousePosition))
                 b_Active = !b_Active;
 
             GUI.Window(10, WIndowDrawRect, ConsoleWindowFunction, "", Res.EmptyStyle);
         }
-         
 
         private float DrawPos = 20;
 
@@ -80,21 +72,20 @@
 
         void ConsoleWindowFunction(int windowID)
         {
-            WIndowDrawRect = CreateRect(0, 0, Width, LerpHeight);
+            WIndowDrawRect = new Rect(0, 0, Width, LerpHeight);
 
-            Graphics.DrawTexture(WIndowDrawRect, Res.Foldout_Items_BG, 10, 10, 10, 10);
+            DrawTexture(WIndowDrawRect, Res.Foldout_Items_BG, 10, 10, 10, 10);
 
-            LabelRect = CreateRect(0, 0, Width, 20);
+            LabelRect = new Rect(0, 0, Width, 20);
 
-            Graphics.DrawTexture(LabelRect, Res.Foldout_BG, 10, 10, 10, 10);
+            DrawTexture(LabelRect, Res.Foldout_BG, 10, 10, 10, 10);
 
             string labelName = "Console";
             float labelOffset = CalcStringPixelsX(labelName, Res.BigWindowLabel);
-            Rect labelRect = CreateRect(Width / 2 - labelOffset / 2, 1, 400, 20);
+            Rect labelRect = new Rect(Width / 2 - labelOffset / 2, 1, 400, 20);
             GUI.Label(labelRect, labelName, Res.BigWindowLabel);
 
-            labelRect = CreateRect(5, 2, 45, 16);
-
+            labelRect = new Rect(5, 2, 45, 16);
 
             //////////////////////////////////////////////////////////////////////////
             if (GUI.Button(labelRect, "Clear", Res.ButtonSimple))
@@ -108,14 +99,14 @@
 
             labelRect.y += 1;
 
-            Rect buttonToggleRect = CreateRect(labelRect.x - 2, labelRect.y - 1, 35, 18);
+            Rect buttonToggleRect = new Rect(labelRect.x - 2, labelRect.y - 1, 35, 18);
             Options.CMSG_Hide_Info = GUI.Toggle(buttonToggleRect, Options.CMSG_Hide_Info, "", Res.BottonMsdSwitch);
 
             EditorGUIUtility.AddCursorRect(buttonToggleRect, MouseCursor.Link);
 
             labelRect.width = 15;
             labelRect.height = 15;
-            Graphics.DrawTexture(labelRect, Res.ConsoleIcon_Info);
+            DrawTexture(labelRect, Res.ConsoleIcon_Info);
             labelRect.x += labelRect.width;
             GUI.Label(labelRect, m_infoCount + "", Res.Label);
 
@@ -123,32 +114,31 @@
 
             labelRect.x += labelRect.width + 7;
 
-            buttonToggleRect = CreateRect(labelRect.x - 2, labelRect.y - 1, 35, 18);
+            buttonToggleRect = new Rect(labelRect.x - 2, labelRect.y - 1, 35, 18);
             Options.CMSG_Hide_Warn = GUI.Toggle(buttonToggleRect, Options.CMSG_Hide_Warn, "", Res.BottonMsdSwitch);
 
             EditorGUIUtility.AddCursorRect(buttonToggleRect, MouseCursor.Link);
 
-             
             labelRect.width = 15;
             labelRect.height = 15;
-            Graphics.DrawTexture(labelRect, Res.ConsoleIcon_Warning);
+            DrawTexture(labelRect, Res.ConsoleIcon_Warning);
 
             labelRect.x += labelRect.width;
 
             GUI.Label(labelRect, m_warnCount + "", Res.Label);
 
             //////////////////////////////////////////////////////////////////////////
-             
+
             labelRect.x += labelRect.width + 7;
 
-            buttonToggleRect = CreateRect(labelRect.x - 2, labelRect.y - 1, 35, 18);
+            buttonToggleRect = new Rect(labelRect.x - 2, labelRect.y - 1, 35, 18);
             Options.CMSG_Hide_Error = GUI.Toggle(buttonToggleRect, Options.CMSG_Hide_Error, "", Res.BottonMsdSwitch);
 
             EditorGUIUtility.AddCursorRect(buttonToggleRect, MouseCursor.Link);
 
             labelRect.width = 15;
             labelRect.height = 15;
-            Graphics.DrawTexture(labelRect, Res.ConsoleIcon_Error);
+            DrawTexture(labelRect, Res.ConsoleIcon_Error);
 
             labelRect.x += labelRect.width;
 
@@ -161,14 +151,13 @@
 
             //////////////////////////////////////////////////////////////////////////
 
-
             DrawPos = 22;
 
             m_infoCount = 0;
             m_warnCount = 0;
             m_errorCount = 0;
 
-            foreach (ConsoleMessage message in Messages.ToList())
+            foreach (ConsoleMessage message in Messages)
             {
                 if (message.MessageType == 0)
                 {
@@ -226,7 +215,6 @@
             AddNewMessage(new ConsoleMessage(Message, messageType));
         }
 
-
         public static void EditorLog(string Message, int messageType, int nodeID)
         {
             ActiveConsole.b_Active = true;
@@ -276,7 +264,6 @@
             mess.MessageButtons.Add(selectNodeButton);
         }
 
-
         public static void CompileLog(string Message, int messageType, int NodeID)
         {
             ActiveConsole.b_Active = true;
@@ -284,21 +271,22 @@
             ConsoleMessage mess = new ConsoleMessage(Message, messageType);
             AddNewMessage(mess);
 
-
             ConsoleButton selectNodeButton = new ConsoleButton(NodeID, CurrCompileClass.Obj_ID, DrawTable.DrawType, DrawTable.ID);
             mess.MessageButtons.Add(selectNodeButton);
         }
-          
+
         private static void AddNewMessage(ConsoleMessage mess)
         {
-            if(ActiveConsole.Messages.Find(x => x.Message == mess.Message) == null)
+            if (ActiveConsole.Messages.Find(x => x.Message == mess.Message) == null)
                 ActiveConsole.Messages.Add(mess);
         }
     }
 
     public class ConsoleMessage
     {
-        public ConsoleMessage() { }
+        public ConsoleMessage()
+        {
+        }
 
         public float Transparency = 0;
         public float Height = 0;
@@ -307,12 +295,12 @@
 
         private bool b_Delete = false;
 
-        private float HoldTime = -1; 
+        private float HoldTime = -1;
 
         public int MessageType = 0;
-         
+
         public List<ConsoleButton> MessageButtons = new List<ConsoleButton>();
-         
+
         public ConsoleMessage(string Message, int MessageType)
         {
             this.Message = Message.Replace("\r\n", "").Replace("\r", "").Replace("\n", "");
@@ -323,7 +311,7 @@
 
         public bool Draw(ref float posY, bool UserOpened)
         {
-            if (UserOpened && !b_Delete)//UserOpened &&  
+            if (UserOpened && !b_Delete)//UserOpened &&
             {
                 b_HideStage1 = false;
                 b_HideStage2 = false;
@@ -359,14 +347,12 @@
             GColor.a = Transparency;
             GUI.color = GColor;
 
-            GUI.Box(CreateRect(2, posY, BConsole.Width - 4, Height), "", Res.Box);
-
+            GUI.Box(new Rect(2, posY, BConsole.Width - 4, Height), "", Res.Box);
 
             GUI.color = Color.gray;
-            EditorGUI.TextField(CreateRect(30, posY, BConsole.Width - 55, 20), Message, Res.Label);
+            EditorGUI.TextField(new Rect(30, posY, BConsole.Width - 55, 20), Message, Res.Label);
             GUI.color = Color.white;
 
-
             Texture iconTex = null;
 
             if (MessageType == 1)
@@ -382,12 +368,10 @@
                 iconTex = Res.ConsoleIcon_Info;
             }
 
-            GUI.DrawTexture(CreateRect(10, posY + 2, 16, 16), iconTex);
+            GUI.DrawTexture(new Rect(10, posY + 2, 16, 16), iconTex);
             GUI.color = Color.white;
 
-
-
-            if (GUI.Button(CreateRect(BConsole.Width - 18, posY + 2, 16, 16), "X", Res.ButtonSimple))
+            if (GUI.Button(new Rect(BConsole.Width - 18, posY + 2, 16, 16), "X", Res.ButtonSimple))
             {
                 b_HideStage1 = true;
                 b_Delete = true;
@@ -399,13 +383,10 @@
                 float buttonWidth = CalcStringPixelsX(button.ButtonName, Res.MiddleBoldNameLabel) + 10;
                 posx -= buttonWidth + 5;
 
-                Rect buttonRect = CreateRect(posx, posY + 2, buttonWidth, 16);
+                Rect buttonRect = new Rect(posx, posY + 2, buttonWidth, 16);
 
                 GUI.DrawTexture(buttonRect, Res.ControlBarButton);
 
-           
-
-
                 if (GUI.Button(buttonRect, button.ButtonName, Res.ButtonSimple))
                 {
                     button.ProcessButton();
@@ -414,8 +395,6 @@
 
             if (b_HideStage1)
             {
-
-
                 if (Transparency < 0)
                 {
                     b_HideStage2 = true;
@@ -426,7 +405,6 @@
                 }
             }
 
-
             posY += 20 + 3;
 
             if (b_Delete && b_HideStage2)
@@ -440,7 +418,10 @@
 
     public class ConsoleButton
     {
-        public ConsoleButton() { }
+        public ConsoleButton()
+        {
+        }
+
         public ConsoleButton(string DocUrl)
         {
             ButtonName = "Open CSharp documentation";
@@ -456,10 +437,8 @@
             this.CurClassId = CurClassId;
             this.drId = drId;
             ShowNode = true;
-         
         }
 
-
         public string ButtonName = "";
 
         public bool OpenDoc = false;
@@ -468,12 +447,10 @@
         public bool ShowNode = false;
         public int NodeId = -1;
 
-         
         public DrawableType drType = DrawableType.Undefined;
         public int drId = -1;
         public int CurClassId = -1;
 
-
         public void ProcessButton()
         {
             if (OpenDoc)
@@ -482,7 +459,6 @@
             }
             else if (ShowNode)
             {
-
                 if (drType != DrawableType.Undefined && drId != -1)
                 {
                     CurClass.CurrentDrawable.DrawType = drType;
@@ -490,14 +466,12 @@
                 }
                 if (CurClassId != -1)
                 {
-            
                     CurScript.CurrentClass = CurClassId;
                 }
 
-
                 Node errorNode = null;// CurScript.FindNodeFromID(NodeId);
 
-                if (errorNode == null)  
+                if (errorNode == null)
                 {
                     DrawableType DrawType = DrawableType.Undefined;
 
@@ -507,11 +481,8 @@
 
                         if (errorNode != null)
                         {
-                     
-
                             CurClass.CurrentDrawable.ID = drawbl.Obj_ID;
 
-
                             if (drawbl is ScriptFunction)
                                 DrawType = DrawableType.Method;
                             else if (drawbl is ScriptClassConstructor)
@@ -526,41 +497,30 @@
 
                             CurClass.CurrentDrawable.DrawType = DrawType;
 
-                         
-
                             break;
                         }
                     }
                 }
 
-
                 if (errorNode == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Try show node: Can't find node with id: " + NodeId);
+                    if (Options.b_ShowDebug) Debug.Log("Try show node: Can't find node with id: " + NodeId);
                     return;
                 }
                 else
                 {
                     if (CurDrawable == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Try show node: CurDrawable == null");
+                        if (Options.b_ShowDebug) Debug.Log("Try show node: CurDrawable == null");
                         return;
                     }
                     CurDrawable.SelectedNodes = new List<int>() { NodeId };
                     CurDrawable.EditGraphDragOffset = -new Vector2(errorNode.PosX - EditGraphRect.width / 2 + 200, errorNode.PosY - EditGraphRect.height / 2 + 100);
                     CurDrawable.Zoom = 1;
                 }
-
-
-
-
-
-
-
             }
         }
-
-
     }
+
     public delegate void ConsoleButtonDeleg();
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ContinuationManager.cs Editor/m_ContinuationManager.cs
--- .Editor/m_ContinuationManager.cs	2018-06-30 08:59:18.497613300 +0700
+++ Editor/m_ContinuationManager.cs	2018-06-30 09:02:03.831513700 +0700
@@ -14,6 +14,7 @@
                 Completed = completed;
                 ContinueWith = continueWith;
             }
+
             public Func<bool> Completed { get; private set; }
             public Action ContinueWith { get; private set; }
         }
@@ -42,4 +43,4 @@
             if (!jobs.Any()) EditorApplication.update -= Update;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ControlBar.cs Editor/m_ControlBar.cs
--- .Editor/m_ControlBar.cs	2018-06-30 08:59:18.499613900 +0700
+++ Editor/m_ControlBar.cs	2018-06-30 09:02:03.832514300 +0700
@@ -1,13 +1,12 @@
-﻿using UnityEditor;
+﻿using Nottorus_Debug;
+using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-using Nottorus_Debug;
-
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -23,10 +22,8 @@
             return;
         }
 
-
-
         newScriptPath = Path.GetDirectoryName(newScriptPath) + @"/" + Path.GetFileNameWithoutExtension(newScriptPath);
-        
+
         string newnPath = newScriptPath;// CurScript.ScriptFileName.Replace(fileName, newName);
 
         if (CurScript.ScriptFileName == newnPath)
@@ -35,18 +32,15 @@
         string oldDataFile = Application.dataPath.Replace(@"/Assets", @"/") + CurScript.ScriptFileName + ExtensionType;
         string oldScriptFile = Application.dataPath.Replace(@"/Assets", @"/") + CurScript.ScriptFileName + ".cs";
 
-
-        
         string newScriptFile = Application.dataPath.Replace(@"/Assets", @"/") + newnPath + ".cs";
 
         if (File.Exists(newScriptFile))
         {
-            if (!EditorUtility.DisplayDialog("Script allready exists", "Script " + newnPath + ".cs is allready exists! Compiling couse it will overriden!", "Continue", "Cancel"))
+            if (!EditorUtility.DisplayDialog("Script already exists", "Script " + newnPath + ".cs is already exists! Compiling couse it will overriden!", "Continue", "Cancel"))
             {
                 return;
             }
-        } 
-
+        }
 
         if (File.Exists(oldDataFile))
         {
@@ -89,7 +83,6 @@
         {
             if (EditorUtility.DisplayDialog("Multiple MonoBehaviour classes in script", "You have more than one MonoBehaviour class in script, it's not allowed! You must to have one MonoBehaviour class named as script file name.", "Ok, I fix this issue myself"))
             {
-
             }
         }
         SaveScript(true);
@@ -97,20 +90,16 @@
     */
 
     private bool StartCompileScript = false;
+
     private void DrawControlBar()
     {
-        Graphics.DrawTexture(ControlBarRect, Res.ToolBar_BG, 20, 20, 20, 20);
+        DrawTexture(ControlBarRect, Res.ToolBar_BG, 20, 20, 20, 20);
 
-        Rect barRect = CreateRect(ControlBarRect.x, ControlBarRect.y, CB_DrawPosX - ControlBarRect.x, ControlBarRect.height);
-        Graphics.DrawTexture(barRect, Res.ToolBar, 20, 20, 20, 20);
+        Rect barRect = new Rect(ControlBarRect.x, ControlBarRect.y, CB_DrawPosX - ControlBarRect.x, ControlBarRect.height);
+        DrawTexture(barRect, Res.ToolBar, 20, 20, 20, 20);
 
         CB_DrawPosX = ControlBarRect.x + 2;
-
-        Rect saveButtonRect = CreateRect(CB_DrawPosX, 21 + BR_Offset, 70, 60);
-
-        if (saveButtonRect.Contains(Event.current.mousePosition))
-            GUIToolTipe = "CTRL+S";
-
+        
         if (DrawButton("Save", Res.Button_Save))
         {
             LMB_Down_Deleg = delegate
@@ -127,12 +116,12 @@
             };
         }
         */
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
 
         Texture compileTex;
 
-       if(CurScript.CompileStage == 1)//Undefined
+        if (CurScript.CompileStage == 1)//Undefined
         {
             compileTex = Res.Button_CompileUndefined;
         }
@@ -153,9 +142,7 @@
             compileTex = Res.Button_Compile;
         }
 
-
-
-        if (DrawButton("Compile", compileTex, isThreadCompiling))// || !BCompActive))
+        if (DrawButton("Compile", compileTex, EditorApplication.isCompiling))// || !BCompActive))
         {
             //if (BCompActive)
             {
@@ -169,12 +156,9 @@
             }
         }
 
-        
-        
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
 
-
         if (DrawButton("Undo", Res.Button_Undo))
         {
             LMB_Down_Deleg = delegate
@@ -191,7 +175,7 @@
             };
         }
 
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
 
         if (DrawButton("Options", Res.Button_Options))
@@ -202,10 +186,9 @@
             };
         }
 
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
 
-
         if (DrawButton("Open Script", Res.Button_Open))
         {
             LMB_Down_Deleg = delegate
@@ -218,11 +201,11 @@
         {
             LMB_Down_Deleg = delegate
             {
-                NewScriptWIndow.Show();
+                NewScriptWindow.Show();
             };
         }
 
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
 
         if (DrawButton("Seq. diag", Res.ButtonSeqDiag))
@@ -233,16 +216,13 @@
             };
         }
 
-        //Graphics.DrawTexture(CreateRect(CB_DrawPosX - 33, BR_Offset + 25, 30, 10), Res.Beta_Label);
+        //DrawTexture(new Rect(CB_DrawPosX - 33, BR_Offset + 25, 30, 10), Res.Beta_Label);
 
-        Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+        DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
         CB_DrawPosX += 7;
         ///////////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
-
-
-
-        //	
+        //
 
         if (!CurScript.b_DebugMode)
         {
@@ -263,13 +243,11 @@
                     CurScript.b_DebugMode = false;
                 };
             }
-            
 
-            Rect drawDebugRect = CreateRect(CB_DrawPosX, 40 + BR_Offset, 170, 20);
+            Rect drawDebugRect = new Rect(CB_DrawPosX, 40 + BR_Offset, 170, 20);
 
             EditorGUIUtility.AddCursorRect(drawDebugRect, MouseCursor.Link);
 
-
             Event evt = Event.current;
 
             if (evt.type == EventType.DragUpdated || evt.type == EventType.DragPerform)
@@ -309,60 +287,46 @@
             {
                 SearchDebugObjects();
             }
-             
+
             List<string> objsNames = new List<string>();
 
             DebugObjects.ForEach(x => objsNames.Add((x.InstanceID == -1 || x.InstanceID == -2) ? x.Name : x.Name + " (ID: " + x.InstanceID + ")"));
 
-
-
-
-          
-
             int newSelDebugIndex = EditorGUI.Popup(drawDebugRect, CurScript.SelectedDebugIndex, objsNames.ToArray(), Res.PopupButton);
+            
+            GUI.Label(new Rect(CB_DrawPosX + 50, 20 + BR_Offset, 150, 20), "Debug Object", Res.Label);
 
-            //GUI.Box(drawDebugRect, "", Res.PopupButton);
-
-
-            GUI.Label(CreateRect(CB_DrawPosX + 50, 20 + BR_Offset, 150, 20), "Debug Object", Res.Label);
-
-
-            CurScript.Debug_AllowStatic = EditorGUI.Toggle(CreateRect(CB_DrawPosX + 4, 63 + BR_Offset, 16, 16), CurScript.Debug_AllowStatic, Res.CheckBoxButton);
-
-            GUI.Label(CreateRect(CB_DrawPosX + 25, 63 + BR_Offset, 16, 16), "Listen static functions", Res.Label);
+            CurScript.Debug_AllowStatic = EditorGUI.Toggle(new Rect(CB_DrawPosX + 4, 63 + BR_Offset, 16, 16), CurScript.Debug_AllowStatic, Res.CheckBoxButton);
 
+            GUI.Label(new Rect(CB_DrawPosX + 25, 63 + BR_Offset, 16, 16), "Listen static functions", Res.Label);
 
             if (CurScript.SelectedDebugIndex != newSelDebugIndex)
             {
                 SelectDebugObjByIndex(newSelDebugIndex);
             }
-		
+
             BP_Utils.InvokeSequenceDelegate = ReceiveInvoke;
             SM_Utils.InvokeSMDelegate = ReceiveSMInvoke;
 
-
-            if(Options.b_ShowDebug)
-            if (GUI.Button(CreateRect(CB_DrawPosX, 23 + BR_Offset, 4, 4), "", Res.EmptyStyle))
-            {
-                CurScript.b_Debug_DrawPins = !CurScript.b_Debug_DrawPins;
-            }
-            
+            if (Options.b_ShowDebug)
+                if (GUI.Button(new Rect(CB_DrawPosX, 23 + BR_Offset, 4, 4), "", Res.EmptyStyle))
+                {
+                    CurScript.b_Debug_DrawPins = !CurScript.b_Debug_DrawPins;
+                }
 
             CB_DrawPosX += 175;
 
-        
-             
-
             if (CurScript.SelectedDebugObject != null && CurScript.SelectedDebugObject.script != null)
             {
-                Graphics.DrawTexture(CreateRect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+                DrawTexture(new Rect(CB_DrawPosX, 22 + BR_Offset, 4, 59), Res.ToolBar_Divider);
+
                 CB_DrawPosX += 7;
 
                 CB_DrawPosX += 5;
 
-                GUI.Label(CreateRect(CB_DrawPosX, 20 + BR_Offset, 150, 20), "Invoke function", Res.Label);
+                GUI.Label(new Rect(CB_DrawPosX, 20 + BR_Offset, 150, 20), "Invoke function", Res.Label);
 
-                Rect drawInvokeMethodRect = CreateRect(CB_DrawPosX, 40 + BR_Offset, 160, 20);
+                Rect drawInvokeMethodRect = new Rect(CB_DrawPosX, 40 + BR_Offset, 160, 20);
 
                 EditorGUIUtility.AddCursorRect(drawInvokeMethodRect, MouseCursor.Link);
 
@@ -374,9 +338,7 @@
 
                 int newSelInvokeMIndex = EditorGUI.Popup(drawInvokeMethodRect, CurClass.SelectedInvokeMethodIndex, CurClass.InvokeMethidsDisplayNameList.ToArray(), Res.PopupButton);
 
-                //GUI.Label(CreateRect(CB_DrawPosX + 45, 20, 150, 20), "Invoke method", Res.LabelStyle);
-
-
+                //GUI.Label(new Rect(CB_DrawPosX + 45, 20, 150, 20), "Invoke method", Res.LabelStyle);
 
                 if (CurClass.SelectedInvokeMethodIndex != newSelInvokeMIndex)
                 {
@@ -390,7 +352,7 @@
                 {
                     string invokeMethodName = CurClass.CurMethodInfokeInfo.MethodName;
 
-                    if (GUI.Button(CreateRect(CB_DrawPosX + 165, 25, 170, 16), "Invoke " + invokeMethodName, Res.ButtonSimple))
+                    if (GUI.Button(new Rect(CB_DrawPosX + 165, 25, 170, 16), "Invoke " + invokeMethodName, Res.ButtonSimple))
                     {
                         CurClass.InvokeResult = "";
                         object result = CurClass.CurMethodInfokeInfo.mInfo.Invoke(CurScript.SelectedDebugObject.script, CurClass.CurMethodInfokeInfo.GetArgsVars());
@@ -398,14 +360,13 @@
                     }
 
                     if (CurClass.InvokeResult != "")
-                        GUI.Label(CreateRect(CB_DrawPosX + 165, 40, 150, 20), "Return result: " + CurClass.InvokeResult, Res.Label);
+                        GUI.Label(new Rect(CB_DrawPosX + 165, 40, 150, 20), "Return result: " + CurClass.InvokeResult, Res.Label);
 
                     float drawOffsetX = 0;
 
                     foreach (Node_Pin tempVar in CurClass.CurMethodInfokeInfo.TypeParams)
                     {
                         drawOffsetX += DrawTempVar(tempVar.TempVar_TempVarHolder, tempVar.type.PType, CB_DrawPosX + drawOffsetX, 60, tempVar.PinName, null, CB_DrawPosX + drawOffsetX).x + 10;
-                  
                     }
 
                     CB_DrawPosX += Mathf.Max(175, drawOffsetX);
@@ -419,7 +380,6 @@
             {
                 ParseFile(CurScript.ScriptFileName + ".cs", true);
             }
-       
         }
         else if (CurScript.ScriptType == ScriptType.ScriptableObj)
         {
@@ -427,7 +387,7 @@
             {
                 var thisClassType = CurClass.ThisClassType;
 
-                if(thisClassType != null)
+                if (thisClassType != null)
                 {
                     string newScriptablePath = EditorUtility.SaveFilePanelInProject("Save Scriptable Object", CurClass.Config.Name, "asset", "Save Scriptable Object", Application.dataPath);
 
@@ -448,7 +408,7 @@
                     BConsole.EditorLog("The script must be compiled before creating scriptable object.", 0);
                 }
             }
-            Rect labelrect = CreateRect(CB_DrawPosX - 55, BR_Offset + 33, 70, 60);
+            Rect labelrect = new Rect(CB_DrawPosX - 55, BR_Offset + 33, 70, 60);
             GUI.Label(labelrect, "Create", Res.Label);
             labelrect.y += 12;
             labelrect.x -= 8;
@@ -459,7 +419,7 @@
             if (DrawButton("Launch App", Res.Button_ExecuteApp))
             {
                 string appPath = Application.dataPath.Replace("/Assets", "/" + CurScript.ScriptName + ".exe");
-                if(File.Exists(appPath))
+                if (File.Exists(appPath))
                 {
                     System.Diagnostics.Process.Start(appPath);
                 }
@@ -476,15 +436,15 @@
         }
     }
 
-
-
     public class MethodInvokeInfo
     {
         public string MethodName = "";
         public List<Node_Pin> TypeParams = new List<Node_Pin>();
         public MethodInfo mInfo;
-        public MethodInvokeInfo() { }
 
+        public MethodInvokeInfo()
+        {
+        }
 
         public MethodInvokeInfo(MethodInfo mInf)
         {
@@ -499,7 +459,7 @@
             {
                 TypeParams.Add(new Node_Pin(pInf.ParameterType, pInf.Name, PinTypeE.Undefined, 0));
 
-                    DisplayName += pInf.Name;
+                DisplayName += pInf.Name;
 
                 if (pInf != pInfos[pInfos.Length - 1])
                     DisplayName += ", ";
@@ -508,7 +468,6 @@
             DisplayName += ")";
         }
 
-
         public Type[] GetArgs()
         {
             if (TypeParams.Count == 0)
@@ -522,22 +481,20 @@
             if (TypeParams.Count == 0)
                 return new object[0];
 
-            var argTypes = GetArgs();
+            // var argTypes = GetArgs();
 
             return TypeParams.Select((x, y) => x.TempVar_TempVarHolder.GetTempVar_Undef()).ToArray();
         }
 
-
         public string DisplayName = "";
     }
 
-
     private void ReinitInvokeMethodsList()
     {
         CurClass.InvokeMethidsList = new List<MethodInvokeInfo>();
         CurClass.InvokeMethidsDisplayNameList = new List<string>();
 
-        MethodInfo[] mInfos = CurClass.ThisClassType.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static );
+        MethodInfo[] mInfos = CurClass.ThisClassType.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);
 
         foreach (MethodInfo mInf in mInfos)
         {
@@ -564,26 +521,22 @@
         InitDebugObject();
     }
 
-
     private void InitDebugObject()
     {
         if (CurScript == null)
             return;
-		 
 
-        DebugObjects = new List<DebugObjInfo>();
-
-        DebugObjects.Add(new DebugObjInfo(null, "No debug object"));
-        DebugObjects.Add(new DebugObjInfo(-2, "Any object (editorscript, etc)"));
+        DebugObjects = new List<DebugObjInfo>
+        {
+            new DebugObjInfo(null, "No debug object"),
+            new DebugObjInfo(-2, "Any object (editorscript, etc)")
+        };
 
-    
         if (CurScript.b_DebugMode)
         {
             if (CurScript.DebugObjectID == -2)
                 CurScript.SelectedDebugObject = DebugObjects[1];
 
-
-
             if (CurScript.DebugObjectID != -1)
             {
                 SearchDebugObjects();
@@ -594,10 +547,10 @@
 
                 if (CurScript.SelectedDebugObject != null)
                 {
-                    if(CurScript.SelectedDebugObject != null)
-                    { 
+                    if (CurScript.SelectedDebugObject != null)
+                    {
                         CurScript.SelectedDebugObject.script = dbgObjectLoad;
-					
+
                         BP_Utils.InvokeSequenceDelegate = ReceiveInvoke;
                         SM_Utils.InvokeSMDelegate = ReceiveSMInvoke;
 
@@ -647,8 +600,6 @@
         }
     }
 
-
-
     public static void ReceiveInvoke(int NodeID, int LNodeID, object targScript, string className, object value, bool isPin)
     {
         if (!CurScript.b_DebugMode)
@@ -666,7 +617,6 @@
         if (CurScript.SelectedDebugObject == null)
             return;
 
-
         UnityEngine.Object targetScript = targScript as UnityEngine.Object;
 
         if (CurScript.SelectedDebugObject.InstanceID == -2 || (CurScript.SelectedDebugObject.script != null && CurScript.SelectedDebugObject.script == targetScript))
@@ -729,10 +679,6 @@
         }
     }
 
-   
-
-    
-
     private UnityEngine.Object[] DebugScripts;
 
     private void SearchDebugObjects()
@@ -744,26 +690,28 @@
         else
         {
             DebugScripts = FindObjectsOfType<Behaviour>().Where(x => x.GetType().Name == CurClass.ThisClassType.Name).ToArray();
-            DebugObjects = new List<DebugObjInfo>();
-
-            DebugObjects.Add(new DebugObjInfo(null, "No debug object"));
-            DebugObjects.Add(new DebugObjInfo(-2, "Any object"));
+            DebugObjects = new List<DebugObjInfo>
+            {
+                new DebugObjInfo(null, "No debug object"),
+                new DebugObjInfo(-2, "Any object")
+            };
 
             foreach (Behaviour mb in DebugScripts)
             {
                 DebugObjects.Add(new DebugObjInfo(mb, mb.name));
             }
-
-            //DebugObjectNames = DebugObjects.Select(x => x.Name + " (" + x.InstanceID + ")").ToList();
+            
         }
     }
-    //private List<string> DebugObjectNames = new List<string> { "No debug object selected" };
-
+    
     private List<DebugObjInfo> DebugObjects = new List<DebugObjInfo>();
 
     public class DebugObjInfo
     {
-        public DebugObjInfo() { }
+        public DebugObjInfo()
+        {
+        }
+
         public DebugObjInfo(Behaviour MB, string name)
         {
             script = MB;
@@ -798,9 +746,11 @@
                 }
             }
         }
+
         public string Name;
         public int InstanceID = -2;
     }
+
     public bool DrawButton(string ButtonName, Texture buttonIcon)
     {
         return DrawButton(ButtonName, buttonIcon, false);
@@ -810,51 +760,48 @@
     {
         GUI.enabled = !locked;
 
-        Rect ButtonRect = CreateRect(CB_DrawPosX, 21 + BR_Offset, 70, 60);
+        Rect ButtonRect = new Rect(CB_DrawPosX, 21 + BR_Offset, 70, 60);
         CB_DrawPosX += 72;
 
         float labelSize = CalcStringPixelsX(ButtonName, Res.Label);
 
         EditorGUIUtility.AddCursorRect(ButtonRect, MouseCursor.Link);
 
+        DrawTexture(ButtonRect, Res.ControlBarButton, 5, 5, 5, 5);
 
-        Graphics.DrawTexture(ButtonRect, Res.ControlBarButton, 5, 5, 5, 5);
+        /*
+          if (GUI.Button(ButtonRect, "", Res.EmptyStyle))
+          {
+              return true;
+          }
+          */
 
-      /*
-        if (GUI.Button(ButtonRect, "", Res.EmptyStyle))
-        {
-            return true;
-        }
-        */
-    
-     
         if (ButtonRect.Contains(Event.current.mousePosition))
         {
-            if(_LMB_Down)
+            if (_LMB_Down)
             {
                 return true;
             }
             if (locked)
             {
-                Graphics.DrawTexture(ButtonRect, Res.ControlBarButton_Pressed, 16, 16, 16, 16);
+                DrawTexture(ButtonRect, Res.ControlBarButton_Pressed, 16, 16, 16, 16);
             }
             else if (_LMB_Down_L)
             {
-                Graphics.DrawTexture(ButtonRect, Res.ControlBarButton_Pressed, 16, 16, 16, 16);
+                DrawTexture(ButtonRect, Res.ControlBarButton_Pressed, 16, 16, 16, 16);
             }
             else
             {
-                Graphics.DrawTexture(ButtonRect, Res.ControlBarButton_Hovered, 16, 16, 16, 16);
+                DrawTexture(ButtonRect, Res.ControlBarButton_Hovered, 16, 16, 16, 16);
             }
         }
 
-        Graphics.DrawTexture(CreateRect(ButtonRect.x + ButtonRect.width / 2 - 20, ButtonRect.y + 5, 40, 40), buttonIcon);
+        DrawTexture(new Rect(ButtonRect.x + ButtonRect.width / 2 - 20, ButtonRect.y + 5, 40, 40), buttonIcon);
 
-        Rect bLabelRect = CreateRect(ButtonRect.x + ButtonRect.width / 2 - labelSize / 2, ButtonRect.y + ButtonRect.height - 20, 70, 20);
+        Rect bLabelRect = new Rect(ButtonRect.x + ButtonRect.width / 2 - labelSize / 2, ButtonRect.y + ButtonRect.height - 20, 70, 20);
 
         GUI.Label(bLabelRect, ButtonName, Res.Label);
         GUI.enabled = true;
         return false;
     }
-    
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_CopyNodes.cs Editor/m_CopyNodes.cs
--- .Editor/m_CopyNodes.cs	2018-06-30 08:59:18.502613700 +0700
+++ Editor/m_CopyNodes.cs	2018-06-30 09:02:03.833514600 +0700
@@ -1,16 +1,12 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     private static Copy_Nodes CopyNodes = new Copy_Nodes();
+
     public class Copy_Nodes
     {
         private List<Node> NodesCopyInstances = new List<Node>();
@@ -27,9 +23,7 @@
             if (RenameField.LastRename != null || IsEditingText)
                 return;
 
-        
-
-            if(CopyNodes(nodesID, commentaries))
+            if (CopyNodes(nodesID, commentaries))
             {
                 UndoSystem.RegisterUndo("Cut graph objects");
 
@@ -43,9 +37,6 @@
             }
         }
 
-         
-
-
         public bool CopyNodes(List<int> nodesID, List<int> commentaries)
         {
             if (RenameField.LastRename != null || IsEditingText)
@@ -62,7 +53,7 @@
             List<Node> NodesGet = CurDrawable.Nodes.FindAll(x => nodesID.Contains(x.NodeID));
             List<Node> NodesProcess = new List<Node>();
 
-            foreach(var commentId in commentaries)
+            foreach (var commentId in commentaries)
             {
                 var comment = CurDrawable.Commentary.Find(x => x.CommentID == commentId);
                 CommentaryInstances.Add(new Commentary(comment));
@@ -84,28 +75,26 @@
 
             NodesProcess.ForEach(x => NodesCopyInstances.Add(new Node(x)));
 
-           /*
-            ////////
-            var node0 = NodesCopyInstances[0];
-            Debug.Log("Node pos0: x" + node0.PosX + " y" + node0.PosY);
-
-            var comm0 = CommentaryInstances[0];
-            Debug.Log("Comm pos0: x" + comm0.PosX + " y" + comm0.PosY);
-            ////////
-           */
+            /*
+             ////////
+             var node0 = NodesCopyInstances[0];
+             Debug.Log("Node pos0: x" + node0.PosX + " y" + node0.PosY);
+
+             var comm0 = CommentaryInstances[0];
+             Debug.Log("Comm pos0: x" + comm0.PosX + " y" + comm0.PosY);
+             ////////
+            */
 
             Vector2 realMousePos = CurDrawable.GetEditGraphRealMousePos_NoOffset;
             MouseCopyPos = realMousePos;
 
-
             /*
             NodesCopyInstances.ForEach(x => x.PosX = x.PosX - realMousePos.x);
             NodesCopyInstances.ForEach(x => x.PosY = x.PosY - realMousePos.y);
 
-
             CommentaryInstances.ForEach(x => x.PosX = x.PosX - realMousePos.x);
             CommentaryInstances.ForEach(x => x.PosY = x.PosY - realMousePos.y);
-            
+
                 */
 
             /*
@@ -146,7 +135,7 @@
             }
             string messag = "Copied " + (NodesProcess.Count + CommentaryInstances.Count) + " objects";
 
-            if(nodesID.Count > NodesProcess.Count)
+            if (nodesID.Count > NodesProcess.Count)
             {
                 messag += ", " + (nodesID.Count - NodesProcess.Count) + " nodes ignored.";
             }
@@ -159,7 +148,6 @@
             return true;
         }
 
-
         public void PasteNodes()
         {
             if (RenameField.LastRename != null || IsEditingText)
@@ -176,26 +164,21 @@
             List<Commentary> CommentariesCopyResult = new List<Commentary>();
             CommentaryInstances.ForEach(x => CommentariesCopyResult.Add(new Commentary(x)));
 
-
             List<LinkInfo> PinLinksCopyResult = new List<LinkInfo>();
             PinLinksCopyInstances.ForEach(x => PinLinksCopyResult.Add(new LinkInfo(x)));
 
             List<LinkInfo> ConnectorLinksCopyResult = new List<LinkInfo>();
             ConnectorLinksCopyInstances.ForEach(x => ConnectorLinksCopyResult.Add(new LinkInfo(x)));
 
-
-
             Vector2 realMousePos = CurDrawable.GetEditGraphRealMousePos_NoOffset;
 
             Vector2 copyOffset = realMousePos - MouseCopyPos;
 
-
             NodesCopyResult.ForEach(x => x.PosX += copyOffset.x);
             NodesCopyResult.ForEach(x => x.PosY += copyOffset.y);
             CommentariesCopyResult.ForEach(x => x.PosX += copyOffset.x);
             CommentariesCopyResult.ForEach(x => x.PosY += copyOffset.y);
 
-
             /*
             NodesCopyResult.ForEach(x => x.PosX = realMousePos.x + x.PosX);
             NodesCopyResult.ForEach(x => x.PosY = realMousePos.y + x.PosY);
@@ -203,7 +186,6 @@
             CommentariesCopyResult.ForEach(x => x.PosY = realMousePos.y + x.PosY);
             */
 
-
             /*
             ////////
             var node2 = NodesCopyResult[0];
@@ -214,12 +196,9 @@
             ////////
             */
 
-
             CurDrawable.Nodes.AddRange(NodesCopyResult);
             CurDrawable.Commentary.AddRange(CommentariesCopyResult);
 
-
-
             foreach (Node node in NodesCopyResult)
             {
                 int newID = CurScript.GetFreeNodeID();
@@ -231,12 +210,10 @@
             }
 
             foreach (var comment in CommentariesCopyResult)
-            {    
+            {
                 comment.CommentID = CurDrawable.FindFreeCommentaryID();
             }
 
-          
-
             CurDrawable.NodePinsLinks.AddRange(PinLinksCopyResult);
             CurDrawable.NodeConnectorsLinks.AddRange(ConnectorLinksCopyResult);
 
@@ -244,7 +221,6 @@
             CurDrawable.SelectedCommentary = CommentariesCopyResult.Select(x => x.CommentID).ToList();
             NodesCopyResult.ForEach(x => x.ReinitMathPins());
 
-
             InfoMessages.ShowMessage("Paste objects");
         }
 
@@ -260,6 +236,5 @@
                 link.NodeID = newID;
             }
         }
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_CurScriptData.cs Editor/m_CurScriptData.cs
--- .Editor/m_CurScriptData.cs	2018-06-30 08:59:18.505614200 +0700
+++ Editor/m_CurScriptData.cs	2018-06-30 09:02:03.834514500 +0700
@@ -1,13 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static BConsole EditorConsoleWindow = new BConsole();
@@ -17,7 +11,7 @@
 
     public static bool CheckAllreadyOpened(string filePath)
     {
-        foreach(var script in Scripts)
+        foreach (var script in Scripts)
         {
             if (script.ScriptFileName == filePath)
                 return true;
@@ -25,28 +19,13 @@
         return false;
     }
 
-    /*
-    private static BaseScriptObject CurDrawable { get; set; }
-    private static ScriptClass CurClass { get; set; }
-    private static ScriptData CurScript { get; set; }
-    private static List<ScriptLocalVariable> CurrentLocalVariables { get; set; }
-    */
-
-         
     public static ScriptClass CurClass
     {
         get
         {
-            if (CurScript == null)
-            {
+            if (CurScript == null || CurScript.Classes.Count == 0)
                 return null;
-            }
-
-            if (CurScript.Classes.Count == 0)
-                return null;
-
-
-            if (CurScript.CurrentClass == CurScript._curClassID)// && _curClass != null)
+            else if (CurScript.CurrentClass == CurScript._curClassID)// && _curClass != null)
             {
                 return CurScript._curClass;
             }
@@ -64,7 +43,6 @@
         }
     }
 
-
     private static int CurScript_DrawFrameNum = 0;
     private static ScriptData CurScript_DrawFrameNum_Var;
 
@@ -72,23 +50,17 @@
     {
         get
         {
-            if(CurScript_DrawFrameNum == DrawFrameNum)
-                return CurScript_DrawFrameNum_Var;   
+            if (CurScript_DrawFrameNum == DrawFrameNum)
+                return CurScript_DrawFrameNum_Var;
             CurScript_DrawFrameNum = DrawFrameNum;
 
             if (Scripts.Count == 0)
-            {
-                CurScript_DrawFrameNum_Var = null;
-                return null;
-            }
+                return CurScript_DrawFrameNum_Var = null;
 
             if (Scripts.Count <= CurrentScript)
                 CurrentScript = 0;
 
-
-            CurScript_DrawFrameNum_Var = Scripts[CurrentScript];
-
-            return CurScript_DrawFrameNum_Var;
+            return CurScript_DrawFrameNum_Var = Scripts[CurrentScript];
         }
         set
         {
@@ -110,63 +82,51 @@
 
     public static List<ScriptLocalVariable> GetLocalVarsFromDrawType(int drawId, DrawableType DrawType)
     {
-        if (DrawType == DrawableType.PropertyGet)
-        {
-            ScriptProperty found = CurScript.FindClassPropertyFromID(drawId);
-
-            if (found == null)
-                return null;
-
-            return found.Drawable_Get.LocalVariables;
-        }
-        else if (DrawType == DrawableType.PropertySet)
+        switch (DrawType)
         {
-            ScriptProperty found = CurScript.FindClassPropertyFromID(drawId);
-
-            if (found == null)
-                return null;
-
-            return found.Drawable_Set.LocalVariables;
-        }
-        else if (DrawType == DrawableType.Method)
-        {
-            ScriptFunction found = CurScript.FindFunctionFromID(drawId);
-
-            if (found == null)
-                return null;
+            case DrawableType.Constructor:
+                {
+                    ScriptClassConstructor found = CurScript.FindConstructorFromID(drawId);
 
-            return found.LocalVariables;
-        }
-        else if (DrawType == DrawableType.Constructor)
-        {
-            ScriptClassConstructor found = CurScript.FindConstructorFromID(drawId);
+                    return found != null ? found.LocalVariables : null;
+                }
+            case DrawableType.PropertyGet:
+                {
+                    ScriptProperty found = CurScript.FindClassPropertyFromID(drawId);
+                    return found != null ? found.Drawable_Get.LocalVariables : null;
+                }
+            case DrawableType.PropertySet:
+                {
+                    ScriptProperty found = CurScript.FindClassPropertyFromID(drawId);
 
-            if (found == null)
-                return null;
+                    return found != null ? found.Drawable_Set.LocalVariables : null;
+                }
+            case DrawableType.Method:
+                {
+                    ScriptFunction found = CurScript.FindFunctionFromID(drawId);
 
-            return found.LocalVariables;
-        }
-        else if (DrawType == DrawableType.StateMachine_TransitionEvent || DrawType == DrawableType.StateMachine_NodeEvent || DrawType == DrawableType.StateMachine_TransitionCondition || DrawType == DrawableType.StateMachine_TransitionPosition)
-        {
-            if (CurClass.SMachineSaveData == null)
-                return null;
+                    return found != null ? found.LocalVariables : null;
+                }
+            case DrawableType.StateMachine_NodeEvent:
+            case DrawableType.StateMachine_TransitionEvent:
+            case DrawableType.StateMachine_TransitionCondition:
+            case DrawableType.StateMachine_TransitionPosition:
+                {
+                    if (CurClass.SMachineSaveData == null)
+                        return null;
 
-            var found = CurClass.SMachineSaveData.GetDrawbl(drawId, DrawType);
+                    var found = CurClass.SMachineSaveData.GetDrawbl(drawId, DrawType);
 
-            if (found == null)
+                    return found != null ? found.LocalVariables : null;
+                }
+            default:
                 return null;
-
-            return found.LocalVariables;
         }
-        else
-
-            return null;
     }
 
-
-
     private static int CurDrawable_DrawFrameNum = 0;
     private static BaseScriptObject CurDrawable_DrawFrameNum_Var;
+
     public static BaseScriptObject CurDrawable
     {
         get
@@ -177,123 +137,104 @@
 
             if (CurClass == null)
             {
-                CurDrawable_DrawFrameNum_Var = null;
-                return null;
+                return CurDrawable_DrawFrameNum_Var = null;
             }
 
             DrawableIdent curdraw = CurClass.CurrentDrawable;
 
-
             if (_curDraw != null && curdraw.DrawType == _drawType && curdraw.ID == _drawId)
-            {
-                CurDrawable_DrawFrameNum_Var = _curDraw;
-                return CurDrawable_DrawFrameNum_Var;
-            }
+                return CurDrawable_DrawFrameNum_Var = _curDraw;
             else
-            {
-                CurDrawable_DrawFrameNum_Var = null;
-                _curDraw = null;
-            }
-
-
-
-
-            if (curdraw.DrawType == DrawableType.Undefined)
-            {
-                //CurDrawable_Static = true;
-            }
-            else if (curdraw.DrawType == DrawableType.Constructor)
-            {
-                _curDraw = CurClass.ClassConstructors.Find(x => x.Obj_ID == curdraw.ID);
-                //CurDrawable_Static = false;
-            }
-            else if (curdraw.DrawType == DrawableType.Method)
-            {
-                ScriptFunction draw = CurClass.Functions.Find(x => x.Obj_ID == curdraw.ID);
-
-                if (draw == null)
-                {
-                    curdraw.DrawType = DrawableType.Undefined;
-                    //if(Options.b_ShowDebug)Debug.Log("curdraw.DrawType = DrawableType.Undefined");
-                    CurDrawable_DrawFrameNum_Var = null;
-                    return null;
-                }
-
-                //CurDrawable_Static = draw.m_StaticVirtOvver == 1;
-                _curDraw = draw;
-            }
-            else if (curdraw.DrawType == DrawableType.PropertyGet)
-            {
-                ScriptProperty draw = CurClass.ScriptProperties.Find(x => x.PropertyID == curdraw.ID);
-
-                if (draw == null)
-                {
-                    curdraw.DrawType = DrawableType.Undefined;
-                    if(Options.b_ShowDebug)Debug.Log("CDR Null prop Get");
-                    CurDrawable_DrawFrameNum_Var = null;
-                    return null;
-                }
-
-                //CurDrawable_Static = draw.m_StaticVirtOvver == 1;
-                _curDraw = draw.CurDraw;
-            }
-
-            else if (curdraw.DrawType == DrawableType.PropertySet)
-            {
-                ScriptProperty draw = CurClass.ScriptProperties.Find(x => x.PropertyID == curdraw.ID);
+                CurDrawable_DrawFrameNum_Var = _curDraw = null;
 
-                if (draw == null)
-                {
-                    curdraw.DrawType = DrawableType.Undefined;
-                    if(Options.b_ShowDebug)Debug.Log("CDR Null prop Set");
-                    CurDrawable_DrawFrameNum_Var = null;
-                    return null;
-                }
-
-                //CurDrawable_Static = draw.m_StaticVirtOvver == 1;
-
-                _curDraw = draw.CurDraw;
-            }
-            else if (curdraw.DrawType == DrawableType.StateMachine_NodeEvent || 
-                curdraw.DrawType == DrawableType.StateMachine_TransitionEvent || 
-                curdraw.DrawType == DrawableType.StateMachine_TransitionCondition || 
-                curdraw.DrawType == DrawableType.StateMachine_TransitionPosition)
+            switch (curdraw.DrawType)
             {
-                if (CurClass.SMachineSaveData == null)
-                {
-                    curdraw.DrawType = DrawableType.Undefined;
-                    CurDrawable_DrawFrameNum_Var = null;
-                    return null;
-                }
-
-                m_StateMachineDrawbl draw = CurClass.SMachineSaveData.GetDrawbl(curdraw.ID, curdraw.DrawType);
-
-                if (draw == null)
-                {
-                    curdraw.DrawType = DrawableType.Undefined;
-                    CurDrawable_DrawFrameNum_Var = null;
-                    return null;
-                }
-
-                _curDraw = draw;
+                case DrawableType.Constructor:
+                    _curDraw = CurClass.ClassConstructors.Find(x => x.Obj_ID == curdraw.ID);
+                    break;
+
+                case DrawableType.Method:
+
+                    ScriptFunction drawf = CurClass.Functions.Find(x => x.Obj_ID == curdraw.ID);
+
+                    if (drawf == null)
+                    {
+                        curdraw.DrawType = DrawableType.Undefined;
+                        CurDrawable_DrawFrameNum_Var = null;
+                        return null;
+                    }
+
+                    _curDraw = drawf;
+                    break;
+
+                case DrawableType.PropertyGet:
+
+                    ScriptProperty drawp = CurClass.ScriptProperties.Find(x => x.PropertyID == curdraw.ID);
+
+                    if (drawp == null)
+                    {
+                        curdraw.DrawType = DrawableType.Undefined;
+                        if (Options.b_ShowDebug) Debug.Log("CDR Null prop Get");
+                        CurDrawable_DrawFrameNum_Var = null;
+                        return null;
+                    }
+
+                    _curDraw = drawp.CurDraw;
+                    break;
+
+                case DrawableType.PropertySet:
+                    ScriptProperty draws = CurClass.ScriptProperties.Find(x => x.PropertyID == curdraw.ID);
+
+                    if (draws == null)
+                    {
+                        curdraw.DrawType = DrawableType.Undefined;
+                        if (Options.b_ShowDebug) Debug.Log("CDR Null prop Set");
+                        CurDrawable_DrawFrameNum_Var = null;
+                        return null;
+                    }
+
+                    _curDraw = draws.CurDraw;
+                    break;
+
+                case DrawableType.StateMachine_NodeEvent:
+                case DrawableType.StateMachine_TransitionEvent:
+                case DrawableType.StateMachine_TransitionCondition:
+                case DrawableType.StateMachine_TransitionPosition:
+
+                    if (CurClass.SMachineSaveData == null)
+                    {
+                        curdraw.DrawType = DrawableType.Undefined;
+                        CurDrawable_DrawFrameNum_Var = null;
+                        return null;
+                    }
+
+                    m_StateMachineDrawbl drawm = CurClass.SMachineSaveData.GetDrawbl(curdraw.ID, curdraw.DrawType);
+
+                    if (drawm == null)
+                    {
+                        curdraw.DrawType = DrawableType.Undefined;
+                        CurDrawable_DrawFrameNum_Var = null;
+                        return null;
+                    }
+
+                    _curDraw = drawm;
+                    break;
+
+                case DrawableType.Undefined:
+                default:
+                    break;
             }
 
-
             _drawType = curdraw.DrawType;
             _drawId = curdraw.ID;
 
-
-            //if(Options.b_ShowDebug)Debug.Log("_curDraw not found: " + _curDraw + " type: " + curdraw.DrawType);
-
-            CurDrawable_DrawFrameNum_Var = _curDraw;
-            return CurDrawable_DrawFrameNum_Var;
+            return CurDrawable_DrawFrameNum_Var = _curDraw;
         }
         set
         {
             CurDrawable_DrawFrameNum_Var = _curDraw = value;
             CurClass.CurrentDrawable.ID = _curDraw.Obj_ID;
 
-
             if (_curDraw is ScriptClass)
                 CurClass.CurrentDrawable.DrawType = DrawableType.Class;
             else if (_curDraw is ScriptClassConstructor)
@@ -302,20 +243,12 @@
                 CurClass.CurrentDrawable.DrawType = DrawableType.Method;
             else if (_curDraw.OwnerProperty != null)
             {
-           
                 ScriptProperty curProp = _curDraw.OwnerProperty as ScriptProperty;
-                //if (curProp.OwnerProperty != null)
-                {
-                    CurClass.CurrentDrawable.ID = curProp.PropertyID;
-                    if (curProp.Drawable_Set == value)
-                        CurClass.CurrentDrawable.DrawType = DrawableType.PropertySet;
-                    else
-                        CurClass.CurrentDrawable.DrawType = DrawableType.PropertyGet;
-                }
-                //else
-                {
-                //    if(Options.b_ShowDebug)Debug.Log("curProp.OwnerProperty is null");
-                }
+                CurClass.CurrentDrawable.ID = curProp.PropertyID;
+                if (curProp.Drawable_Set == value)
+                    CurClass.CurrentDrawable.DrawType = DrawableType.PropertySet;
+                else
+                    CurClass.CurrentDrawable.DrawType = DrawableType.PropertyGet;
             }
         }
     }
@@ -357,7 +290,6 @@
 
                 return draw.m_StaticVirtOvver == 1;
             }
-
             else if (curdraw.DrawType == DrawableType.PropertySet)
             {
                 ScriptProperty draw = CurClass.ScriptProperties.Find(x => x.PropertyID == curdraw.ID);
@@ -373,53 +305,30 @@
         }
     }
 
-
     private static BaseScriptObject _curDraw
     {
-        get
-        {
-            return CurScript._curDraw;
-        }
-        set
-        {
-            CurScript._curDraw = value;
-        }
+        get { return CurScript._curDraw; }
+        set { CurScript._curDraw = value; }
     }
+
     private static DrawableType _drawType
     {
-        get
-        {
-            return CurClass._drawType;
-        }
-        set
-        {
-            CurClass._drawType = value;
-        }
+        get { return CurClass._drawType; }
+        set { CurClass._drawType = value; }
     }
 
-
     private static int _drawId
     {
-        get
-        {
-            return CurClass._drawId;
-        }
-        set
-        {
-            CurClass._drawId = value;
-        }
+        get { return CurClass._drawId; }
+        set { CurClass._drawId = value; }
     }
 
     private static bool CurDrawable_IsProp
     {
         get
         {
-            return CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet || CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet;
+            return CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet 
+                || CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet;
         }
     }
-
-  
-
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DebugClassValueWindow.cs Editor/m_DebugClassValueWindow.cs
--- .Editor/m_DebugClassValueWindow.cs	2018-06-30 08:59:18.509616300 +0700
+++ Editor/m_DebugClassValueWindow.cs	2018-06-30 09:02:03.835514800 +0700
@@ -1,14 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
 using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -38,18 +33,17 @@
 
         public void Draw()
         {
-           // if (!Application.isPlaying)
-           //     b_Active = false;
+            // if (!Application.isPlaying)
+            //     b_Active = false;
 
             if (b_Active)
             {
-                DrawRect = CreateRect(WindowPos.x, WindowPos.y, PosX, PosY);
+                DrawRect = new Rect(WindowPos.x, WindowPos.y, PosX, PosY);
 
                 if (_LMB_Down || _RMB_Down)
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(Event.current.mousePosition))
@@ -61,20 +55,22 @@
                 GUI.Window(110, DrawRect, DebugDrawWindow, "", Res.EmptyStyle);
             }
         }
+
         private float PosX = 200;
         private float PosY = 55;
 
         private DebugClass_ValueDrawer TempVarHolder = new DebugClass_ValueDrawer();
+
         void DebugDrawWindow(int windowID)
         {
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
 
             PosY = 3;
             PosX = 0;
 
             if (PinOwner.DebugValue == null)
             {
-                GUI.Label(CreateRect(7, 7, 100, 20), "Null", Res.Label);
+                GUI.Label(new Rect(7, 7, 100, 20), "Null", Res.Label);
                 PosX = 40;
                 PosY += 20;
                 return;
@@ -82,13 +78,11 @@
 
             Type drawType = PinOwner.DebugValue.GetType();
 
-           
             DrawClassMain(0, drawType, TempVarHolder, PinOwner.DebugValue);
 
             PosY += 3;
         }
 
-
         private void DrawClassMain(float posX, Type dbgType, DebugClass_ValueDrawer tempVar, object value)
         {
             tempVar.TempVar.TempVarPrimitive = value;
@@ -106,24 +100,18 @@
                     Type elemType = field.FieldType.GetElementType();
                     IEnumerable enumerable = subValue.TempVar.TempVarPrimitive as IEnumerable;
 
-            
-
-
-
                     string arrayLabel = field.Name + ": [" + subValue.ArraySize + "] ";
-            
 
                     float labelOffset = CalcStringPixelsX(arrayLabel, Res.Label);
 
-                    GUI.Box(CreateRect(3 + posX, PosY, labelOffset + subValue.DrawSize.x + 7, subValue.DrawSize.y + 2), "", Res.Box);
-
+                    GUI.Box(new Rect(3 + posX, PosY, labelOffset + subValue.DrawSize.x + 7, subValue.DrawSize.y + 2), "", Res.Box);
 
                     subValue.DrawSize = new Vector2(0, 0);
                     if (subValue.ArraySize > 0)
                     {
                         Texture btex = subValue.Opened ? Res.ListButtonOpen : Res.ListButtonClose;
 
-                        if(GUI.Button(CreateRect(5 + posX, PosY + 5, 18, 18), btex, Res.EmptyStyle))
+                        if (GUI.Button(new Rect(5 + posX, PosY + 5, 18, 18), btex, Res.EmptyStyle))
                         {
                             subValue.Opened = !subValue.Opened;
                         }
@@ -131,13 +119,13 @@
                         posX += 10;
                     }
 
-                    GUI.Label(CreateRect(5 + posX, PosY, labelOffset, 18), arrayLabel, Res.Label);
+                    GUI.Label(new Rect(5 + posX, PosY, labelOffset, 18), arrayLabel, Res.Label);
 
                     PosY += 2;
-                  
+
                     subValue.ArraySize = 0;
-                    if (enumerable != null) 
-                    {         
+                    if (enumerable != null)
+                    {
                         posX += labelOffset + 5;
                         foreach (object element in enumerable)
                         {
@@ -148,10 +136,9 @@
                                 DebugClass_ValueDrawer elemSubValue = subValue.GetSubValue("&" + field.Name + subValue.ArraySize + "_");
                                 elemSubValue.TempVar.TempVarPrimitive = element;
 
-
                                 string subValueLabel = "Element " + subValue.ArraySize;
 
-                                GUI.Box(CreateRect(new Vector2(3 + posX, PosY), elemSubValue.DrawSize + new Vector2(2, 2)), "", Res.Box);
+                                GUI.Box(new Rect(new Vector2(3 + posX, PosY), elemSubValue.DrawSize + new Vector2(2, 2)), "", Res.Box);
 
                                 GUI.enabled = false;
                                 elemSubValue.DrawSize = DrawTempVar(elemSubValue.TempVar, elemType, 5 + posX, PosY, subValueLabel, null, 0);
@@ -160,13 +147,11 @@
 
                                 subValue.DrawSize.y += elemSubValue.DrawSize.y + 4;
 
-
                                 PosX = Mathf.Max(PosX, elemSubValue.DrawSize.x + posX + 10);
                                 PosY += elemSubValue.DrawSize.y + 2;
 
-
                                 PosY += 2;
-                            }                
+                            }
                         }
                         posX -= labelOffset + 5;
                     }
@@ -179,7 +164,7 @@
                     if (subValue.ArraySize < 1 || !subValue.Opened)
                     {
                         PosY += 18;
-                        subValue.DrawSize.y += 18;   
+                        subValue.DrawSize.y += 18;
                     }
 
                     if (subValue.ArraySize > 0)
@@ -187,7 +172,6 @@
                         subValue.DrawSize += new Vector2(10, 0);
                         posX -= 10;
                     }
-
                 }
                 else if (field.FieldType.GetConstructors().Length == 0 || field.FieldType.IsPrimitive || field.FieldType.IsEnum || field.FieldType == typeof(Type) || field.FieldType == typeof(string))
                 {
@@ -196,13 +180,11 @@
                 /*
                 else if (field.FieldType == typeof(Vector2) || field.FieldType == typeof(Vector3) || field.FieldType == typeof(Vector4))
                 {
-
                     if (field.FieldType == typeof(Vector2))
                     {
                         Vector2 vecResult = new Vector2();
                         subValue.TempVar._4Value
 
-
                         if (EditorGUI.EndChangeCheck())
                         {
                             field.SetValue(tempVar.TempVar.TempVar_Primitive, subValue.TempVar.TempVar_Primitive);
@@ -223,18 +205,16 @@
 
         private void DrawPrimitive(float posX, DebugClass_ValueDrawer tempVar, FieldInfo field, DebugClass_ValueDrawer subValue)
         {
-            GUI.Box(CreateRect(new Vector2(3 + posX, PosY), subValue.DrawSize + new Vector2(2, 2)), "", Res.Box);
+            GUI.Box(new Rect(new Vector2(3 + posX, PosY), subValue.DrawSize + new Vector2(2, 2)), "", Res.Box);
 
             EditorGUI.BeginChangeCheck();
 
-            
             subValue.DrawSize = DrawTempVar(subValue.TempVar, field.FieldType, 5 + posX, PosY, field.Name, null, 0);
 
             tempVar.DrawSize.x = Mathf.Max(tempVar.DrawSize.x, subValue.DrawSize.x + 2);
 
             tempVar.DrawSize.y += subValue.DrawSize.y + 4;
 
-
             PosX = Mathf.Max(PosX, subValue.DrawSize.x + posX + 10);
             PosY += subValue.DrawSize.y + 2;
 
@@ -250,24 +230,22 @@
             string subValueLabel = fieldName + ":";
             float labelOffset = CalcStringPixelsX(subValueLabel, Res.Label);
 
-            GUI.Box(CreateRect(3 + posX, PosY, labelOffset + subValue.DrawSize.x + 7, subValue.DrawSize.y + 2), "", Res.Box);
-
+            GUI.Box(new Rect(3 + posX, PosY, labelOffset + subValue.DrawSize.x + 7, subValue.DrawSize.y + 2), "", Res.Box);
 
             Texture btex = subValue.Opened ? Res.ListButtonOpen : Res.ListButtonClose;
-            if (GUI.Button(CreateRect(5 + posX, PosY + 5, 18, 18), btex, Res.EmptyStyle))
+            if (GUI.Button(new Rect(5 + posX, PosY + 5, 18, 18), btex, Res.EmptyStyle))
             {
                 subValue.Opened = !subValue.Opened;
             }
 
             posX += 10;
-            GUI.Label(CreateRect(5 + posX, PosY, labelOffset, 18), subValueLabel, Res.Label);
+            GUI.Label(new Rect(5 + posX, PosY, labelOffset, 18), subValueLabel, Res.Label);
 
             PosY += 2;
-            
+
             if (subValue.Opened)
             {
                 DrawClassMain(posX + labelOffset + 5, fieldType, subValue, subValue.TempVar.TempVarPrimitive);
-           
             }
             else
             {
@@ -282,8 +260,6 @@
             posX -= 10;
 
             PosY += 2;
-
-          
         }
 
         private void DrawNull(float posX, DebugClass_ValueDrawer tempVar, FieldInfo field)
@@ -291,9 +267,9 @@
             string nullMsg = field.Name + ":  Null";
             float labelOffset = CalcStringPixelsX(nullMsg, Res.Label);
 
-            GUI.Box(CreateRect(3 + posX, PosY, labelOffset + 5, 18), "", Res.Box);
+            GUI.Box(new Rect(3 + posX, PosY, labelOffset + 5, 18), "", Res.Box);
 
-            GUI.Label(CreateRect(5 + posX, PosY, labelOffset, 18), nullMsg, Res.Label);
+            GUI.Label(new Rect(5 + posX, PosY, labelOffset, 18), nullMsg, Res.Label);
 
             PosX = Mathf.Max(PosX, labelOffset + 10 + posX);
 
@@ -320,7 +296,7 @@
             DebugClass_ValueDrawer retVal = null;
             SubValues.TryGetValue(valueName, out retVal);
 
-            if(retVal == null)
+            if (retVal == null)
             {
                 retVal = new DebugClass_ValueDrawer();
                 SubValues.Add(valueName, retVal);
@@ -330,22 +306,11 @@
         }
     }
 
-
-
-
-
-
-
-
-
-
     /*
             CurScript.CurScriptSerialized = new SerializedObject(CurScript.SelectedDebugObject.script);
 
-
             Type dbgType = PinOwner.DebugValue.GetType();
 
-
             SerializedProperty varProp = CurScript.CurScriptSerialized.FindProperty("NewVariable");
 
             if(varProp == null)
@@ -353,7 +318,7 @@
                 //if(Options.b_ShowDebug)Debug.Log("Prop null");
                 return;
             }
-            foreach (var field in dbgType.GetFields().ToArray())
+            foreach (var field in dbgType.GetFields())
             {
                 //if(Options.b_ShowDebug)Debug.Log("F: " + field.Name);
 
@@ -361,19 +326,15 @@
 
                 if (serializedProperty != null)// && serializedProperty.type == Config.NodeRefType.PType.Name)
                 {
-                   
-
-
-
                     EditorGUI.BeginChangeCheck();
 
                     try
                     {
                         float propHeight = EditorGUI.GetPropertyHeight(serializedProperty) + 3;
 
-                        GUI.Box(CreateRect(3, PosY, Width - 6, propHeight), "", Res.GUIBox);
+                        GUI.Box(new Rect(3, PosY, Width - 6, propHeight), "", Res.GUIBox);
 
-                        Rect propertyDrawRect = CreateRect(5, PosY, Width - 10, propHeight);
+                        Rect propertyDrawRect = new Rect(5, PosY, Width - 10, propHeight);
                         EditorGUI.PropertyField(propertyDrawRect, serializedProperty, true);
                         PosY += propHeight;
                     }
@@ -382,7 +343,6 @@
                         if(Options.b_ShowDebug)Debug.Log("Error property: " + field.Name);
                     }
 
-
                     //GUI.Box(propertyDrawRect, "");
 
                     if (EditorGUI.EndChangeCheck())
@@ -397,4 +357,4 @@
                 PosY += 3;
             }
             */
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DebugPinOptions.cs Editor/m_DebugPinOptions.cs
--- .Editor/m_DebugPinOptions.cs	2018-06-30 08:59:18.512617500 +0700
+++ Editor/m_DebugPinOptions.cs	2018-06-30 09:02:03.836515100 +0700
@@ -1,21 +1,16 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
+﻿using Nottorus_Debug;
 using System;
-using System.Reflection;
 using System.Linq;
 using System.Xml.Serialization;
-using Nottorus_Debug;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     private float d_Width = 300;
 
-
     private Rect DrawRect;
+
     public void DrawPinDebugOptions()
     {
         if (CurScript == null || CurDrawable == null || !CurScript.b_DebugMode || CurDrawable.DebugPinValues.Count == 0)
@@ -27,31 +22,30 @@
             {
                 LMB_Down_Deleg = delegate
                 {
-
                 };
 
                 RMB_Up_Deleg = delegate
                 {
-
                 };
             }
         }
 
-        DrawRect = CreateRect(BPE.position.width - d_Width - 5, 21 + BR_Offset + DTM_Offset + 65, d_Width, DrawPosY);
+        DrawRect = new Rect(BPE.position.width - d_Width - 5, 21 + BR_Offset + DTM_Offset + 65, d_Width, DrawPosY);
         GUI.Window(110, DrawRect, DrawPinDebugWindow, "");
     }
 
     private float DrawPosY = 0;
+
     private void DrawPinDebugWindow(int windowId)
     {
         //GUI.FocusWindow(windowId);
         DrawPosY = 30;
-        Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
+        DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
 
-        GUI.Label(CreateRect(d_Width / 2 - 60, 4, 100, 30), "Pins debug", Res.BigWindowLabel);
+        GUI.Label(new Rect(d_Width / 2 - 60, 4, 100, 30), "Pins debug", Res.BigWindowLabel);
 
         //bool prToScr = false;
-        foreach (var dPin in CurDrawable.DebugPinValues.ToList())
+        foreach (var dPin in CurDrawable.DebugPinValues)
         {
             //prToScr = prToScr || dPin.DebugMode_PrScreen;
             DrawDBGPin(dPin);
@@ -59,6 +53,7 @@
     }
 
     private static NottorusDebug_PrintToScreen _screenDebugScript;
+
     private static NottorusDebug_PrintToScreen ScreenDebugScript
     {
         get
@@ -71,21 +66,22 @@
 
             if (_screenDebugScript == null)
             {
-                var go = new GameObject("NottorusDebug_PrintToScreen");
-                go.hideFlags = HideFlags.DontSave;
+                var go = new GameObject("NottorusDebug_PrintToScreen")
+                {
+                    hideFlags = HideFlags.DontSave
+                };
                 _screenDebugScript = go.AddComponent<NottorusDebug_PrintToScreen>();
             }
-            
 
             return _screenDebugScript;
         }
     }
 
-
     private Rect CurDrawRect;
+
     private void DrawDBGPin(DebugPinConfig dPin)
     {
-        CurDrawRect = CreateRect(3, DrawPosY, d_Width - 26, 20);
+        CurDrawRect = new Rect(3, DrawPosY, d_Width - 26, 20);
         string name = dPin.GetDisplayName;
         GUI.Box(CurDrawRect, "");
 
@@ -95,14 +91,13 @@
         GUI.Box(lerpRect, "", Res.Box);
 
         ////////////////////////
-        Rect toggleRect = CreateRect(CurDrawRect.x + 5, CurDrawRect.y + 7, 8, 8);
+        Rect toggleRect = new Rect(CurDrawRect.x + 5, CurDrawRect.y + 7, 8, 8);
 
         if (dPin.Opened)
             GUI.DrawTexture(toggleRect, Res.ListButtonOpen);
         else
             GUI.DrawTexture(toggleRect, Res.ListButtonClose);
 
-
         if (_LMB_Down && CurDrawRect.Contains(Event.current.mousePosition))
         {
             DebugPinConfig pinDeleg = dPin;
@@ -111,7 +106,7 @@
         ////////////////////////
 
         var labelRect = CurDrawRect;
-        
+
         labelRect.x += 15;
 
         GUI.Label(labelRect, name, Res.Label);
@@ -151,13 +146,11 @@
 
         dPin.DrawHeight -= 20;
 
-
         var deleteRect = CurDrawRect;
 
         deleteRect.x += deleteRect.width;
         deleteRect.width = deleteRect.height;
 
-
         deleteRect.width -= 4;
         deleteRect.height -= 4;
 
@@ -188,7 +181,6 @@
         }
     }
 
-
     public static void AddDebugPin(int nodeId, int pinId, string nodeName, string pinName, Type pinType)
     {
         var dbgPin = CurDrawable.DebugPinValues.Find(x => x.NodeId == nodeId && x.PinId == pinId);
@@ -202,7 +194,9 @@
 
     public class DebugPinConfig
     {
-        public DebugPinConfig() { }
+        public DebugPinConfig()
+        {
+        }
 
         public DebugPinConfig(int nodeId, int pinId, string nodeName, string pinName, Type pinType)
         {
@@ -222,11 +216,11 @@
         public string NodeName = "";
         public string PinName = "";
 
-        public bool Allowed_DebugMode_DrawLineRay = false;   
+        public bool Allowed_DebugMode_DrawLineRay = false;
 
-        public bool DebugMode_Console = false;   
+        public bool DebugMode_Console = false;
         public bool DebugMode_PrScreen = false;
-        public bool DebugMode_DrawRay = false;   
+        public bool DebugMode_DrawRay = false;
         public bool DebugMode_DrawLine = false;
         public int ScreenDraw_PosX = 0;
         public int DrawColor = 0;
@@ -236,14 +230,14 @@
         {
             DbugValue = newValue + "";
 
-            if(DebugMode_Console)
+            if (DebugMode_Console)
             {
                 Debug.Log(newValue);
             }
-            if(DebugMode_PrScreen && Application.isPlaying)
+            if (DebugMode_PrScreen && Application.isPlaying)
             {
                 var dbgScreen = ScreenDebugScript;
-                if(dbgScreen != null)
+                if (dbgScreen != null)
                 {
                     var color = Color.white;
 
@@ -268,23 +262,21 @@
 
         private string DbugValue = "";
 
-
         public string GetDisplayName
         {
             get
             {
                 string dbgVal = "";
 
-                if(!string.IsNullOrEmpty(DbugValue) && DbugValue != "-77777")
+                if (!string.IsNullOrEmpty(DbugValue) && DbugValue != "-77777")
                 {
                     dbgVal = " = " + DbugValue;
                 }
 
-
                 return NodeName + "." + PinName + dbgVal;
             }
         }
     }
 }
 
-//
\ No newline at end of file
+//
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DebugTimeMachine.cs Editor/m_DebugTimeMachine.cs
--- .Editor/m_DebugTimeMachine.cs	2018-06-30 08:59:18.514618100 +0700
+++ Editor/m_DebugTimeMachine.cs	2018-06-30 09:02:03.837515700 +0700
@@ -1,15 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-using Nottorus_Debug;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static DebugTimeMachine DebugTM = new DebugTimeMachine();
@@ -19,7 +11,7 @@
     {
         private const float Height = 30;
         private List<DebugTM_Point> States = new List<DebugTM_Point>();
-     
+
         private int PlayPos = 0;
         private float PlayPosSlider = 0;
         private int CurFrame = 0;
@@ -42,54 +34,51 @@
         }
 
         private Rect DrawRect;
+
         public void Draw()
         {
             DTM_Offset = 0;
             if (!CurScript.b_DebugMode)
                 return;
 
-            DrawRect = CreateRect(ToolbarRect.width, ControlBarRect.height + 20, BPE.position.width - ToolbarRect.width, Height);
+            DrawRect = new Rect(ToolbarRect.width, ControlBarRect.height + 20, BPE.position.width - ToolbarRect.width, Height);
             GUI.Box(DrawRect, "", Res.Box);
             DTM_Offset = Height;
 
             GUI.Window(67, DrawRect, DTM_Window, "", Res.Box);
         }
 
-
         private void DTM_Window(int windowid)
         {
-            Rect recordRect = CreateRect(10, 5, 100, 20);
-
+            Rect recordRect = new Rect(10, 5, 100, 20);
 
             var optionRecord = Options.DebugStateMechineRecordOn;
 
-            DrawCheckBox(recordRect, "Record", ref Options.DebugStateMechineRecordOn);
+            Options.DebugStateMechineRecordOn = DrawCheckBox(recordRect, "Record", Options.DebugStateMechineRecordOn);
 
-            if(optionRecord != Options.DebugStateMechineRecordOn)
+            if (optionRecord != Options.DebugStateMechineRecordOn)
             {
                 if (!Options.DebugStateMechineRecordOn)
                     PlayPosSlider = PlayPos = PrevPlayPos = States.Count - 1;
                 EditorOptions.Save();
             }
 
-            Rect clearRect = CreateRect(80, 5, 50, 16);
+            Rect clearRect = new Rect(80, 5, 50, 16);
 
             if (GUI.Button(clearRect, "Clear", Res.ButtonSimple))
             {
                 States = new List<DebugTM_Point>();
             }
-        
 
             GUI.enabled = States.Count > 0 && (!Options.DebugStateMechineRecordOn || EditorApplication.isPaused || !EditorApplication.isPlaying);
 
-            GUI.Label(CreateRect(140, 0, 100, 20), "FrameNum: " + CurFrame, Res.Label);
-            GUI.Label(CreateRect(140, 12, 100, 20), "Data Num:  " + PlayPos, Res.Label);
-
+            GUI.Label(new Rect(140, 0, 100, 20), "FrameNum: " + CurFrame, Res.Label);
+            GUI.Label(new Rect(140, 12, 100, 20), "Data Num:  " + PlayPos, Res.Label);
 
-            //GUI.Label(CreateRect(DrawRect.width - 45, 3, DrawRect.width - 250, 20), (States.Count - 1) + "", Res.Label);
+            //GUI.Label(new Rect(DrawRect.width - 45, 3, DrawRect.width - 250, 20), (States.Count - 1) + "", Res.Label);
 
             EditorGUI.BeginChangeCheck();
-            PlayPosSlider = GUI.HorizontalSlider(CreateRect(250, 5, DrawRect.width - (250 + 10), 20), PlayPosSlider, 0, States.Count - 1);
+            PlayPosSlider = GUI.HorizontalSlider(new Rect(250, 5, DrawRect.width - (250 + 10), 20), PlayPosSlider, 0, States.Count - 1);
 
             if (EditorGUI.EndChangeCheck())
             {
@@ -100,6 +89,7 @@
         }
 
         private int PrevPlayPos = 0;
+
         private void SetNewPos(int newPos)
         {
             if (PrevPlayPos == newPos)
@@ -111,7 +101,7 @@
             int counter = 0;
             for (int i = PrevPlayPos; i != newPos; i += increment)
             {
-                if(reverse)
+                if (reverse)
                     _debugBubblesDrawOffset -= 0.01f;
                 else
                     _debugBubblesDrawOffset += 0.01f;
@@ -130,8 +120,6 @@
         }
     }
 
-
-
     public class DebugTM_Point
     {
         public object NewValue = "-";
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DefaultNodes.cs Editor/m_DefaultNodes.cs
--- .Editor/m_DefaultNodes.cs	2018-06-30 08:59:18.517618200 +0700
+++ Editor/m_DefaultNodes.cs	2018-06-30 09:02:03.839517600 +0700
@@ -1,12 +1,12 @@
-﻿using UnityEngine;
-using System;
-using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
 using System.Linq;
+using UnityEditor;
 
 public partial class Nottorus : EditorWindow
 {
     private static List<NodeGenPins> DefaultNodes_FlowControl = null;
+
     public static List<NodeGenPins> GetDefaultNodes_FlowControl()
     {
         if (DefaultNodes_FlowControl != null)
@@ -14,239 +14,245 @@
 
         DefaultNodes_FlowControl = new List<NodeGenPins>();
 
-        NodeGenPins flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "FlowControl";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.FlowControl;
-        flowControlNode.ConnectorsInNames = new string[] { "" };//⇒
-        flowControlNode.ConnectorsOutNames = new string[] { "", "" };//→
+        NodeGenPins flowControlNode = new NodeGenPins
+        {
+            NodeName = "FlowControl",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.FlowControl,
+            ConnectorsInNames = new string[] { "" },//⇒
+            ConnectorsOutNames = new string[] { "", "" }//→
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "If";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(255, 0, 0, 50);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.If;
-        flowControlNode.InPins = new Type[] { typeof(bool) };
-        flowControlNode.InPinsNames = new string[] { "Condition" };
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "True", "False", "Finished" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "If",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(255, 0, 0, 50);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.If,
+            InPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "Condition" },
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "True", "False", "Finished" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "While Loop";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(0, 128, 0, 10);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.While;
-        flowControlNode.InPins = new Type[] { typeof(bool) };
-        flowControlNode.InPinsNames = new string[] { "Condition" };
-        flowControlNode.ConnectorsInNames = new string[] { "Start" };//, "Break"
-        flowControlNode.ConnectorsOutNames = new string[] { "Loop", "Finished" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "While Loop",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(0, 128, 0, 10);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.While,
+            InPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "Condition" },
+            ConnectorsInNames = new string[] { "Start" },//, "Break"
+            ConnectorsOutNames = new string[] { "Loop", "Finished" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Do while";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.DoWhile;
-        flowControlNode.InPins = new Type[] { typeof(bool) };
-        flowControlNode.InPinsNames = new string[] { "Condition" };
-        flowControlNode.ConnectorsInNames = new string[] { "Start" };//, "Break"
-        flowControlNode.ConnectorsOutNames = new string[] { "Do", "Finished" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Do while",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.DoWhile,
+            InPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "Condition" },
+            ConnectorsInNames = new string[] { "Start" },//, "Break"
+            ConnectorsOutNames = new string[] { "Do", "Finished" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "ForEach loop";// (with index)
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.ForEachIndex;
-        flowControlNode.InPins = new Type[] { typeof(ArrayType) };
-        flowControlNode.InPinsNames = new string[] { "Array" };
-        flowControlNode.OutPins = new Type[] { typeof(NotDefined) };
-        flowControlNode.OutPinsNames = new string[] { "Element" };
-        flowControlNode.ConnectorsInNames = new string[] { "Start" };
-        flowControlNode.ConnectorsOutNames = new string[] { "Loop", "Finished" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "ForEach loop",// (with index)
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.ForEachIndex,
+            InPins = new Type[] { typeof(ArrayType) },
+            InPinsNames = new string[] { "Array" },
+            OutPins = new Type[] { typeof(NotDefined) },
+            OutPinsNames = new string[] { "Element" },
+            ConnectorsInNames = new string[] { "Start" },
+            ConnectorsOutNames = new string[] { "Loop", "Finished" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "For Loop";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.For;
-        flowControlNode.InPins = new Type[] { typeof(int), typeof(int), typeof(int) };
-        flowControlNode.InPinsNames = new string[] { "from", "to", "increment" };
-
-        flowControlNode.OutPins = new Type[] {  typeof(int) };
-        flowControlNode.OutPinsNames = new string[] { "Index" };
-
-        flowControlNode.ConnectorsInNames = new string[] { "Start" };
-        flowControlNode.ConnectorsOutNames = new string[] { "Loop", "Finished" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "For Loop",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.For,
+            InPins = new Type[] { typeof(int), typeof(int), typeof(int) },
+            InPinsNames = new string[] { "from", "to", "increment" },
+
+            OutPins = new Type[] { typeof(int) },
+            OutPinsNames = new string[] { "Index" },
+
+            ConnectorsInNames = new string[] { "Start" },
+            ConnectorsOutNames = new string[] { "Loop", "Finished" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
         /////////////////////////////////////////////////////////////////
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Get/Set array element"; 
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.ArrayElem;
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.InPins = new Type[] { typeof(ArrayType), typeof(int), typeof(AnyType) };
-        flowControlNode.InPinsNames = new string[] { "Array", "Index", "Value"};
-        flowControlNode.OutPins = new Type[] { typeof(AnyType) };
-        flowControlNode.OutPinsNames = new string[] { "Element", };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Get/Set array element",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.ArrayElem,
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "" },
+            InPins = new Type[] { typeof(ArrayType), typeof(int), typeof(AnyType) },
+            InPinsNames = new string[] { "Array", "Index", "Value" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "Element", }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-
         /////////////////////////////////////////////////////////////////
 
-
-
-
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Set value";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.SetValue;
-        flowControlNode.ConnectorsInNames = new string[] { "Set", };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.InPins = new Type[] { typeof(AnyType), typeof(AnyType) };
-        flowControlNode.InPinsNames = new string[] { "Variable", "New value" };
-        flowControlNode.OutPins = new Type[] { };
-        flowControlNode.OutPinsNames = new string[] { "", };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Set value",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.SetValue,
+            ConnectorsInNames = new string[] { "Set", },
+            ConnectorsOutNames = new string[] { "" },
+            InPins = new Type[] { typeof(AnyType), typeof(AnyType) },
+            InPinsNames = new string[] { "Variable", "New value" },
+            OutPins = new Type[] { },
+            OutPinsNames = new string[] { "", }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Delegate return";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.DelegateReturn;
-        flowControlNode.ConnectorsInNames = new string[] { "Delegate return", };
-
-        flowControlNode.InPins = new Type[] { typeof(AnyDelegateType) };
-        flowControlNode.InPins_IsDelegate = new bool[] { true };
-        flowControlNode.InPinsNames = new string[] { "Delegate" };     
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Delegate return",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.DelegateReturn,
+            ConnectorsInNames = new string[] { "Delegate return", },
+
+            InPins = new Type[] { typeof(AnyDelegateType) },
+            InPins_IsDelegate = new bool[] { true },
+            InPinsNames = new string[] { "Delegate" }
+        };
 
         DefaultNodes_FlowControl.Add(flowControlNode);
 
         /////////////////////////////////////////////////////////////////
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "break (loop)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Break;
-        flowControlNode.InPins = new Type[] { };
-        flowControlNode.InPins_IsDelegate = new bool[] { };
-        flowControlNode.InPinsNames = new string[] { "" };
-        flowControlNode.ConnectorsInNames = new string[] { "Break", };
-        flowControlNode.ConnectorsOutNames = new string[] { };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "break (loop)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Break,
+            InPins = new Type[] { },
+            InPins_IsDelegate = new bool[] { },
+            InPinsNames = new string[] { "" },
+            ConnectorsInNames = new string[] { "Break", },
+            ConnectorsOutNames = new string[] { }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "continue (loop)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Continue;
-        flowControlNode.InPins = new Type[] { };
-        flowControlNode.InPins_IsDelegate = new bool[] { };
-        flowControlNode.InPinsNames = new string[] { "" };
-        flowControlNode.ConnectorsInNames = new string[] { "Next", };
-        flowControlNode.ConnectorsOutNames = new string[] { };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "continue (loop)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Continue,
+            InPins = new Type[] { },
+            InPins_IsDelegate = new bool[] { },
+            InPinsNames = new string[] { "" },
+            ConnectorsInNames = new string[] { "Next", },
+            ConnectorsOutNames = new string[] { }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Print To Console";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.ConsolePrint;
-        flowControlNode.InPins = new Type[] { typeof(string) };
-        flowControlNode.InPins_IsDelegate = new bool[] { };
-        flowControlNode.InPinsNames = new string[] { "" };
-        flowControlNode.ConnectorsInNames = new string[] { "Print", };
-        flowControlNode.ConnectorsOutNames = new string[] { "Next" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Print To Console",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.ConsolePrint,
+            InPins = new Type[] { typeof(string) },
+            InPins_IsDelegate = new bool[] { },
+            InPinsNames = new string[] { "" },
+            ConnectorsInNames = new string[] { "Print", },
+            ConnectorsOutNames = new string[] { "Next" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
         /////////////////////////////////////////////////////////////////
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Try-Catch-Finally";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.TryCatchFinally;
-
-      
-        flowControlNode.InPins = new Type[] { typeof(TryCatch_InPin_Config) };
-        flowControlNode.InPinsNames = new string[] { "Exception" };
-
-        flowControlNode.OutPins = new Type[] { typeof(Exception) };
-        flowControlNode.OutPinsNames = new string[] { "Exception" };
-
-        flowControlNode.ConnectorsInNames = new string[] { "", };
-        flowControlNode.ConnectorsOutNames = new string[] { "Try", "Catch", "Finally", "Next code" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Try-Catch-Finally",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.TryCatchFinally,
+
+            InPins = new Type[] { typeof(TryCatch_InPin_Config) },
+            InPinsNames = new string[] { "Exception" },
+
+            OutPins = new Type[] { typeof(Exception) },
+            OutPinsNames = new string[] { "Exception" },
+
+            ConnectorsInNames = new string[] { "", },
+            ConnectorsOutNames = new string[] { "Try", "Catch", "Finally", "Next code" }
+        };
 
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-
         /////////////////////////////////////////////////////////////////
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Increment/Decrement value";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.IncDecrement;
-        flowControlNode.InPins = new Type[] { typeof(AnyType) };
-        flowControlNode.InPinsNames = new string[] { "Value" };
-        flowControlNode.OutPins = new Type[] { typeof(UndefinedType) };
-        flowControlNode.OutPinsNames = new string[] { "result" };
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.Operation = "++";
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Increment/Decrement value",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.IncDecrement,
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "Value" },
+            OutPins = new Type[] { typeof(UndefinedType) },
+            OutPinsNames = new string[] { "result" },
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "" },
+            Operation = "++"
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-   
-
-
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Switch";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Switch;
-        flowControlNode.ConnectorsInNames = new string[] { "Switch" };//⇒
-        flowControlNode.ConnectorsOutNames = new string[] { "Case 0", "Default", "Next code" };
-        flowControlNode.InPins = new Type[] { typeof(ValueType), typeof(UndefinedType) };
-        flowControlNode.InPinsNames = new string[] { "value", "Case 0" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Switch",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Switch,
+            ConnectorsInNames = new string[] { "Switch" },//⇒
+            ConnectorsOutNames = new string[] { "Case 0", "Default", "Next code" },
+            InPins = new Type[] { typeof(ValueType), typeof(UndefinedType) },
+            InPinsNames = new string[] { "value", "Case 0" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
         /////////////////////////////////////////////////////////////////
@@ -265,119 +271,135 @@
         DefaultNodes_FlowControl.Add(flowControlNode);
         */
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "throw (exception)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Throw;
-        flowControlNode.ConnectorsInNames = new string[] { "throw exception" };
-        flowControlNode.ConnectorsOutNames = new string[] { };
-        flowControlNode.InPins = new Type[] { typeof(Exception) };
-        flowControlNode.InPinsNames = new string[] { "exception" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "throw (exception)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Throw,
+            ConnectorsInNames = new string[] { "throw exception" },
+            ConnectorsOutNames = new string[] { },
+            InPins = new Type[] { typeof(Exception) },
+            InPinsNames = new string[] { "exception" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "using (Disposable)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Using;
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "Disposable code", "Finished" };
-        flowControlNode.InPins = new Type[] { typeof(IDisposable) };
-        flowControlNode.InPinsNames = new string[] { "new Disposable object" };
-        flowControlNode.OutPins = new Type[] { typeof(UndefinedType) };
-        flowControlNode.OutPinsNames = new string[] { "Disposable variable" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "using (Disposable)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Using,
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "Disposable code", "Finished" },
+            InPins = new Type[] { typeof(IDisposable) },
+            InPinsNames = new string[] { "new Disposable object" },
+            OutPins = new Type[] { typeof(UndefinedType) },
+            OutPinsNames = new string[] { "Disposable variable" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "goto (Register position)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.GotoRegist;
-        flowControlNode.ConnectorsInNames = new string[] { "Set position" };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.InPins = new Type[] { typeof(string) };
-        flowControlNode.InPinsNames = new string[] { "Position name" };
-        flowControlNode.OutPins = new Type[] { };
-        flowControlNode.OutPinsNames = new string[] { };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "goto (Register position)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.GotoRegist,
+            ConnectorsInNames = new string[] { "Set position" },
+            ConnectorsOutNames = new string[] { "" },
+            InPins = new Type[] { typeof(string) },
+            InPinsNames = new string[] { "Position name" },
+            OutPins = new Type[] { },
+            OutPinsNames = new string[] { }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "goto (Go to position)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Goto;
-        flowControlNode.ConnectorsInNames = new string[] { "Set position" };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.InPins = new Type[] { typeof(string) };
-        flowControlNode.InPinsNames = new string[] { "Position name" };
-        flowControlNode.OutPins = new Type[] { };
-        flowControlNode.OutPinsNames = new string[] { };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "goto (Go to position)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Goto,
+            ConnectorsInNames = new string[] { "Set position" },
+            ConnectorsOutNames = new string[] { "" },
+            InPins = new Type[] { typeof(string) },
+            InPinsNames = new string[] { "Position name" },
+            OutPins = new Type[] { },
+            OutPinsNames = new string[] { }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Execute 'base' constructor";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.ExecBConstr;
-        flowControlNode.HideInNodesList = true;
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Execute 'base' constructor",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.ExecBConstr,
+            HideInNodesList = true
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "Execute 'this' constructor";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.ExeThisBConstr;
-        flowControlNode.HideInNodesList = true;
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "Execute 'this' constructor",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.ExeThisBConstr,
+            HideInNodesList = true
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "lock (Multithreading)";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.Lock;
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "'lock' code", "Next" };
-        flowControlNode.InPins = new Type[] { typeof(object) };
-        flowControlNode.InPinsNames = new string[] { "object to lock" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "lock (Multithreading)",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Lock,
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "'lock' code", "Next" },
+            InPins = new Type[] { typeof(object) },
+            InPinsNames = new string[] { "object to lock" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        flowControlNode = new NodeGenPins();
-        flowControlNode.NodeName = "#Preprocessor directive";
-        flowControlNode.Icon = "Icons/Types/Icon_Default_Node";
-        //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
-        flowControlNode.NodeType = NodeTypeE.Custom;
-        flowControlNode.DNodeType = DefNodeType.PDirective;
-        flowControlNode.ConnectorsInNames = new string[] { "" };
-        flowControlNode.ConnectorsOutNames = new string[] { "" };
-        flowControlNode.InPins = new Type[] { typeof(string) };
-        flowControlNode.InPinsNames = new string[] { "directive" };
+        flowControlNode = new NodeGenPins
+        {
+            NodeName = "#Preprocessor directive",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //flowControlNode.LabelColor = new BPColor(128, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.PDirective,
+            ConnectorsInNames = new string[] { "" },
+            ConnectorsOutNames = new string[] { "" },
+            InPins = new Type[] { typeof(string) },
+            InPinsNames = new string[] { "directive" }
+        };
         DefaultNodes_FlowControl.Add(flowControlNode);
 
-        if(Options.b_SortDefaultNodes)
+        if (Options.b_SortDefaultNodes)
         {
-            DefaultNodes_FlowControl = DefaultNodes_FlowControl.OrderBy(x => x.NodeName).ToList();
+            var strsorts = Comparer<string>.Default;
+            DefaultNodes_FlowControl.Sort((x, y) => strsorts.Compare(x.NodeName, y.NodeName));
         }
 
         return DefaultNodes_FlowControl;
     }
-    
 
     private class IEnumerable_Value { }
+
     private class yieldreturn { }
 
     private delegate void AnyDelegateType();
 
     private static List<NodeGenPins> DefaultNodes_Math = null;
+
     public static List<NodeGenPins> GetDefaultNodes_Math()
     {
         if (DefaultNodes_Math != null)
@@ -385,236 +407,248 @@
 
         DefaultNodes_Math = new List<NodeGenPins>();
 
-
-        NodeGenPins mathNode = new NodeGenPins();
-        mathNode.NodeName = "AND";
-        mathNode.Operation = "&&";
-        mathNode.Icon = "Icons/Logic/math_AND";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.AND;
-        mathNode.InPins = new Type[] { typeof(bool), typeof(bool) };
-        mathNode.OutPins = new Type[] { typeof(bool) };
-        mathNode.InPinsNames = new string[] { "", "" };
-        mathNode.OutPinsNames = new string[] { "" };
+        NodeGenPins mathNode = new NodeGenPins
+        {
+            NodeName = "AND",
+            Operation = "&&",
+            Icon = "Icons/Logic/math_AND",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.AND,
+            InPins = new Type[] { typeof(bool), typeof(bool) },
+            OutPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "", "" },
+            OutPinsNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "OR";
-        mathNode.Operation = "&&";
-        mathNode.Icon = "Icons/Logic/math_OR";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.OR;
-        mathNode.InPins = new Type[] { typeof(bool), typeof(bool) };
-        mathNode.OutPins = new Type[] { typeof(bool) };
-        mathNode.InPinsNames = new string[] { "", "" };
-        mathNode.OutPinsNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "OR",
+            Operation = "&&",
+            Icon = "Icons/Logic/math_OR",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.OR,
+            InPins = new Type[] { typeof(bool), typeof(bool) },
+            OutPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "", "" },
+            OutPinsNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "NOT";
-        mathNode.Operation = "!";
-        mathNode.Icon = "Icons/Logic/math_NOT";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.NOT;
-        mathNode.InPins = new Type[] { typeof(bool) };
-        mathNode.OutPins = new Type[] { typeof(bool) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPinsNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "NOT",
+            Operation = "!",
+            Icon = "Icons/Logic/math_NOT",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.NOT,
+            InPins = new Type[] { typeof(bool) },
+            OutPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "" },
+            OutPinsNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "'as' / '(T)'";
-        mathNode.Operation = "as";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.AsT;
-        mathNode.InPins = new Type[] { typeof(object) };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPinsNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "'as' / '(T)'",
+            Operation = "as",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.AsT,
+            InPins = new Type[] { typeof(object) },
+            OutPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "" },
+            OutPinsNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "'is'";
-        mathNode.Operation = "as";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Is;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPins = new Type[] { typeof(bool) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPinsNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "'is'",
+            Operation = "as",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Is,
+            InPins = new Type[] { typeof(AnyType) },
+            OutPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "" },
+            OutPinsNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Math Operations Node";
-        mathNode.Operation = "+";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Math;
-        mathNode.InPins = new Type[] { typeof(ValueType), typeof(ValueType) };
-        mathNode.OutPins = new Type[] { typeof(ValueType) };
-        mathNode.InPinsNames = new string[] { "value", "value" };
-        mathNode.OutPinsNames = new string[] { "value" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Math Operations Node",
+            Operation = "+",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Math,
+            InPins = new Type[] { typeof(ValueType), typeof(ValueType) },
+            OutPins = new Type[] { typeof(ValueType) },
+            InPinsNames = new string[] { "value", "value" },
+            OutPinsNames = new string[] { "value" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Unary operation";
-        mathNode.Operation = "-";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Unary;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "Value" };
-        mathNode.OutPinsNames = new string[] { "Value" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Unary operation",
+            Operation = "-",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Unary,
+            InPins = new Type[] { typeof(AnyType) },
+            OutPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "Value" },
+            OutPinsNames = new string[] { "Value" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "'this'";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.This;
-        mathNode.OutPins = new Type[] { typeof(ErrorTypePin) };
-        mathNode.OutPinsNames = new string[] { "this class" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "'this'",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.This,
+            OutPins = new Type[] { typeof(ErrorTypePin) },
+            OutPinsNames = new string[] { "this class" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "'base'";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Base;
-        mathNode.OutPins = new Type[] { typeof(ErrorTypePin) };
-        mathNode.OutPinsNames = new string[] { "base class" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "'base'",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Base,
+            OutPins = new Type[] { typeof(ErrorTypePin) },
+            OutPinsNames = new string[] { "base class" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Var (Implicitly Typed Local Variable)";
-        mathNode.Icon = "Icons/Types/Icon_Field";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.Var;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "Value Set"};
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "Value Get" };
-        mathNode.ConnectorsInNames = new string[] { "Set" };
-        mathNode.ConnectorsOutNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Var (Implicitly Typed Local Variable)",
+            Icon = "Icons/Types/Icon_Field",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Var,
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "Value Set" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "Value Get" },
+            ConnectorsInNames = new string[] { "Set" },
+            ConnectorsOutNames = new string[] { "" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Conditional expression";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.ConditionalExpr;
-        mathNode.InPins = new Type[] { typeof(bool), typeof(AnyType), typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "Condition", "On True", "On False" };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "result" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Conditional expression",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.ConditionalExpr,
+            InPins = new Type[] { typeof(bool), typeof(AnyType), typeof(AnyType) },
+            InPinsNames = new string[] { "Condition", "On True", "On False" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "result" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Make Delegate";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.MakeDelegate;
-        mathNode.OutPins = new Type[] { typeof(AnyDelegateType) };
-        mathNode.OutPin_IsLambdaDeleg = true;
-        mathNode.OutPinsNames = new string[] { "Delegate" };
-        mathNode.ConnectorsOutNames = new string[] { "Delegate Code" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Make Delegate",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.MakeDelegate,
+            OutPins = new Type[] { typeof(AnyDelegateType) },
+            OutPin_IsLambdaDeleg = true,
+            OutPinsNames = new string[] { "Delegate" },
+            ConnectorsOutNames = new string[] { "Delegate Code" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Make anonymous method";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.MakeAMethod;
-        mathNode.OutPins = new Type[] { typeof(AnyDelegateType) };
-        mathNode.OutPin_IsLambdaDeleg = true;
-        mathNode.OutPinsNames = new string[] { "Delegate" };
-        mathNode.ConnectorsOutNames = new string[] { "Delegate Code" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Make anonymous method",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.MakeAMethod,
+            OutPins = new Type[] { typeof(AnyDelegateType) },
+            OutPin_IsLambdaDeleg = true,
+            OutPinsNames = new string[] { "Delegate" },
+            ConnectorsOutNames = new string[] { "Delegate Code" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Is null";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.IsNull;
-        mathNode.InPins = new Type[] { typeof(Nullable) };
-        mathNode.InPinsNames = new string[] { "object" };
-        mathNode.OutPins = new Type[] { typeof(bool) };    
-        mathNode.OutPinsNames = new string[] { "is null" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Is null",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.IsNull,
+            InPins = new Type[] { typeof(Nullable) },
+            InPinsNames = new string[] { "object" },
+            OutPins = new Type[] { typeof(bool) },
+            OutPinsNames = new string[] { "is null" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "'null'";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Null;
-        mathNode.OutPins = new Type[] { typeof(Null) };
-        mathNode.OutPinsNames = new string[] { "null" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "'null'",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Null,
+            OutPins = new Type[] { typeof(Null) },
+            OutPinsNames = new string[] { "null" }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Type instance constructor";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.TypeInst;
-
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "Type" };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "instance" };
-        mathNode.NodeRefType = typeof (AnyType);
-        mathNode.HideInNodesList = true;
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Type instance constructor",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.TypeInst,
+
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "Type" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "instance" },
+            NodeRefType = typeof(AnyType),
+            HideInNodesList = true
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "yield return";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.YieldReturnInstruction;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPins = new Type[] { typeof(yieldreturn) };
-        mathNode.OutPinsNames = new string[] { "", };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "yield return",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.YieldReturnInstruction,
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "" },
+            OutPins = new Type[] { typeof(yieldreturn) },
+            OutPinsNames = new string[] { "", }
+        };
         DefaultNodes_Math.Add(mathNode);
 
         /*
@@ -631,110 +665,117 @@
         DefaultNodes_Math.Add(mathNode);
         */
 
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "yield return break";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.YieldReturnBreak;
-        mathNode.OutPins = new Type[] { typeof(yieldreturn) };
-        mathNode.OutPinsNames = new string[] { "yield return break", };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "yield return break",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.YieldReturnBreak,
+            OutPins = new Type[] { typeof(yieldreturn) },
+            OutPinsNames = new string[] { "yield return break", }
+        };
         //mathNode.HideInNodesList = true;
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Make array";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.MakeArray;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "Element_0" };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "Array", };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Make array",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.MakeArray,
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "Element_0" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "Array", }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Break vector";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.BreakVect;
-        mathNode.InPins = new Type[] { typeof(Vector) };
-        mathNode.InPinsNames = new string[] { "Vector" };
-        mathNode.OutPins = new Type[] { };
-        mathNode.OutPinsNames = new string[] { };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Break vector",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(128, 128, 128, 128);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.BreakVect,
+            InPins = new Type[] { typeof(Vector) },
+            InPinsNames = new string[] { "Vector" },
+            OutPins = new Type[] { },
+            OutPinsNames = new string[] { }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "String builder";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.StringBuilder;
-        mathNode.InPins = new Type[] { typeof(string) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPins = new Type[] { typeof(string) };
-        mathNode.OutPinsNames = new string[] { "", };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "String builder",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.StringBuilder,
+            InPins = new Type[] { typeof(string) },
+            InPinsNames = new string[] { "" },
+            OutPins = new Type[] { typeof(string) },
+            OutPinsNames = new string[] { "", }
+        };
         DefaultNodes_Math.Add(mathNode);
 
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Lambda Expresion delegate";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.DelegLambda;
-        mathNode.InPins = new Type[] { typeof(bool) };
-        mathNode.InPinsNames = new string[] { "mach" };
-        mathNode.OutPins = new Type[] { typeof(AnyDelegateType), typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "delegate result", "parameter" };
-        //mathNode.ConnectorsOutNames = new string[] { "Action Code" };
-        mathNode.OutPin_IsDelegate = true;
-        mathNode.OutPin_IsLambdaDeleg = true;
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Lambda Expresion delegate",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.DelegLambda,
+            InPins = new Type[] { typeof(bool) },
+            InPinsNames = new string[] { "mach" },
+            OutPins = new Type[] { typeof(AnyDelegateType), typeof(AnyType) },
+            OutPinsNames = new string[] { "delegate result", "parameter" },
+            //mathNode.ConnectorsOutNames = new string[] { "Action Code" };
+            OutPin_IsDelegate = true,
+            OutPin_IsLambdaDeleg = true
+        };
         DefaultNodes_Math.Add(mathNode);
 
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "typeof()";
-        mathNode.Icon = "Icons/Types/Icon_Default_Node";
-        //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
-        mathNode.NodeType = NodeTypeE.Custom;
-        mathNode.DNodeType = DefNodeType.Typeof;
-        mathNode.InPins = new Type[] {typeof(Type) };
-        mathNode.InPinsNames = new string[] { "type" };
-        mathNode.OutPins = new Type[] { typeof(Type) };
-        mathNode.OutPinsNames = new string[] { "result type" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "typeof()",
+            Icon = "Icons/Types/Icon_Default_Node",
+            //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
+            NodeType = NodeTypeE.Custom,
+            DNodeType = DefNodeType.Typeof,
+            InPins = new Type[] { typeof(Type) },
+            InPinsNames = new string[] { "type" },
+            OutPins = new Type[] { typeof(Type) },
+            OutPinsNames = new string[] { "result type" }
+        };
 
         DefaultNodes_Math.Add(mathNode);
 
-
-
-        mathNode = new NodeGenPins();
-        mathNode.NodeName = "Rerouting Point";
-        mathNode.Icon = "";
-        //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
-        mathNode.NodeType = NodeTypeE.Logic;
-        mathNode.DNodeType = DefNodeType.Rerouting;
-        mathNode.InPins = new Type[] { typeof(AnyType) };
-        mathNode.InPinsNames = new string[] { "" };
-        mathNode.OutPins = new Type[] { typeof(AnyType) };
-        mathNode.OutPinsNames = new string[] { "" };
+        mathNode = new NodeGenPins
+        {
+            NodeName = "Rerouting Point",
+            Icon = "",
+            //mathNode.LabelColor = new BPColor(200, 128, 128, 150);
+            NodeType = NodeTypeE.Logic,
+            DNodeType = DefNodeType.Rerouting,
+            InPins = new Type[] { typeof(AnyType) },
+            InPinsNames = new string[] { "" },
+            OutPins = new Type[] { typeof(AnyType) },
+            OutPinsNames = new string[] { "" }
+        };
 
         DefaultNodes_Math.Add(mathNode);
 
-
         if (Options.b_SortDefaultNodes)
         {
-            DefaultNodes_Math = DefaultNodes_Math.OrderBy(x => x.NodeName).ToList();
+            var strsorts = Comparer<string>.Default;
+            DefaultNodes_Math.Sort((x, y) => strsorts.Compare(x.NodeName, y.NodeName));
         }
 
         return DefaultNodes_Math;
     }
 
-
     public enum NodeTypeE
     {
         Method,
@@ -788,14 +829,18 @@
         AsT,
         Is,
         TryCatchFinally,
+
         //TryFinally,
         StringBuilder,
+
         This,
         ArrayElem,
+
         //GArrayElemOnIndex,
         //SArrayElem,
         //SArrayElemOnIndex,
         MakeArray,
+
         ForEachIndex,
         IsNull,
         Null,
@@ -805,8 +850,10 @@
         Break,
         Continue,
         DelegLambda,
+
         //ActionDelegLambda,
         ConsolePrint,
+
         Lock,
         Throw,
         Var,
@@ -831,5 +878,4 @@
         PDirective,
         Rerouting
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DocInfo.cs Editor/m_DocInfo.cs
--- .Editor/m_DocInfo.cs	2018-06-30 08:59:18.527620000 +0700
+++ Editor/m_DocInfo.cs	2018-06-30 09:02:03.840516500 +0700
@@ -1,11 +1,11 @@
 ﻿using System;
-using System.Xml.Serialization;
 using System.Collections.Generic;
-using UnityEngine;
-using UnityEditor;
+using System.IO;
 using System.Linq;
 using System.Reflection;
-using System.IO;
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -26,8 +26,8 @@
     }
     */
 
-
     public static m_DocInfo DocInfo = new m_DocInfo();
+
     public class m_DocInfo
     {
         private Dictionary<string, XML_Doc> TempXml = new Dictionary<string, XML_Doc>(StringComparer.OrdinalIgnoreCase);
@@ -88,8 +88,6 @@
             return string.Format("{0}:{1}", prefixCode, memberName);
         }
 
-
-
         public Doc_Node GetXmlDocumentation(object Item)
         {
             if (!Options.UseDocumentation)
@@ -99,7 +97,7 @@
             {
                 return GetXmlDocumentation("CustomNodesAssebbly", "NottorusCustomNodes", (Item as NodeGenPins).DNodeType.ToString());
             }
-            else if(Item is MemberInfo)
+            else if (Item is MemberInfo)
             {
                 MemberInfo member = Item as MemberInfo;
                 AssemblyName assemblyName = member.Module.Assembly.GetName();
@@ -111,21 +109,18 @@
                 AssemblyName assemblyName = member.StructType.Assembly.GetName();
                 return GetXmlDocumentation(assemblyName.FullName, assemblyName.Name, GetMemberName(member.StructType));
             }
-            else if(Item == null)
+            else if (Item == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("Doc Item type is null");
+                if (Options.b_ShowDebug) Debug.Log("Doc Item type is null");
                 return new Doc_Node();
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Doc Item type is not defined: " + Item.GetType());
+                if (Options.b_ShowDebug) Debug.Log("Doc Item type is not defined: " + Item.GetType());
                 return new Doc_Node();
             }
         }
 
-         
-
-
         private Doc_Node GetXmlDocumentation(string asmbFullName, string docFileName, string memberName)
         {
             //if(Options.b_ShowDebug)Debug.Log("Get doc: " + asmbFullName + " docFN: " + docFileName + " member: " + memberName);
@@ -142,7 +137,6 @@
             {
                 TempXml[asmbFullName] = (xml = LoadXMLDoc(docFileName + ".xml"));
             }
-            
 
             return xml.Members.NodesDocs.Find(x => x.Name == memberName);
         }
@@ -153,7 +147,6 @@
                 || localPath == "Assembly-UnityScript.xml" || localPath == "Assembly-UnityScript-Editor.xml")
                 return new XML_Doc();
 
-
             var serializer = new XmlSerializer(typeof(XML_Doc));
 
             localPath = "XML_Code_Documentation/" + localPath;
@@ -188,15 +181,13 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't load local documentation: " + localPath);
+                if (Options.b_ShowDebug) Debug.Log("Can't load local documentation: " + localPath);
             }
 
-
             return new XML_Doc();
         }
     }
 
-
     [XmlRoot(ElementName = "doc")]
     public class XML_Doc
     {
@@ -204,17 +195,16 @@
         public Doc_Members Members = new Doc_Members();
     }
 
-
     [XmlRoot(ElementName = "members")]
     public class Doc_Members
     {
         [XmlElement(ElementName = "assembly")]
         public Doc_Assembly Assembly = new Doc_Assembly();
+
         [XmlElement(ElementName = "member")]
         public List<Doc_Node> NodesDocs = new List<Doc_Node>();
     }
 
-
     [XmlRoot(ElementName = "assembly")]
     public class Doc_Assembly
     {
@@ -222,40 +212,43 @@
         public string Name = "";
     }
 
-
     [XmlRoot(ElementName = "member")]
     public class Doc_Node
     {
         [XmlElement(ElementName = "summary")]
         public Doc_Summary Summary = new Doc_Summary();
+
         [XmlAttribute(AttributeName = "name")]
         public string Name = "";
+
         [XmlElement(ElementName = "param")]
         public List<Doc_Param> Params = new List<Doc_Param>();
+
         [XmlElement(ElementName = "returns")]
         public Doc_Returns Returns = new Doc_Returns();
     }
 
-
-
     [XmlRoot(ElementName = "summary")]
     public class Doc_Summary
     {
         [XmlElement(ElementName = "para")]
         public string Para = "";
     }
+
     [XmlRoot(ElementName = "param")]
     public class Doc_Param
     {
         [XmlAttribute(AttributeName = "name")]
         public string Name = "";
+
         [XmlText]
         public string Text = "";
     }
+
     [XmlRoot(ElementName = "returns")]
     public class Doc_Returns
     {
         [XmlElement(ElementName = "para")]
         public string Para = "";
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_DrawUtils.cs Editor/m_DrawUtils.cs
--- .Editor/m_DrawUtils.cs	2018-06-30 08:59:18.530621500 +0700
+++ Editor/m_DrawUtils.cs	2018-06-30 09:02:03.841516500 +0700
@@ -1,18 +1,18 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using System.Linq;
+using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public class M_Foldout
     {
-        public M_Foldout() { }
+        public M_Foldout()
+        {
+        }
+
         public M_Foldout(bool opened)
         {
             Opened = opened;
@@ -24,7 +24,6 @@
 
         private float _lerpHeight = 24;
 
-
         private float LerpABPosX = 275;
 
         public AttributeTargets AttribsList_Targets = AttributeTargets.All;
@@ -39,12 +38,7 @@
 
             float labelOffset = CalcStringPixelsX(bAddName, Res.Label);
 
-
-            Rect bRect = CreateRect(LerpABPosX, posY + 2, width - LerpABPosX - 5, 20);
-
-        
-
-
+            Rect bRect = new Rect(LerpABPosX, posY + 2, width - LerpABPosX - 5, 20);
 
             EditorGUIUtility.AddCursorRect(bRect, MouseCursor.Link);
 
@@ -52,25 +46,23 @@
             {
                 LerpABPosX = Mathf.Lerp(LerpABPosX, width - labelOffset - 35, 0.1f);
 
-                Graphics.DrawTexture(bRect, Res.MenuButton_Hovered, 16, 16, 16, 16);
+                DrawTexture(bRect, Res.MenuButton_Hovered, 16, 16, 16, 16);
 
-                if (spawnType == typeof (NSM_Editor.NSM_StateMachine_SaveData))
+                if (spawnType == typeof(NSM_Editor.NSM_StateMachine_SaveData))
                 {
                     if (CurClass.SMachineSaveData == null)
-                        GUI.DrawTexture(CreateRect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_AddObj);
+                        GUI.DrawTexture(new Rect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_AddObj);
                     else
-                        GUI.DrawTexture(CreateRect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_DelObj);
+                        GUI.DrawTexture(new Rect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_DelObj);
                 }
                 else
-                    GUI.DrawTexture(CreateRect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_AddObj);
-
-
-                GUI.Label(CreateRect(bRect.x + 20, posY + 5, labelOffset + 20, 20), bAddName, Res.MiddleBoldNameLabel);
+                    GUI.DrawTexture(new Rect(bRect.x + 5, bRect.y + 5, 11, 11), Res.Button_AddObj);
 
+                GUI.Label(new Rect(bRect.x + 20, posY + 5, labelOffset + 20, 20), bAddName, Res.MiddleBoldNameLabel);
 
                 if (_LMB_Down && bRect.Contains(Event.current.mousePosition))
                 {
-                    if (spawnType == typeof (NSM_Editor.NSM_StateMachine_SaveData))
+                    if (spawnType == typeof(NSM_Editor.NSM_StateMachine_SaveData))
                     {
                         if (CurClass.SMachineSaveData != null)
                         {
@@ -80,7 +72,6 @@
                                 Nottorus.UndoSystem.RegisterUndo("Delete State Machine");
                                 CurClass.SMachineSaveData = null;
                             }
-                          
                         }
                         else
                         {
@@ -118,34 +109,29 @@
             {
                 LerpABPosX = Mathf.Lerp(LerpABPosX, width - 25, 0.3f);
 
-                if (spawnType == typeof (NSM_Editor.NSM_StateMachine_SaveData))
+                if (spawnType == typeof(NSM_Editor.NSM_StateMachine_SaveData))
                 {
                     if (CurClass.SMachineSaveData == null)
-                        GUI.DrawTexture(CreateRect(LerpABPosX, bRect.y, 20, 20), Res.Button_AddObj_Alone);
+                        GUI.DrawTexture(new Rect(LerpABPosX, bRect.y, 20, 20), Res.Button_AddObj_Alone);
                     else
-                        GUI.DrawTexture(CreateRect(LerpABPosX, bRect.y, 20, 20), Res.Button_DelObj_Alone);
+                        GUI.DrawTexture(new Rect(LerpABPosX, bRect.y, 20, 20), Res.Button_DelObj_Alone);
                 }
                 else
-                    GUI.DrawTexture(CreateRect(LerpABPosX, bRect.y, 20, 20), Res.Button_AddObj_Alone);
+                    GUI.DrawTexture(new Rect(LerpABPosX, bRect.y, 20, 20), Res.Button_AddObj_Alone);
             }
 
-            //   FoldDrawPosY += 21;
-
             return drawPosY;
         }
 
-
         public float Draw(float posX, float posY, float Width, string label, DrawDeleg drawDeleg, bool drawToggleListButton)
         {
-            Rect drawRect = CreateRect(posX + 3, posY, Width - 6, 25);
+            Rect drawRect = new Rect(posX + 3, posY, Width - 6, 25);
 
             GUI.DrawTexture(drawRect, Res.Foldout_BG);
-            //Graphics.DrawTexture(drawRect, Res.Foldout_BG, 10, 10, 10, 10);
 
+            GUI.Label(new Rect(drawRect.x + 15, drawRect.y + 3, Width, 20), label, Res.MiddleBoldNameLabel);
 
-            GUI.Label(CreateRect(drawRect.x + 15, drawRect.y + 3, Width, 20), label, Res.MiddleBoldNameLabel);
-
-            Rect toggleRect = CreateRect(drawRect.x + 3, drawRect.y + 7, 8, 8);
+            Rect toggleRect = new Rect(drawRect.x + 3, drawRect.y + 7, 8, 8);
 
             if (drawToggleListButton)
             {
@@ -163,32 +149,24 @@
                 };
             }
 
-
-
-
             _lerpHeight = Mathf.Lerp(_lerpHeight, Opened ? _drawPosY : 0, 0.3f);
 
-            Rect elemsRect = CreateRect(posX + 3, posY + 25, Width - 6, _lerpHeight);
-            drawRect = CreateRect(posX + 10, posY + 25, Width - 20, _lerpHeight);
-
-
-       
-
+            Rect elemsRect = new Rect(posX + 3, posY + 25, Width - 6, _lerpHeight);
+            drawRect = new Rect(posX + 10, posY + 25, Width - 20, _lerpHeight);
 
             FoldDrawPosY = 5;
 
-            if(drawToggleListButton)
-            if (Opened || _lerpHeight > 1)
-            {
-                GUI.DrawTexture(elemsRect, Res.Foldout_Items_BG);
-                //Graphics.DrawTexture(elemsRect, Res.Foldout_Items_BG, 10, 10, 10, 10);
+            if (drawToggleListButton)
+                if (Opened || _lerpHeight > 1)
+                {
+                    GUI.DrawTexture(elemsRect, Res.Foldout_Items_BG);
 
                     GUI.BeginGroup(drawRect);
 
-                drawDeleg.Invoke();
+                    drawDeleg.Invoke();
 
-                GUI.EndGroup();
-            }
+                    GUI.EndGroup();
+                }
             if (FoldDrawPosY == 5)
                 FoldDrawPosY = 0;
 
@@ -199,18 +177,45 @@
                 _drawPosY = 0;
             }
 
-
             return _lerpHeight + 25;
         }
     }
+    
+    public static void DrawTexture(Rect pos, Texture texture)
+    {
+        if (ev.type == EventType.Repaint)
+            Graphics.DrawTexture(pos, texture);
+    }
+
+    private static void DrawTexture(Rect pos, Texture texture, int left, int right, int top, int bottom)
+    {
+        if (ev.type == EventType.Repaint)
+            Graphics.DrawTexture(pos, texture, left, right, top, bottom);
+    }
+
+
+    private static void DrawTexture(Rect pos, Texture texture, Rect src, int left, int right, int top, int bottom, Color color)
+    {
+        if (ev.type == EventType.Repaint)
+            Graphics.DrawTexture(pos, texture, src, left, right, top, bottom, color);
+    }
+    public static bool DrawCheckBox(Rect DrawRect, string text, bool value)
+    {
+        return DrawCheckBox(DrawRect, text, value, Res.CheckBoxButton);
+    }
 
-    public static void DrawCheckBox(Rect DrawRect, string text, ref bool value)
+    public static bool DrawCheckBox(Rect DrawRect, GUIContent text, bool value)
     {
-        value = DrawCheckBox(DrawRect, text, value, Res.CheckBoxButton);
+        return DrawCheckBox(DrawRect, text, value, Res.CheckBoxButton);
     }
 
     public static bool DrawCheckBox(Rect DrawRect, string text, bool value, GUIStyle style, bool trueOnChange = false)
     {
+        return DrawCheckBox(DrawRect, new GUIContent(text), value, style, trueOnChange);
+    }
+
+    public static bool DrawCheckBox(Rect DrawRect, GUIContent text, bool value, GUIStyle style, bool trueOnChange = false)
+    {
         var chRect = DrawRect;
         chRect.y += 2;
         //chRect.width = 16;
@@ -222,7 +227,7 @@
         DrawRect.height = 16;
         GUI.Label(DrawRect, text, Res.Label);
 
-        if(trueOnChange)
+        if (trueOnChange)
         {
             return value2 != value;
         }
@@ -243,7 +248,6 @@
         return result;
     }
 
-
     public static void DrawGroupRadioBox(Rect DrawRect, string text, ref bool value)
     {
         var chRect = DrawRect;
@@ -281,9 +285,9 @@
             GUI.Box(drawRect, "", Res.Box);
             float realWidth = drawRect.width - 2;
             float drawWidth = realWidth * delta;
-            var lRect = CreateRect(drawRect.x + 1, drawRect.y + 1, drawWidth, drawRect.height - 2);
+            var lRect = new Rect(drawRect.x + 1, drawRect.y + 1, drawWidth, drawRect.height - 2);
 
-            Graphics.DrawTexture(lRect, Res.Progressbar, Mathf.RoundToInt(Res.Progressbar.width * delta), 0, 0, 0);
+            DrawTexture(lRect, Res.Progressbar, Mathf.RoundToInt(Res.Progressbar.width * delta), 0, 0, 0);
         }
 
         public static void DrawWithLabel(Rect drawRect, float delta)
@@ -294,7 +298,6 @@
 
             Draw(drawRect, delta);
 
-             
             drawRect.x += drawRect.width / 2 - labelSize / 2;
             GUI.Label(drawRect, label, Res.Label);
         }
@@ -302,7 +305,7 @@
 
     public bool _DrawCheckButton(Rect drawRect, bool value, string label)
     {
-       EditorGUI.Toggle(drawRect, value, Res.CheckBoxButton);
+        EditorGUI.Toggle(drawRect, value, Res.CheckBoxButton);
         bool result = value;
         if (GUI.enabled)
         {
@@ -316,7 +319,7 @@
         GUI.Label(drawRect, label, Res.Label);
         return result;
     }
-     
+
     public class ChangeVarType
     {
         public void SetGenericParameterFeedback(Type newChangedType)
@@ -330,7 +333,6 @@
                 else
                     gTypes[FeedbackChangeParmNum] = newChangedType;
 
-
                 for (int i = 0; i < gTypes.Count; i++)
                 {
                     if (gTypes[i].IsGenericParameter)
@@ -339,7 +341,6 @@
                     }
                 }
                 newType = varTypeChange.PType.GetGenericTypeDefinition().MakeGenericType(gTypes.ToArray());
-
             }
 
             FeedbackNewType(newType);
@@ -416,26 +417,21 @@
         {
             SelVar = selVar;
 
-            style = style == null ? Res.PopupButton : style;
+            style = style ?? Res.PopupButton;
 
             if (varType == null || varType.PType == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("ChangeVarType: varType.PType == null");
+                if (Options.b_ShowDebug) Debug.Log("ChangeVarType: varType.PType == null");
                 return 0;
             }
 
-
-
-
             Type typeToChange = varType.PType;
             varTypeChange = varType;
 
             string name = RenameTypeVarName(typeToChange, true);
             float typeLabelWidth = CalcStringPixelsX(name, style) + 25;
 
-
-
-            var drawRectButton = CreateRect(posX, posY, typeLabelWidth, 17);
+            var drawRectButton = new Rect(posX, posY, typeLabelWidth, 17);
             if (GUI.Button(drawRectButton, name, style))
             {
                 CurScript.VarsWindow.Show(GlobalMousePos, selVar, typeToChange);
@@ -449,7 +445,6 @@
                 }
             }
 
-            
             if (drawRectButton.Contains(Event.current.mousePosition))
             {
                 var test = RenameType_ForCompilation(typeToChange);
@@ -466,27 +461,25 @@
                 {
                     if (gTypes[i].IsGenericParameter)
                     {
-                       // FeedbackChangeParmNum = i; 
-                      //  SetGenericParameterFeedback(typeof(T));
+                        // FeedbackChangeParmNum = i;
+                        //  SetGenericParameterFeedback(typeof(T));
                     }
                 }
 
                 DrawPosX += 3;
 
-
                 for (int i = 0; i < gTypes.Count; i++)
                 {
                     Type gtype = gTypes[i];
-              
+
                     name = RenameTypeVarName(gtype, true);
                     typeLabelWidth = CalcStringPixelsX(name, style) + 20;
 
-
-                    drawRectButton = CreateRect(DrawPosX, posY, typeLabelWidth, 17);
+                    drawRectButton = new Rect(DrawPosX, posY, typeLabelWidth, 17);
                     if (GUI.Button(drawRectButton, name, style))
                     {
                         FeedbackChangeParmNum = i;
-                        CurScript.VarsWindow.Show(GlobalMousePos, this, gtype); 
+                        CurScript.VarsWindow.Show(GlobalMousePos, this, gtype);
                     }
 
                     if (drawRectButton.Contains(Event.current.mousePosition))
@@ -497,48 +490,42 @@
                     DrawPosX += typeLabelWidth;
                 }
             }
-            else if(allowArray && typeToChange != typeof(T) && !(SelVar is ScriptClassEvent))
+            else if (allowArray && typeToChange != typeof(T) && !(SelVar is ScriptClassEvent))
             {
                 DrawPosX += 5;
-                GUI.Label(CreateRect(DrawPosX, posY, 50, 16), "Array:", Res.Label);
+                GUI.Label(new Rect(DrawPosX, posY, 50, 16), "Array:", Res.Label);
                 DrawPosX += 40;
 
                 EditorGUI.BeginChangeCheck();
                 for (int i = 0; i < varTypeChange.ArrayRanks.Count; i++)
                 {
-                    varTypeChange.ArrayRanks[i] = EditorGUI.IntField(CreateRect(DrawPosX, posY, 16, 16), varTypeChange.ArrayRanks[i]);
+                    varTypeChange.ArrayRanks[i] = EditorGUI.IntField(new Rect(DrawPosX, posY, 16, 16), varTypeChange.ArrayRanks[i]);
 
-                    if (GUI.Button(CreateRect(DrawPosX, posY + 15, 16, 7), "-", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(DrawPosX, posY + 15, 16, 7), "-", Res.ButtonSimple))
                     {
                         varTypeChange.ArrayRanks.RemoveAt(i);
                         varTypeChange.SetArrayRank(varTypeChange.ArrayRanks);
                         break;
                     }
 
-
-
                     DrawPosX += 18;
                 }
 
-
-                if(GUI.Button(CreateRect(DrawPosX, posY, 16, 16), "+", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawPosX, posY, 16, 16), "+", Res.ButtonSimple))
                 {
                     varTypeChange.ArrayRanks.Add(0);
                     DrawPosX += 18;
                 }
 
-
                 if (EditorGUI.EndChangeCheck())
                 {
                     varTypeChange.SetArrayRank(varTypeChange.ArrayRanks);
                     FeedbackNewType(varTypeChange.PType);
                 }
 
-
                 DrawPosX += 20;
             }
 
-
             DrawWidthSize = DrawPosX - posX;
             return DrawWidthSize;
         }
@@ -551,7 +538,10 @@
         public List<NodeGenericPinSelector_Holder> GenList = new List<NodeGenericPinSelector_Holder>();
         public List<NodeGenericPinChanger> Changers = new List<NodeGenericPinChanger>();
 
-        public NodeGenericPinSelector() { }
+        public NodeGenericPinSelector()
+        {
+        }
+
         public NodeGenericPinSelector(NodeGenericPinSelector other)
         {
             foreach (var gListH in other.GenList)
@@ -570,7 +560,7 @@
 
             if (Changers.Count == 0)
             {
-                Regen(ownerNode); 
+                Regen(ownerNode);
                 return;
             }
 
@@ -592,7 +582,7 @@
                     Changers.Add(new NodeGenericPinChanger("base_", pin.type.PType, null, this, pin));
                 }
             }
-        } 
+        }
 
         public void Regen(Node ownerNode)//On Gener
         {
@@ -610,10 +600,10 @@
 
             ReinitPins();
         }
-         
+
         public void RegisterGenParamName(string name)
         {
-            if(GenList.Find(x => x.IdentName == name) == null)
+            if (GenList.Find(x => x.IdentName == name) == null)
                 GenList.Add(new NodeGenericPinSelector_Holder(name, new BType(typeof(T))));
         }
 
@@ -630,12 +620,11 @@
                 string displayName = GenList[i].IdentName + ":";
                 float nameLabelWidth = CalcStringPixelsX(displayName, Res.Label);
 
-                GUI.Label(CreateRect(posX, drawposY - 2, nameLabelWidth + 5, 20), displayName, Res.Label);
+                GUI.Label(new Rect(posX, drawposY - 2, nameLabelWidth + 5, 20), displayName, Res.Label);
 
                 posX += nameLabelWidth + 3;
 
-
-                if (GUI.Button(CreateRect(posX, drawposY, typeLabelWidth, 17), name, Res.PopupButton))
+                if (GUI.Button(new Rect(posX, drawposY, typeLabelWidth, 17), name, Res.PopupButton))
                 {
                     CurScript.VarsWindow.Show(GlobalMousePos, this, GenList[i], gtype);
                 }
@@ -652,8 +641,6 @@
             ReinitPins();
         }
 
-
-
         private void ReinitPins()
         {
             foreach (var ch in Changers)
@@ -665,7 +652,7 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Pin is null: " + ch.GenericParamName);
+                    if (Options.b_ShowDebug) Debug.Log("Pin is null: " + ch.GenericParamName);
                 }
             }
         }
@@ -673,7 +660,10 @@
 
     public class NodeGenericPinSelector_Holder
     {
-        public NodeGenericPinSelector_Holder() {}
+        public NodeGenericPinSelector_Holder()
+        {
+        }
+
         public NodeGenericPinSelector_Holder(NodeGenericPinSelector_Holder other)
         {
             IdentName = other.IdentName;
@@ -690,10 +680,12 @@
         public BType Type;
     }
 
-
     public class NodeGenericPinChanger
     {
-        public NodeGenericPinChanger() { }
+        public NodeGenericPinChanger()
+        {
+        }
+
         public NodeGenericPinChanger(NodeGenericPinChanger other)
         {
             GenericParamName = other.GenericParamName;
@@ -706,6 +698,7 @@
             OwnerPinId = other.OwnerPinId;
             OwnerPinType = other.OwnerPinType;
         }
+
         public NodeGenericPinChanger(string prefixIdent, Type type, NodeGenericPinChanger owner, NodeGenericPinSelector selector, Node_Pin ownerPin)
         {
             Owner = owner;
@@ -727,11 +720,12 @@
 
         public List<NodeGenericPinChanger> GenParameters = new List<NodeGenericPinChanger>();
 
-
         [XmlIgnore]
         public Node_Pin OwnerPin = null;
+
         [XmlIgnore]
         public NodeGenericPinChanger Owner = null;
+
         [XmlIgnore]
         public NodeGenericPinSelector Selector = null;
 
@@ -760,7 +754,7 @@
             {
                 Type.SetVarType(typeof(T));
 
-                if(GenericParamName == "")
+                if (GenericParamName == "")
                     GenericParamName = "NullPinVar";
                 //if(Options.b_ShowDebug)Debug.Log("Parameter type cannot be null!");
             }
@@ -818,7 +812,6 @@
                 //if (Options.b_ShowDebug) Debug.Log(newType + " - simple type");
                 Type.SetVarType(newType);
             }
-            
         }
 
         public Type GenerateType()
@@ -850,7 +843,6 @@
             return result;
         }
 
-
         public string GetPrefixIdentifier()
         {
             string result = "";
@@ -859,12 +851,8 @@
 
             return result + PrefixIdentifier;
         }
-
     }
 
-
-
-
     public void DrawProgressBar(Rect drawRect, float progress)
     {
         ProgressBar.Draw(drawRect, progress);
@@ -873,7 +861,4 @@
     public static float FoldDrawPosY = 0;
 
     public delegate void DrawDeleg();
-
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_FitPlacer.cs Editor/m_FitPlacer.cs
--- .Editor/m_FitPlacer.cs	2018-06-30 08:59:18.532622700 +0700
+++ Editor/m_FitPlacer.cs	2018-06-30 09:02:03.842517100 +0700
@@ -1,15 +1,11 @@
-﻿using System;
-using System.Xml.Serialization;
-using System.Collections.Generic;
-using UnityEngine;
+﻿using System.Collections.Generic;
 using UnityEditor;
-using System.Linq;
-using System.Reflection;
-using System.IO;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     private static FitPlacer NodesFitter = new FitPlacer();
+
     public class FitPlacer
     {
         private static List<Node> IgnoringNodes = new List<Node>();
@@ -22,12 +18,13 @@
         private float Width = 290;
         private float Height = 240;
         private bool b_Active = false;
-        
+
         public void Open()
         {
             b_Active = true;
-            DrawRect = CreateRect(BPE.position.width - Width, BPE.position.height - Height - 20, Width, Height);
+            DrawRect = new Rect(BPE.position.width - Width, BPE.position.height - Height - 20, Width, Height);
         }
+
         public void Draw()
         {
             if (b_Active)
@@ -36,14 +33,11 @@
                 {
                     if (DrawRect.Contains(GlobalMousePos))
                     {
-
                         LMB_Down_Deleg = delegate
                         {
-
                         };
                         RMB_Up_Deleg = delegate
                         {
-
                         };
                     }
                 }
@@ -59,37 +53,35 @@
 
         private void FitterWIndowFunc(int windowId)
         {
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
-            GUI.Label(CreateRect(DrawRect.width / 2 - 100 / 2, 2, 200, 30), "Place Fit", Res.BigWindowLabel);
+            GUI.Label(new Rect(DrawRect.width / 2 - 100 / 2, 2, 200, 30), "Place Fit", Res.BigWindowLabel);
 
-            Rect closeBRect = CreateRect(DrawRect.width - 45, 2, 43, 17);
-            Graphics.DrawTexture(closeBRect, Res.Button_WindowClose);
+            Rect closeBRect = new Rect(DrawRect.width - 45, 2, 43, 17);
+            DrawTexture(closeBRect, Res.Button_WindowClose);
 
-            Rect groupRect = CreateRect(10, 40, Width - 10, 80);
+            Rect groupRect = new Rect(10, 40, Width - 10, 80);
             GUI.Box(groupRect, "", Res.Box_Borders);
             groupRect.position += Vector2.right * 5;
             Options.PlaceVariant_OffsetType = DrawRadioBox(groupRect, Options.PlaceVariant_OffsetType, new string[] { "Don't move connector nodes", "Chess", "By LEFT corner of group", "By RIGHT corner of group" });
 
-
             groupRect.y += groupRect.height;
             groupRect.height = 30;
             groupRect.y += 5;
 
-            DrawCheckBox(groupRect, "Use node width on placing data nodes", ref Options.PlaceVariant_NodeWidth);
+            Options.PlaceVariant_NodeWidth = DrawCheckBox(groupRect, "Use node width on placing data nodes", Options.PlaceVariant_NodeWidth);
 
             groupRect.position -= Vector2.right * 5;
             groupRect.y -= 5;
             GUI.Box(groupRect, "", Res.Box_Borders);
 
-
             if (_LMB_Up && closeBRect.Contains(Event.current.mousePosition))
             {
                 Close();
             }
 
-            Rect buttonsRect = CreateRect(10, Height - 80, 100, 70);
-            if(GUI.Button(buttonsRect, "Fit All nodes", Res.ButtonSimple))
+            Rect buttonsRect = new Rect(10, Height - 80, 100, 70);
+            if (GUI.Button(buttonsRect, "Fit All nodes", Res.ButtonSimple))
             {
                 PlaceFit(CurDrawable, false, true);
             }
@@ -107,10 +99,9 @@
                 PlaceFit(CurDrawable, true, true);
             }
 
-            GUI.DragWindow(CreateRect(0, 0, Width, 20));
+            GUI.DragWindow(new Rect(0, 0, Width, 20));
         }
 
-
         private static void Clear()
         {
             IgnoringNodes = new List<Node>();
@@ -133,12 +124,16 @@
             {
                 startNode = drawbl.Nodes.Find(x => x.ConnectorsIn.Count == 0 && x.ConnectorsOut.Count == 1 && x.ConnectorsOut[0].ConectorName.Length == 0);
             }
+            else if (ProcessDrawbl.SelectedNodes.Count == 0)
+            {
+                return;
+            }
             else
             {
                 int nodeId = ProcessDrawbl.SelectedNodes[0];
                 startNode = ProcessDrawbl.Nodes.Find(x => x.NodeID == nodeId);
             }
-            if(startNode != null)
+            if (startNode != null)
             {
                 _PlaceFit(startNode, recursivelly);
                 _PlaceFit(startNode, recursivelly);
@@ -146,13 +141,11 @@
             else
             {
                 Debug.Log("PlaceFit: Can't find start node in current nodes edit graph!");
-            }     
+            }
         }
 
-
-
         private static void _PlaceFit(Node startNode, bool recursivelly)
-        {       
+        {
             Clear();
             //IgnoringNodes.Add(startNode);
             ProcessNodeNext(startNode, recursivelly);
@@ -168,12 +161,8 @@
                     var curRect = group.GetGroupRect();
                     var prevRect = lastGroup.GetGroupRect();
 
-
                     var prevRectEndPos = prevRect.position + prevRect.size;
 
-
-                 
-
                     Vector2 finalOffset = Vector2.zero;
 
                     if (Options.PlaceVariant_OffsetType == 0)//None
@@ -200,10 +189,7 @@
                         finalOffset.x = prevRectEndPos.x - curRectEndPos.x;
                     }
 
-
-
                     group.OffsetPos(finalOffset);
-
                 }
 
                 lastGroup = group;
@@ -211,6 +197,7 @@
         }
 
         private static float Highlite = 1;
+
         public void DebugDraw(Vector2 ofset)
         {
             if (!b_Active)
@@ -222,7 +209,7 @@
 
                 var drawColor = Color.white;
                 drawColor.a = Highlite;
-                Graphics.DrawTexture(drawRect, Res.PlaceFitBox, CreateRect(0, 0, 1, 1), 4, 4, 4, 4, drawColor);
+                DrawTexture(drawRect, Res.PlaceFitBox, new Rect(0, 0, 1, 1), 4, 4, 4, 4, drawColor);
             }
 
             if (Highlite > 0)
@@ -253,7 +240,7 @@
                         {
                             ProcessNodeNext(node, recursivelly);
                         }
-                        //else Debug.Log("PlaceFit: Node with id '" + link.LNodeID + "' is allready processed (used several times) in current nodes edit graph.");
+                        //else Debug.Log("PlaceFit: Node with id '" + link.LNodeID + "' is already processed (used several times) in current nodes edit graph.");
                     }
                     else
                         Debug.Log("PlaceFit: Can't find node with id '" + link.LNodeID + "' in current nodes edit graph!");
@@ -261,20 +248,17 @@
             }
         }
 
-
-
-
         private class Fit_NodesGroup
         {
             public Node OwnerNode;
             public List<Node> NodesGroup = new List<Node>();
             public List<Fit_NodesGroup> SubGroups = new List<Fit_NodesGroup>();
             public float MaxWidth;
+
             //public float PlaceOffset_Y = 0;
             public float PlaceOffset_X = 0;
-            public float AllOffset_Y = 0;
 
-     
+            public float AllOffset_Y = 0;
 
             public bool ProcessGroup(Node groupStartNode)
             {
@@ -299,17 +283,14 @@
                                 NodesGroup.Add(node);
                                 if (MaxWidth < node.Width)
                                     MaxWidth = node.Width;
-
-
-
                             }
-                            //else Debug.Log("PlaceFit: Node with id '" + link.LNodeID + "' is allready processed (used several times) in current nodes edit graph.");
+                            //else Debug.Log("PlaceFit: Node with id '" + link.LNodeID + "' is already processed (used several times) in current nodes edit graph.");
                         }
                         else
                             Debug.Log("PlaceFit: Can't find node with id '" + link.LNodeID + "' in current nodes edit graph!");
                     }
                 }
-                
+
                 float maxOffsetX = 0;
                 foreach (var node in NodesGroup)
                 {
@@ -327,7 +308,6 @@
                     if (PlaceOffset_X < OwnerNode.PosX - node.PosX)
                         PlaceOffset_X = OwnerNode.PosX - node.PosX;
 
-            
                     var newGroup = new Fit_NodesGroup();
                     if (newGroup.ProcessGroup(node))
                     {
@@ -340,20 +320,18 @@
                         float nodeMaxY = node.Height + Dist_Vert;
                         if (nodeMaxY > newGroup.AllOffset_Y)
                         {
-                            AllOffset_Y += nodeMaxY;           
+                            AllOffset_Y += nodeMaxY;
                         }
                         else
                         {
                             AllOffset_Y += newGroup.AllOffset_Y;
                         }
-                        
 
                         if (maxOffsetX < newGroup.PlaceOffset_X)
                             maxOffsetX = newGroup.PlaceOffset_X;
                     }
                 }
 
-
                 PlaceOffset_X += maxOffsetX;
 
                 //AllOffset_Y -= 20;
@@ -361,10 +339,9 @@
                 if (AllOffset_Y < OwnerNode.Height + 20)
                     AllOffset_Y = OwnerNode.Height + 20;
 
-
-
                 return true;// NodesGroup.Count > 0;
             }
+
             public void OffsetPos(Vector2 offset)
             {
                 RectCalculated = false;
@@ -383,15 +360,16 @@
 
             private bool RectCalculated = false;
             private Rect GroupRect;
+
             public Rect GetGroupRect()
             {
                 if (!RectCalculated)
                 {
                     RectCalculated = true;
-                    GroupRect = CreateRect((OwnerNode.PosX - PlaceOffset_X), OwnerNode.PosY, PlaceOffset_X + OwnerNode.Width + 40, AllOffset_Y);
+                    GroupRect = new Rect((OwnerNode.PosX - PlaceOffset_X), OwnerNode.PosY, PlaceOffset_X + OwnerNode.Width + 40, AllOffset_Y);
                 }
                 return GroupRect;
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_FunctionNamesListWindow.cs Editor/m_FunctionNamesListWindow.cs
--- .Editor/m_FunctionNamesListWindow.cs	2018-06-30 08:59:18.535623600 +0700
+++ Editor/m_FunctionNamesListWindow.cs	2018-06-30 09:02:03.843517400 +0700
@@ -1,13 +1,8 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static FunctionsSelectNameListWindow FunctionNamesList = new FunctionsSelectNameListWindow();
@@ -37,11 +32,10 @@
 
         public void Draw()
         {
-
             if (b_Active)
             {
                 windowHeight = DrawPosY + 50;
-                DrawRect = CreateRect(WindowPos.x - 1, WindowPos.y - 1, 200, windowHeight);
+                DrawRect = new Rect(WindowPos.x - 1, WindowPos.y - 1, 200, windowHeight);
 
                 if (WindowPos.y + windowHeight > BPE.position.height)
                     WindowPos.y = BPE.position.height - (windowHeight + 10);
@@ -50,7 +44,6 @@
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(Event.current.mousePosition))
@@ -60,7 +53,6 @@
                 }
 
                 GUI.Window(100, DrawRect, SelectNameFunction, "", Res.EmptyStyle);
-
             }
         }
 
@@ -75,7 +67,7 @@
         {
             string searchL = s_SearchString.Replace(" ", "");
             var searchType = TestSearchNameType(s_SearchString);
-            FilteredItems = DefaultFunctions.ToList().FindAll(x => TestSearchName(searchL, x, searchType) || x.StartsWith(">>")).ToList();
+            FilteredItems = DefaultFunctions.Where(x => TestSearchName(searchL, x, searchType) || x.StartsWith(">>")).ToList();
         }
 
         private List<string> FilteredItems;
@@ -85,17 +77,17 @@
         {
             // GUI.BringWindowToFront(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
             DrawPosY = 0;
 
-            GUI.Label(CreateRect(5, DrawPosY, 200, 30), "Available Function Names:", Res.Label);
+            GUI.Label(new Rect(5, DrawPosY, 200, 30), "Available Function Names:", Res.Label);
 
             DrawPosY += 25;
 
             GUI.SetNextControlName("SelectNameSearchTextField");
 
-            string searchString = GUI.TextField(CreateRect(5, DrawPosY, 190, 20), s_SearchString, Res.SearchStringLine);
+            string searchString = GUI.TextField(new Rect(5, DrawPosY, 190, 20), s_SearchString, Res.SearchStringLine);
 
             if (s_SearchString != searchString)
             {
@@ -103,7 +95,6 @@
                 FilterNames();
             }
 
-
             DrawPosY += 25;
 
             if (b_WindowSearchFocus)
@@ -114,15 +105,11 @@
 
             ///////////////////////////////////////////////////////
 
-
-
-            v_Scroll = GUI.BeginScrollView(CreateRect(5, DrawPosY, 190, windowHeight - DrawPosY), v_Scroll,
-                CreateRect(0, 0, 100, ScrollItemsLength));
+            v_Scroll = GUI.BeginScrollView(new Rect(5, DrawPosY, 190, windowHeight - DrawPosY), v_Scroll,
+                new Rect(0, 0, 100, ScrollItemsLength));
 
             DrawPosY = 0;
 
-
-
             if (FilteredItems != null)
             {
                 for (int i = 0; i < FilteredItems.Count; i++)
@@ -130,7 +117,7 @@
                     string itemName = FilteredItems[i];
                     string itemDescription = "";
 
-                    Rect buttonRect = CreateRect(5, DrawPosY, 180, 14);
+                    Rect buttonRect = new Rect(5, DrawPosY, 180, 14);
 
                     bool divider = false;
 
@@ -147,8 +134,6 @@
                         itemDescription = itemDescription.Substring(itemDescription.IndexOf("|") + 1);
                     }
 
-
-
                     if (divider)
                     {
                         GUI.Label(buttonRect, itemName); //, Res.LabelStyle);
@@ -241,77 +226,99 @@
             if (funcName == "OnCollisionEnter")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof (Collision), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision), "collision", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnCollisionEnter2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnCollisionExit")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collision), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision), "collision", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnCollisionExit2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0)
+                };
             }
-
             else if (funcName == "OnCollisionStay")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collision), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision), "collision", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnCollisionStay2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collision2D), "collision", PinTypeE.PinIn, 0)
+                };
             }
             ///////////////////////////////////////
             else if (funcName == "OnTriggerEnter")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnTriggerEnter2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0)
+                };
             }
-
             else if (funcName == "OnTriggerExit")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnTriggerExit2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnTriggerStay")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider), "collider", PinTypeE.PinIn, 0)
+                };
             }
             else if (funcName == "OnTriggerStay2D")
             {
                 if (!AllowAutoSetup) return;
-                function.Config.InPins = new List<Node_Pin>();
-                function.Config.InPins.Add(new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0));
+                function.Config.InPins = new List<Node_Pin>
+                {
+                    new Node_Pin(typeof(Collider2D), "collider", PinTypeE.PinIn, 0)
+                };
             }
         }
 
@@ -324,8 +331,4 @@
             }
         }
     }
-
-
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_InfoMessage.cs Editor/m_InfoMessage.cs
--- .Editor/m_InfoMessage.cs	2018-06-30 08:59:18.540623900 +0700
+++ Editor/m_InfoMessage.cs	2018-06-30 09:02:03.844516900 +0700
@@ -1,13 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
+﻿using System.Collections.Generic;
 using System.Linq;
-using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -33,7 +27,7 @@
 
             if (Messages.Count > 0)
             {
-                foreach (InfoMessage message in Messages.ToList())
+                foreach (InfoMessage message in Messages)
                 {
                     message.DrawMessage(drawOffsetY);
 
@@ -60,7 +54,6 @@
                 LifeTime = time;
             }
 
-
             public InfoMessage(string mesage, Texture icon, float time)
             {
                 Message = mesage;
@@ -72,7 +65,7 @@
 
             private float Offset = 0;
 
-            public Rect DrawRect = CreateRect();
+            public Rect DrawRect = new Rect();
 
             private float Alpha = 1;
 
@@ -80,62 +73,48 @@
 
             private float drawPosX = 10;
 
-            private float DrawPosY_Lerp = BPE.position.height * 0.8f;
+            private float DrawPosY_Lerp = 0f;
             private float DrawPosX_Lerp = BPE.position.width;
 
-
             public void DrawMessage(float drawOffset)
             {
+                if (DrawPosY_Lerp == 0) // headstart
+                    DrawPosY_Lerp = BPE.position.height * 0.8f - drawOffset;
+
                 Color drawColor = new Color(1, 1, 1, Alpha);
                 float targetPosX = BPE.position.width - (drawPosX + 5);
 
-                DrawPosY_Lerp = Mathf.Lerp(DrawPosY_Lerp, BPE.position.height * 0.8f - drawOffset, 0.03f);
-                DrawPosX_Lerp = Mathf.Lerp(DrawPosX_Lerp, targetPosX, 0.03f);
+                DrawPosY_Lerp = Mathf.Lerp(DrawPosY_Lerp, BPE.position.height * 0.8f - drawOffset, 0.05f);
+                DrawPosX_Lerp = Mathf.Lerp(DrawPosX_Lerp, targetPosX, 0.05f);
 
                 DrawRect.position = new Vector2(DrawPosX_Lerp, DrawPosY_Lerp);
                 DrawRect.size = new Vector2(drawPosX, 56);
                 drawPosX = 10;
 
-                Graphics.DrawTexture(DrawRect, Res.InfoWindow, CreateRect(0, 0, 1, 1), 20, 20, 20, 20, drawColor);
-                
-
-
-
+                DrawTexture(DrawRect, Res.InfoWindow, new Rect(0, 0, 1, 1), 20, 20, 20, 20, drawColor);
 
                 if (Icon != null)
                 {
-                    Rect iconRect = CreateRect(DrawRect.x + drawPosX, DrawRect.y + 10, 30, 30);
+                    Rect iconRect = new Rect(DrawRect.x + drawPosX, DrawRect.y + 10, 30, 30);
 
-                    Graphics.DrawTexture(iconRect, Icon, CreateRect(0, 0, 1, 1), 0, 0, 0, 0, drawColor);
+                    DrawTexture(iconRect, Icon, new Rect(0, 0, 1, 1), 0, 0, 0, 0, drawColor);
 
                     drawPosX += 40;
                 }
-                
-                float labelOffset_Mess = CalcStringPixelsX(Message, Res.BigWindowLabel);
-        
-
-
 
+                float labelOffset_Mess = CalcStringPixelsX(Message, Res.BigWindowLabel);
 
-                GUI.color = drawColor; 
-
+                GUI.color = drawColor;
 
-                Rect messageRect = CreateRect(DrawRect.x + drawPosX, DrawRect.y + 15, labelOffset_Mess + 10, 30);
+                Rect messageRect = new Rect(DrawRect.x + drawPosX, DrawRect.y + 15, labelOffset_Mess + 10, 30);
                 GUI.Label(messageRect, Message, Res.BigWindowLabel);
 
-
-
                 GUI.color = Color.white;
 
-
                 drawPosX += Mathf.Max(labelOffset_Mess, 150);
 
                 drawPosX += 10;
 
-              
-             
-
-
                 if (DrawStage == 0)
                 {
                     Offset += 3;
@@ -147,7 +126,7 @@
                 {
                     LifeTime -= 0.01f;
 
-                    if(LifeTime < 0)
+                    if (LifeTime < 0)
                         DrawStage = 2;
                 }
                 else if (DrawStage == 2)
@@ -163,4 +142,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Linking.cs Editor/m_Linking.cs
--- .Editor/m_Linking.cs	2018-06-30 08:59:18.543624800 +0700
+++ Editor/m_Linking.cs	2018-06-30 09:02:03.846518200 +0700
@@ -1,14 +1,9 @@
-﻿using UnityEditor;
-using System.Collections;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
 using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -48,7 +43,6 @@
             }
         }
 
-
         /////////////////////////////////// Pins linking ///////////////////////////////////
 
         public void StartPinLinking(int nodeID, Node_Pin pin)
@@ -61,9 +55,8 @@
         [XmlIgnore]
         public List<LinkInfo> DragPinLinks = new List<LinkInfo>();
 
-
-
         private Node linkDragNode_FromNode = null;
+
         public void StartDragPinLinking(Node node, Node_Pin pin)
         {
             StopLinking();
@@ -78,12 +71,12 @@
                 var link = SourcePinLinkExiteinDrawbl(NodeID, pin.PinID, CurDrawable);
                 if (link != null)
                     DragPinLinks = new List<LinkInfo>() { link };
-            }      
+            }
         }
 
-
         [XmlIgnore]
         public List<LinkInfo> DragConnectorLinks = new List<LinkInfo>();
+
         public void StartDragConnectorLinking(Node node, Node_Connector connector)
         {
             StopLinking();
@@ -101,18 +94,16 @@
             }
         }
 
-
-
-
         bool tempDisableStopLinking = false;
+
         public void DropPunchOfPins(Node toNode, Node_Pin pin)
         {
-            if(linkDragNode_FromNode == null)
+            if (linkDragNode_FromNode == null)
             {
                 Debug.Log("Can't process linking: source node is null");
                 return;
             }
-            if(linkDragNode_FromNode == toNode)
+            if (linkDragNode_FromNode == toNode)
             {
                 StopLinking();
                 return;
@@ -202,7 +193,6 @@
             UndoSystem.RegisterUndo("Redirect branch of connectors links");
             UndoSystem.DisableUndo = true;
 
-
             if (connector.ConnectorType == ConnectorTypeE.ConnectorOut)
             {
                 tempDisableStopLinking = true;
@@ -254,7 +244,7 @@
 
                     if (SortedConnectors_CanBeLinked(link.NodeID, realConnector, toNode.NodeID, connector, true))
                     {
-                        var oldLink = ConnectorLinkExiteInDrawbl(linkDragNode_FromNode.NodeID, NodeConnector.ConnectorID, link.NodeID, link.NodeConPinID,  CurDrawable);
+                        var oldLink = ConnectorLinkExiteInDrawbl(linkDragNode_FromNode.NodeID, NodeConnector.ConnectorID, link.NodeID, link.NodeConPinID, CurDrawable);
                         CurDrawable.NodeConnectorsLinks.Remove(oldLink);
                     }
                     else
@@ -270,9 +260,6 @@
             Linking.StopLinking();
         }
 
-
-
-
         public void StopLinking()
         {
             if (tempDisableStopLinking)
@@ -288,12 +275,13 @@
             DragPinLinks = new List<LinkInfo>();
             DragConnectorLinks = new List<LinkInfo>();
         }
+
         ///////////////////////////////////
 
         public bool PinsCanBeLinked(int nodeID1, Node_Pin pin1, int nodeID2, Node_Pin pin2, bool link)
         {
             if (pin1.PinType == PinTypeE.PinIn)
-            {         
+            {
                 return SortedPins_CanBeLinked(nodeID2, pin2, nodeID1, pin1, link);
             }
             else if (pin1.PinType == PinTypeE.PinOut)
@@ -301,9 +289,10 @@
                 return SortedPins_CanBeLinked(nodeID1, pin1, nodeID2, pin2, link);
             }
 
-            if(Options.b_ShowDebug)Debug.Log("Pin type is undefined? Wtf?");
+            if (Options.b_ShowDebug) Debug.Log("Pin type is undefined? Wtf?");
             return false; // if pin is undefined type
         }
+
         private bool SortedPins_CanBeLinked(int nodeID1, Node_Pin pin1, int nodeID2, Node_Pin pin2, bool link)
         {
             if (pin2.DontDisplayConnector)
@@ -350,10 +339,9 @@
                 return true;
             }
 
-
             if (pin1.LinkDelegVoid || pin1.IsDelegate)
             {
-                if(pin2.type.PType == typeof(AnyType))
+                if (pin2.type.PType == typeof(AnyType))
                 {
                     if (link)
                     {
@@ -381,7 +369,6 @@
                     {
                         //if(Options.b_ShowDebug)Debug.Log("1: " + pin1.GetDelegArguments() + " 2: " + pin2.GetDelegArguments() + " 3: " + pin1.GetDelegateReturnTypeName() + " 4: " + pin2.GetDelegateReturnTypeName());
                         LinkPins(nodeID2, pin2.PinID, nodeID1, pin1.PinID);
-
                     }
                     return true;
                 }
@@ -392,18 +379,15 @@
                 }
             }
 
-
             if (pin1.type.PType == typeof(DelegatePin))
                 return false;
 
-
             if (TypesCanBiLinked(pin1.type.PType, pin2.type.PType, false))
             {
                 if (link)
                 {
                     LinkPins(nodeID2, pin2.PinID, nodeID1, pin1.PinID);
 
-
                     StopLinking();
                     return true;
                 }
@@ -428,9 +412,9 @@
         {
             UndoSystem.RegisterUndo("Link pins");
 
-            if(CurDrawable == null)
+            if (CurDrawable == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("CurDrawable == null");
+                if (Options.b_ShowDebug) Debug.Log("CurDrawable == null");
                 return;
             }
 
@@ -442,7 +426,7 @@
             }
             catch
             {
-                if(Options.b_ShowDebug)Debug.Log("CurDrawable: " + CurDrawable);
+                if (Options.b_ShowDebug) Debug.Log("CurDrawable: " + CurDrawable);
                 //if(Options.b_ShowDebug)Debug.Log("CurDrawable.NodePinsLinks: " + CurDrawable.NodePinsLinks);
             }
 
@@ -527,7 +511,6 @@
             return null;
         }
 
-
         public LinkInfo SourcePinLinkExiteinDrawbl(int nodeID, int nodePinID, BaseScriptObject drawbl)
         {
             foreach (LinkInfo link in drawbl.NodePinsLinks)
@@ -538,7 +521,6 @@
             return null;
         }
 
-
         public List<LinkInfo> EndPinLinksExite(int nodeID, int nodePinID)
         {
             List<LinkInfo> result = new List<LinkInfo>();
@@ -552,7 +534,6 @@
             return result;
         }
 
-
         public void EndPinLinksExiteInDrawbl(int nodeID, int nodePinID, BaseScriptObject drawbl, List<LinkInfo> result)
         {
             foreach (LinkInfo link in drawbl.NodePinsLinks)
@@ -562,15 +543,15 @@
             }
         }
 
-
         public bool TypesCanBiLinked(Type FromType, Type ToType, bool b_DirTypeLinking)
-        {       
+        {
             return MathFreeConnType.CanConnect(FromType, ToType, b_DirTypeLinking);
         }
 
         /////////////////////////////////// Connectors linking ///////////////////////////////////
 
         public bool b_ConnLinking = false;
+
         public void StartConnectorLinking(int nodeID, Node_Connector connector)
         {
             NodeID = nodeID;
@@ -588,7 +569,7 @@
             {
                 return SortedConnectors_CanBeLinked(nodeID2, connector2, nodeID1, connector1, Link);
             }
-            if(Options.b_ShowDebug)Debug.Log("Pin connector is undefined? Wtf?");
+            if (Options.b_ShowDebug) Debug.Log("Pin connector is undefined? Wtf?");
             return false; // if connector is undefined type
         }
 
@@ -604,8 +585,6 @@
                 return false;
             }
 
-
-
             if (Link)
             {
                 LinkConnectors(nodeID1, connector1, nodeID2, connector2);
@@ -617,8 +596,6 @@
 
         public bool LinkConnectors(int nodeSourceID, Node_Connector nodeSourcePin, int nodeEndID, Node_Connector nodeEndPin)
         {
-
-
             UndoSystem.RegisterUndo("Link connectors");
             LinkInfo infoDelete = CurDrawable.NodeConnectorsLinks.Find(x => x.NodeID == nodeSourceID && x.NodeConPinID == nodeSourcePin.ConnectorID);
 
@@ -627,17 +604,15 @@
                 CurDrawable.NodeConnectorsLinks.Remove(infoDelete);
             }
 
-             //if(Options.b_ShowDebug)Debug.Log("Link conn: nid " + nodeSourceID + " c:" + nodeSourcePin.ConnectorID + "  nodeEndID: " + nodeEndID + " n: " + nodeEndPin.ConnectorID);
+            //if(Options.b_ShowDebug)Debug.Log("Link conn: nid " + nodeSourceID + " c:" + nodeSourcePin.ConnectorID + "  nodeEndID: " + nodeEndID + " n: " + nodeEndPin.ConnectorID);
 
             ConnectorsLink_RemoveOther(nodeSourceID, nodeSourcePin.ConnectorID, nodeEndID, nodeEndPin.ConnectorID);
 
-
             LinkConnectorsDirectly(nodeSourceID, nodeSourcePin.ConnectorID, nodeEndID, nodeEndPin.ConnectorID);
 
             return true;
         }
 
-
         public void LinkConnectorsDirectly(int nodeSourceID, int nodeSourcePinId, int nodeEndID, int nodeEndPinId)
         {
             CurDrawable.NodeConnectorsLinks.Add(new LinkInfo(nodeSourceID, nodeSourcePinId, nodeEndID, nodeEndPinId));
@@ -673,7 +648,6 @@
             return null;
         }
 
-
         public LinkInfo SourceConnectorLinkExiteInDrawbl(int nodeID, int NodePinID, BaseScriptObject drawbl)
         {
             foreach (LinkInfo link in drawbl.NodeConnectorsLinks)
@@ -684,7 +658,6 @@
             return null;
         }
 
-
         public LinkInfo ConnectorLinkExiteInDrawbl(int nodeID, int NodePinID, int LNodeID, int LNodePinID, BaseScriptObject drawbl)
         {
             foreach (LinkInfo link in drawbl.NodeConnectorsLinks)
@@ -695,7 +668,6 @@
             return null;
         }
 
-
         public LinkInfo EndConnectorLinkExite(int LNodeID, int LNodePinID)
         {
             List<BaseScriptObject> drawables = CurScript.GetAllDrawableObjects();
@@ -722,18 +694,8 @@
 
         /////////////////////////////////// Delegates linking ///////////////////////////////////
 
-
-
-
-
-
-
-
         //////////////////////////////////////////////////////////////////////////////////////////
 
-
-
-
         public bool TryLinkToNode(Node node)
         {
             if (b_PinLinking)
@@ -744,7 +706,6 @@
                     {
                         //if (EndPinkLinkExite(node.NodeID, pin.PinID) == null)
                         {
-                            
                             if (PinsCanBeLinked(NodeID, NodePin, node.NodeID, pin, true))
                             {
                                 return true;
@@ -754,12 +715,10 @@
                 }
                 else if (NodePin.PinType == PinTypeE.PinOut)
                 {
-              
                     foreach (Node_Pin pin in node.Config.InPins)
                     {
                         if (SourcePinLinkExite(node.NodeID, pin.PinID) == null)
                         {
-                            
                             if (PinsCanBeLinked(NodeID, NodePin, node.NodeID, pin, true))
                             {
                                 return true;
@@ -769,7 +728,7 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Error: NodePin.PinType is undefined");
+                    if (Options.b_ShowDebug) Debug.Log("Error: NodePin.PinType is undefined");
                 }
             }
             else if (b_ConnLinking)
@@ -816,18 +775,17 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Error: NodeConnector.ConnectorType is undefined");
+                    if (Options.b_ShowDebug) Debug.Log("Error: NodeConnector.ConnectorType is undefined");
                 }
             }
 
             return false;
         }
 
-
         public void RemoveAllPinConnections(int nodeID, Node_Pin nodePin)
         {
             List<LinkInfo> RemoveLinks = new List<LinkInfo>();
-            
+
             if (nodePin.PinType == PinTypeE.PinIn)
             {
                 foreach (LinkInfo link in CurDrawable.NodePinsLinks)
@@ -861,21 +819,19 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Error: NodePin.PinType is undefined");
+                if (Options.b_ShowDebug) Debug.Log("Error: NodePin.PinType is undefined");
             }
 
-            
             ReinitNodesAfterConnection(nodeID);
         }
 
-
         public void RemoveAllConnectorConnections(int nodeID, Node_Connector nodeConnector)
         {
             List<LinkInfo> RemoveLinks = new List<LinkInfo>();
 
             if (nodeConnector.ConnectorType == ConnectorTypeE.ConnectorIn)
             {
-                foreach (LinkInfo link in CurDrawable.NodeConnectorsLinks.ToList())
+                foreach (LinkInfo link in CurDrawable.NodeConnectorsLinks)
                 {
                     if (link.LNodeID == nodeID && link.LNodeConPinID == nodeConnector.ConnectorID)
                         RemoveLinks.Add(link);
@@ -883,7 +839,7 @@
             }
             else if (nodeConnector.ConnectorType == ConnectorTypeE.ConnectorOut)
             {
-                foreach (LinkInfo link in CurDrawable.NodeConnectorsLinks.ToList())
+                foreach (LinkInfo link in CurDrawable.NodeConnectorsLinks)
                 {
                     if (link.NodeID == nodeID && link.NodeConPinID == nodeConnector.ConnectorID)
                         RemoveLinks.Add(link);
@@ -891,7 +847,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Error: NodePin.PinType is undefined");
+                if (Options.b_ShowDebug) Debug.Log("Error: NodePin.PinType is undefined");
             }
 
             foreach (LinkInfo link in RemoveLinks)
@@ -900,15 +856,14 @@
             }
         }
 
-
         public void RemoveAllNodePinsConnections(Node delNode)
         {
-            foreach (Node_Pin pin in delNode.Config.InPins.ToList())
+            foreach (Node_Pin pin in delNode.Config.InPins)
             {
                 RemoveAllPinConnections(delNode.NodeID, pin);
             }
 
-            foreach (Node_Pin pin in delNode.Config.OutPins.ToList())
+            foreach (Node_Pin pin in delNode.Config.OutPins)
             {
                 RemoveAllPinConnections(delNode.NodeID, pin);
             }
@@ -916,12 +871,12 @@
 
         public void RemoveAllNodeConnectorConnections(Node delNode)
         {
-            foreach (Node_Connector Connector in delNode.ConnectorsIn.ToList())
+            foreach (Node_Connector Connector in delNode.ConnectorsIn)
             {
                 RemoveAllConnectorConnections(delNode.NodeID, Connector);
             }
 
-            foreach (Node_Connector Connector in delNode.ConnectorsOut.ToList())
+            foreach (Node_Connector Connector in delNode.ConnectorsOut)
             {
                 RemoveAllConnectorConnections(delNode.NodeID, Connector);
             }
@@ -936,7 +891,6 @@
         public int LNodeID = -1;
         public int LNodeConPinID = -1;
 
-
         [XmlIgnore]
         public float HighLite = 0;
 
@@ -953,7 +907,6 @@
             LNodeConPinID = otherLink.LNodeConPinID;
         }
 
-
         public LinkInfo(int inPin_NodeId, int NodePin, int LNodeID, int LNodePin)
         {
             NodeID = inPin_NodeId;
@@ -962,11 +915,9 @@
             LNodeConPinID = LNodePin;
         }
 
-        
-
         public override string ToString()
         {
             return " NodeID: " + NodeID + " NodeConPinID: " + NodeConPinID + ", Linked vs LNodeID: " + LNodeID + " Linked vs LNodeConPinID " + LNodeConPinID;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_NewNodeWindow.cs Editor/m_NewNodeWindow.cs
--- .Editor/m_NewNodeWindow.cs	2018-06-30 08:59:18.547625500 +0700
+++ Editor/m_NewNodeWindow.cs	2018-06-30 09:02:03.847518100 +0700
@@ -1,12 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -19,9 +16,6 @@
 
     public static void ClearOutFilterPin()
     {
-        if (!FilterByExtPin)
-            return;
-
         FilterByExtPin = false;
         //Debug.Log("Clear");
     }
@@ -40,8 +34,7 @@
         public string s_SearchStringClear = "";
         public bool b_UseDot = false;
 
-        public HashSet<AssemblyListItem> NewNodeItemsList = new HashSet<AssemblyListItem>();
-
+        public List<AssemblyListItem> NewNodeItemsList = new List<AssemblyListItem>();
 
         public void Close()
         {
@@ -50,35 +43,29 @@
             s_SearchString = "";
             s_SearchStringClear = "";
             NNW_DragItem = null;
+            EditorGUIUtility.editingTextField = false;
         }
+
         public void Show(Vector2 Pos, bool FromConnPin, bool OpenAllGroupsOnce, bool CloseAllGroupsOnce)
         {
             if (b_Active)
                 return;
-            SearchFilterType = SearchVarType.All;
-            Options.SearchFilterType = SearchStringType.Contains;
-            //Options.b_SearchInCurrentType = false;
-            //Options.b_DeclearedType = false;
 
             if (Linking.b_PinLinking)
-            {
                 Options.b_DirectTypesLinking = true;
-            }
 
             RealSpawnVect = CurDrawable.GetEditGraphRealMousePos_NoOffset - Vector2.one * 20;
 
             if (FilterByExtPin)
             {
-                if(FilterOutPin.PinType != PinTypeE.PinOut)
+                if (FilterOutPin.PinType != PinTypeE.PinOut)
                     Pos.x -= 400;
                 else
                     Pos.x += 100;
             }
-           
-
 
             ResizePos(Pos);
-            DrawRect = CreateRect(WindowPos.x, WindowPos.y, Width, Height);
+            DrawRect = new Rect(WindowPos.x, WindowPos.y, Width, Height);
 
             FilterBase();
 
@@ -91,30 +78,22 @@
 
         private const float Height = 600;
         private const float Width = 400;
-        public Rect ScrollRect; 
+        public Rect ScrollRect;
 
-        public Rect RealScrollRect; 
+        public Rect RealScrollRect;
 
         private void ResizePos(Vector2 Pos)
         {
-            WindowPos = Pos;
-
-            if (WindowPos.y > BPE.position.height - Height - 20)
-                WindowPos.y = BPE.position.height - Height - 20;
-
-
-            if (WindowPos.x > BPE.position.width - Width - 15)
-                WindowPos.x = BPE.position.width - Width - 15;
-
+            WindowPos = Vector2.Min(Pos, new Vector2(BPE.position.width - Width - 15, BPE.position.height - Height - 20));
         }
 
-        public Rect DrawRect = CreateRect(0, 0, 0, 0);
-        public Rect FilterDrawRect = CreateRect(0, 0, 0, 0);
+        public Rect DrawRect = new Rect(0, 0, 0, 0);
+        public Rect FilterDrawRect = new Rect(0, 0, 0, 0);
+
         public void Draw()
         {
             if (b_Active)
             {
-            
                 DrawRect = GUI.Window(6, DrawRect, NewNodeWindowFunction, "", Res.EmptyStyle);
 
                 if (_LMB_Up)
@@ -135,12 +114,10 @@
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     RMB_Up_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(GlobalMousePos))// && !labelDrawRect.Contains(GlobalMousePos))
@@ -148,13 +125,9 @@
                         Close();
                     }
                 }
-
-             
-
             }
         }
 
-
         private string testSearchString = "";
         private bool b_AssembliesOpened = false;
         private SearchVarType SearchFilterType = SearchVarType.All;
@@ -163,262 +136,175 @@
 
         void NewNodeWindowFunction(int windowID)
         {
-            //GUI.BringWindowToFront(windowID);
-            //GUI.FocusWindow(windowID);
             float drawPosY = 0;
-            string label = "Nodes List: " + NodesCount;
-            //float labelWidth = CalcStringPixelsX(label, Res.BigWindowLabel);
 
-            var labelDrawRect = CreateRect(5, drawPosY, Width - 10, 30);
+            var labelDrawRect = new Rect(5, drawPosY, Width - 10, 30);
 
             Graphics.DrawTexture(labelDrawRect, Res.BaseWindow, 25, 25, 25, 25);
 
             labelDrawRect.x += 5;
             labelDrawRect.y += 5;
 
-            GUI.Label(labelDrawRect, label, Res.BigWindowLabel);
+            GUI.Label(labelDrawRect, "Nodes List: " + NodesCount, Res.BigWindowLabel);
 
             drawPosY += 27;
 
-            Graphics.DrawTexture(CreateRect(Vector2.up * drawPosY, DrawRect.size - Vector2.up * drawPosY), Res.BaseWindow, 25, 25, 25, 25);
+            Graphics.DrawTexture(new Rect(Vector2.up * drawPosY, DrawRect.size - Vector2.up * drawPosY), Res.BaseWindow, 25, 25, 25, 25);
 
             drawPosY += 5;
 
-
-            /*
-           
-            var toggleRect = CreateRect(5, drawPosY, 15, 15);
-            GUI.Toggle(toggleRect, Options.b_DirectTypesLinking, "", Res.CheckBoxButton);//bool allowDirectTypesLinking = 
-
-  
-            GUI.Label(CreateRect(25, drawPosY - 1, 200, 16), "Filter by type", Res.Label);
-            */
-
             GUI.enabled = Linking.b_PinLinking;
-            var eqTypeCBRect = CreateRect(5, drawPosY, 120, 15);
-            bool eqTypeCB = Options.b_DirectTypesLinking;
-            DrawCheckBox(eqTypeCBRect, "Exact types linking", ref eqTypeCB);
+            EditorGUI.BeginChangeCheck();
 
-            if (Options.b_DirectTypesLinking != eqTypeCB)
-            {
-                Options.b_DirectTypesLinking = eqTypeCB;
-                EditorOptions.Save();
-                FilterBase();
-            }
-
-            if(eqTypeCBRect.Contains(Event.current.mousePosition))
-            {
-                GUIToolTipe = "Allow to connect ONLY to EXACT type of pins in searching nodes while filtering by link type.\r\nFor example: if you don't want your 'GameObject' type pin will be connected to 'bool' pin";
-            }
-           
-
-            var eqInCurTypeTypeCBRect = CreateRect(150, drawPosY, 120, 15);
-            bool eInCurC = Options.b_SearchInCurrentType;
-            DrawCheckBox(eqInCurTypeTypeCBRect, "In current Type only", ref eInCurC);
-
-            if(Options.b_SearchInCurrentType != eInCurC)
-            {
-                Options.b_SearchInCurrentType = eInCurC;
-                FilterBase();
-            }
+            Options.b_DirectTypesLinking = DrawCheckBox(new Rect(5, drawPosY, 120, 15),
+                new GUIContent("Exact types linking", "Allow to connect ONLY to EXACT type of pins in searching nodes while filtering by link type." +
+                "\r\nFor example: if you don't want your 'GameObject' type pin will be connected to 'bool' pin"), Options.b_DirectTypesLinking);
 
-            if (eqInCurTypeTypeCBRect.Contains(Event.current.mousePosition))
-            {
-                GUIToolTipe = "Searching the members only in filtering link type";
-            }
+            Options.b_SearchInCurrentType = DrawCheckBox(new Rect(150, drawPosY, 120, 15),
+                new GUIContent("In current Type only", "Searching the members only in filtering link type"), Options.b_SearchInCurrentType);
 
             GUI.enabled = true;
 
-            var eDeclR = CreateRect(300, drawPosY, 100, 15);
-            bool eDec = Options.b_DeclearedType;
-            DrawCheckBox(eDeclR, "Not inherited", ref eDec);
-            if (Options.b_DeclearedType != eDec)
-            {
-                Options.b_DeclearedType = eDec;
-                FilterBase();
-            }
+            Options.b_DeclearedType = DrawCheckBox(new Rect(300, drawPosY, 100, 15),
+                new GUIContent("Not inherited", "Searching only 'not inherited' members"), Options.b_DeclearedType);
 
-            if (eDeclR.Contains(Event.current.mousePosition))
-            {
-                GUIToolTipe = "Searching only 'not inherited' members";
-            }
-
-           
-            drawPosY += 25;
-
-      
-            eqTypeCBRect.x = 5;
-            eqTypeCBRect.y += 25;
-            eqTypeCBRect.width = 80;
+            var r = new Rect(5, drawPosY += 25, 80, 15);
 
-            GUI.Box(CreateRect(5, drawPosY, Width - 10, 65), "", Res.Box);
+            GUI.Box(new Rect(5, drawPosY, Width - 10, 65), GUIContent.none, Res.Box);
 
-            bool refBool = Options.SearchFilterType == SearchStringType.Contains;
-            if (DrawCheckBox(eqTypeCBRect, "Contains", refBool, Res.RadioButton, true))
+            if (DrawCheckBox(r, "Contains", Options.SearchFilterType == SearchStringType.Contains, Res.RadioButton, true))
             {
                 Options.SearchFilterType = SearchStringType.Contains;
-                EditorOptions.Save();
-                FilterBase();
             }
 
-            refBool = Options.SearchFilterType == SearchStringType.Equal;
-            eqTypeCBRect.x += 85;
-
-            eqTypeCBRect.width = 55;
-            if (DrawCheckBox(eqTypeCBRect, "Equal", refBool, Res.RadioButton, true))
+            r.x += 85;
+            r.width = 55;
+            if (DrawCheckBox(r, "Equal", Options.SearchFilterType == SearchStringType.Equal, Res.RadioButton, true))
             {
                 Options.SearchFilterType = SearchStringType.Equal;
-                EditorOptions.Save();
-                FilterBase();
             }
 
-            refBool = Options.SearchFilterType == SearchStringType.EndWith;
-            eqTypeCBRect.x += 60;
-
-            eqTypeCBRect.width = 80;
-            if (DrawCheckBox(eqTypeCBRect, "Ends with", refBool, Res.RadioButton, true))
+            r.x += 60;
+            r.width = 80;
+            if (DrawCheckBox(r, "Ends with", Options.SearchFilterType == SearchStringType.EndWith, Res.RadioButton, true))
             {
                 Options.SearchFilterType = SearchStringType.EndWith;
-                EditorOptions.Save();
-                FilterBase();
             }
 
-            refBool = Options.SearchFilterType == SearchStringType.StartWith;
-            eqTypeCBRect.x += 85;
-            if (DrawCheckBox(eqTypeCBRect, "Start with", refBool, Res.RadioButton, true))
+            r.x += 85;
+            if (DrawCheckBox(r, "Start with", Options.SearchFilterType == SearchStringType.StartWith, Res.RadioButton, true))
             {
                 Options.SearchFilterType = SearchStringType.StartWith;
-                EditorOptions.Save();
-                FilterBase();
             }
 
-            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
-
-            
             ///////////////////////////////////////////////////////////////////////////////
-            /*
-            refBool = (Options.SearchFilterType & SearchStringType.CheckCase) == SearchStringType.CheckCase;
-            eqTypeCBRect.x += 85;
-            if (DrawCheckBox(eqTypeCBRect, "Check Case", refBool, Res.CheckBoxButton, true))
-            {
-                if(refBool)
-                    Options.SearchFilterType |= SearchStringType.CheckCase;
-                else
-                    Options.SearchFilterType &= SearchStringType.CheckCase;
-
-
-                EditorOptions.Save();
-                FilterBase();
-            }
-            */
 
             drawPosY += 20;
             GUI.SetNextControlName("NewNodeSearchTextField");
 
-            testSearchString = EditorGUI.TextField(CreateRect(5, drawPosY, Width - 10, 20), s_SearchString, Res.SearchStringLine);
-
-            drawPosY += 20;
-            ProgressBar.Draw(CreateRect(5, drawPosY, Width - 10, 5), LoadingProgress);
-            drawPosY += 6;
-
+            if (ev.type == EventType.KeyDown)
+            {
+                if (ev.keyCode == KeyCode.Return && "NewNodeSearchTextField" == GUI.GetNameOfFocusedControl())
+                {
+                    // Accept first
+                    if (NewNodeItemsList.Count > 0 && NewNodeItemsList[0].NodesList.Count > 0)
+                    {
+                        var tData = NewNodeItemsList[0].NodesList[0].TypeData;
+                        object tObj = tData.CustomNodes.FirstOrDefault() ?? tData.Constructors.FirstOrDefault()
+                            ?? tData.StructConstructors.FirstOrDefault() ?? tData.Methods.FirstOrDefault() ??
+                            tData.Properties.FirstOrDefault() ?? tData.Fields.FirstOrDefault() ?? (object)tData.Events.FirstOrDefault();
 
+                        if (tObj != null)
+                        {
+                            RealSpawnVect = CurDrawable.GetLinkingNewNodeMousePos;
+                            SpawnNewNode(tObj, RealSpawnVect);
+                            NewNode_Window.Close();
+                        }
+                    }
+                }
 
-            //GUI.Box(CreateRect(5, drawPosY, Width - 10, 20), "", Res.Box);
+            }
 
+            testSearchString = EditorGUI.TextField(new Rect(5, drawPosY, Width - 10, 20), s_SearchString, Res.SearchStringLine);
 
-            eqTypeCBRect.y = drawPosY;
-            refBool = SearchFilterType == SearchVarType.All;
-            eqTypeCBRect.x = 7;
-            eqTypeCBRect.width = 30;
+            drawPosY += 20;
+            ProgressBar.Draw(new Rect(5, drawPosY, Width - 10, 5), LoadingProgress);
+            drawPosY += 6;
 
-            if (DrawCheckBox(eqTypeCBRect, "All", refBool, Res.RadioButton, true))
+            r.y = drawPosY;
+            r.x = 7;
+            r.width = 30;
+            if (DrawCheckBox(r, "All", SearchFilterType == SearchVarType.All, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.All;
-                FilterBase();
             }
 
-            refBool = SearchFilterType == SearchVarType.Constructor;
-            eqTypeCBRect.x += 35;
-            eqTypeCBRect.width = 45;
-            if (DrawCheckBox(eqTypeCBRect, "Ctor", refBool, Res.RadioButton, true))
+            r.x += 35;
+            r.width = 45;
+            if (DrawCheckBox(r, "Ctor", SearchFilterType == SearchVarType.Constructor, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.Constructor;
-                FilterBase();
             }
 
-            refBool = SearchFilterType == SearchVarType.Method;
-            eqTypeCBRect.x += 50;
-            eqTypeCBRect.width = 70;
-            if (DrawCheckBox(eqTypeCBRect, "Function", refBool, Res.RadioButton, true))
+            r.x += 50;
+            r.width = 70;
+            if (DrawCheckBox(r, "Function", SearchFilterType == SearchVarType.Method, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.Method;
-                FilterBase();
             }
 
-            refBool = SearchFilterType == SearchVarType.Field;
-            eqTypeCBRect.x += 75;
-            if (DrawCheckBox(eqTypeCBRect, "Variable", refBool, Res.RadioButton, true))
+            r.x += 75;
+            if (DrawCheckBox(r, "Variable", SearchFilterType == SearchVarType.Field, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.Field;
-                FilterBase();
             }
 
-            refBool = SearchFilterType == SearchVarType.Property;
-            eqTypeCBRect.x += 80;
-            if (DrawCheckBox(eqTypeCBRect, "Property", refBool, Res.RadioButton, true))
+            r.x += 80;
+            if (DrawCheckBox(r, "Property", SearchFilterType == SearchVarType.Property, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.Property;
-                FilterBase();
             }
 
-            refBool = SearchFilterType == SearchVarType.Event;
-            eqTypeCBRect.x += 75;
-            if (DrawCheckBox(eqTypeCBRect, "Event", refBool, Res.RadioButton, true))
+            r.x += 75;
+            if (DrawCheckBox(r, "Event", SearchFilterType == SearchVarType.Event, Res.RadioButton, true))
             {
                 SearchFilterType = SearchVarType.Event;
+            }
+
+            if (EditorGUI.EndChangeCheck())
+            {
+                EditorOptions.Save();
                 FilterBase();
             }
 
             drawPosY += 20;
 
-
-       
-
             if (TypeDataBase.b_IsIniting)
             {
-                ProgressBar.DrawWithLabel(CreateRect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
+                ProgressBar.DrawWithLabel(new Rect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
             }
 
-      
-
-        
-            
             if (s_SearchString != testSearchString)
             {
                 s_SearchString = testSearchString;
                 b_UseDot = s_SearchString.Contains(".");
                 s_SearchStringClear = s_SearchString.Replace(" ", "").Replace(".", "");
-            
-                //layermask
-                //SearchType = TestSearchNameType(s_SearchString);
+
                 FilterBase();
             }
 
-         
-
-            ScrollRect = CreateRect(5, drawPosY, Width - 10, Height - drawPosY - 3);
+       
+            ScrollRect = new Rect(5, drawPosY, Width - 10, Height - drawPosY - 3);
 
-            v_NewNodeScroll = GUI.BeginScrollView(ScrollRect, v_NewNodeScroll, CreateRect(0, 30, 100, ItemsDrawPos));
+            v_NewNodeScroll = GUI.BeginScrollView(ScrollRect, v_NewNodeScroll, new Rect(0, 30, 100, ItemsDrawPos));
 
-            RealScrollRect = ScrollRect;
+            RealScrollRect.size = ScrollRect.size;
             RealScrollRect.y = v_NewNodeScroll.y + 30;
             RealScrollRect.x = 0;
 
-
             ItemsDrawPos = 30;
 
-
-            foreach (AssemblyListItem assem in NewNodeItemsList.ToList())
+            foreach (AssemblyListItem assem in NewNodeItemsList)
             {
                 if (assem.b_Used)
                 {
@@ -426,16 +312,12 @@
 
                     if (!custom)
                     {
-                        if (GUI.Button(CreateRect(0, ItemsDrawPos, 370, 14), assem.AssemblyName, Res.ListButton))
+                        if (GUI.Button(new Rect(0, ItemsDrawPos, 370, 14), assem.AssemblyName, Res.ListButton))
                         {
                             assem.b_Opened = !assem.b_Opened;
                         }
 
-                        assem.b_Opened = GUI.Toggle(CreateRect(0, ItemsDrawPos + 2, 8, 8), assem.b_Opened, "", Res.ListGroupToggleButton);
-
-
-
-                        //assem.b_Opened = EditorGUI.Foldout(CreateRect(0, ItemsDrawPos, NewNode_Window.DrawRect.width, 15), assem.b_Opened, assem.AssemblyName);
+                        assem.b_Opened = GUI.Toggle(new Rect(0, ItemsDrawPos + 2, 8, 8), assem.b_Opened, GUIContent.none, Res.ListGroupToggleButton);
                     }
                     else
                     {
@@ -445,7 +327,7 @@
 
                     if (assem.b_Opened)
                     {
-                        foreach (NewNodeListItem node in assem.NodesList.ToList())
+                        foreach (NewNodeListItem node in assem.NodesList)
                         {
                             node.DrawListItems();
                         }
@@ -465,64 +347,56 @@
 
                     if (custom)
                         ItemsDrawPos += 5;
-
                 }
             }
 
             ItemsDrawPos += 5;
 
-
             if (Options.FavoriteNodes.Count > 0)
             {
-                GUI.Label(CreateRect(0, ItemsDrawPos, 375, 20), "Favorite nodes:");
+                GUI.Label(new Rect(0, ItemsDrawPos, 375, 20), "Favorite nodes:");
                 ItemsDrawPos += 17;
 
-
-
                 foreach (var favNode in Options.FavoriteNodes)
                 {
-                    GUI.Box(CreateRect(0, ItemsDrawPos - 1, 350, 16), "", Res.Box_Borders);
-
+                    GUI.Box(new Rect(0, ItemsDrawPos - 1, 350, 16), "", Res.Box_Borders);
 
                     if (favNode.b_DefaultNode)
                     {
                         GUI.color = new Color32(128, 128, 128, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.icon_default_Node);
-                       
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.icon_default_Node);
                     }
                     else if (favNode.NodeType == NodeTypeE.Constructor || favNode.NodeType == NodeTypeE.StructConstructor)
                     {
                         GUI.color = new Color32(16, 168, 0, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.IconConstructor);
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.IconConstructor);
                     }
                     else if (favNode.NodeType == NodeTypeE.Method)
                     {
                         GUI.color = new Color32(0, 200, 255, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.IconMethod);
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.IconMethod);
                     }
                     else if (favNode.NodeType == NodeTypeE.Property)
                     {
                         GUI.color = new Color32(16, 168, 0, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.IconProperty);
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.IconProperty);
                     }
                     else if (favNode.NodeType == NodeTypeE.Field)
                     {
                         GUI.color = new Color32(16, 168, 0, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.IconField);
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.IconField);
                     }
                     else if (favNode.NodeType == NodeTypeE.Event)
                     {
                         GUI.color = new Color32(16, 168, 0, 200);
-                        GUI.DrawTexture(CreateRect(2, ItemsDrawPos + 2f, 10, 10), Res.IconEnum);
+                        GUI.DrawTexture(new Rect(2, ItemsDrawPos + 2f, 10, 10), Res.IconEnum);
                     }
 
-
                     GUI.color = Color.white;
 
+                    var favButtonRect = new Rect(12, ItemsDrawPos, 335, 15);
 
-                    var favButtonRect = CreateRect(12, ItemsDrawPos, 335, 15);
-
-                    if(favButtonRect.Contains(Event.current.mousePosition))
+                    if (favButtonRect.Contains(Event.current.mousePosition))
                     {
                         GUIToolTipe = favNode.Name + " " + favNode.FullMemberName;
                     }
@@ -533,7 +407,7 @@
                         {
                             var foundNodeGP = DefaultNodes_FlowControl.Find(x => x.DNodeType == favNode.DefaultNodeType);
 
-                            if(foundNodeGP == null)
+                            if (foundNodeGP == null)
                                 foundNodeGP = DefaultNodes_Math.Find(x => x.DNodeType == favNode.DefaultNodeType);
 
                             if (foundNodeGP != null)
@@ -553,7 +427,7 @@
 
                             var type = GetTypeByName(favNode.FullAssmbName, ref favNode.FullTypeName);
 
-                            if(type == null)
+                            if (type == null)
                             {
                                 Debug.LogError("Can't load type: " + favNode.FullAssmbName + " from assembly: " + favNode.FullTypeName);
                                 return;
@@ -565,11 +439,10 @@
 
                                 foreach (var ctor in ctors)
                                 {
-                                    var parms = ctor.GetParameters().ToList();
                                     string FullMemberName = "(";
 
                                     bool first = false;
-                                    foreach (var param in parms)
+                                    foreach (var param in ctor.GetParameters())
                                     {
                                         if (!first)
                                             first = true;
@@ -587,9 +460,9 @@
                                     }
                                 }
 
-                                if(SpawnData == null)
+                                if (SpawnData == null)
                                 {
-                                    if(ctors.Length > 0)
+                                    if (ctors.Length > 0)
                                     {
                                         SpawnData = ctors[0];
                                         Debug.LogError("Can't find constructor mach parameters, selecting first..");
@@ -621,11 +494,10 @@
                                     if (method.Name != favNode.MemberName)
                                         continue;
 
-                                    var parms = method.GetParameters().ToList();
                                     string FullMemberName = "(";
 
                                     bool first = false;
-                                    foreach (var param in parms)
+                                    foreach (var param in method.GetParameters())
                                     {
                                         if (!first)
                                             first = true;
@@ -669,8 +541,6 @@
                             }
                             /////////////////////////////////////////////
 
-
-
                             if (SpawnData != null)
                             {
                                 RealSpawnVect = CurDrawable.GetLinkingNewNodeMousePos;
@@ -684,40 +554,29 @@
                         }
                     }
 
-                    if (GUI.Button(CreateRect(347, ItemsDrawPos, 28, 15), "-", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(347, ItemsDrawPos, 28, 15), "-", Res.ButtonSimple))
                     {
                         Options.FavoriteNodes.Remove(favNode);
                         EditorOptions.Save();
                         break;
                     }
 
-                    //GUI.Box(CreateRect(350, ItemsDrawPos - 1, 25, 16), "", Res.Box_Borders);
+                    //GUI.Box(new Rect(350, ItemsDrawPos - 1, 25, 16), "", Res.Box_Borders);
 
                     ItemsDrawPos += 15;
-
-               
                 }
-
             }
             ItemsDrawPos += 30;
 
-
-            if (GUI.Button(CreateRect(0, ItemsDrawPos, 375, 20), "Assemblies", Res.PopupButton))
+            if (GUI.Button(new Rect(0, ItemsDrawPos, 375, 20), "Assemblies", Res.PopupButton))
             {
                 InitAssemlies();
                 b_AssembliesOpened = !b_AssembliesOpened;
                 ResizePos(WindowPos);
             }
 
-
             ItemsDrawPos += 30;
 
-
-
-
-
-
-
             if (b_AssembliesOpened)
             {
                 foreach (UsedAssembly assem in CurScript.UsedAsseblies)
@@ -725,15 +584,14 @@
                     if (assem.AssemblyName.Contains("&&") || assem.AssemblyName == "")
                         continue;
 
-
                     bool used = assem.Used;
 
-                    if (GUI.Button(CreateRect(5, ItemsDrawPos, 365, 15), "    " + assem.AssemblyName, Res.ListButton))
+                    if (GUI.Button(new Rect(5, ItemsDrawPos, 365, 15), "    " + assem.AssemblyName, Res.ListButton))
                     {
                         used = !used;
                     }
 
-                    used = GUI.Toggle(CreateRect(5, ItemsDrawPos, 15, 15), used, "", Res.CheckBoxButton);
+                    used = GUI.Toggle(new Rect(5, ItemsDrawPos, 15, 15), used, "", Res.CheckBoxButton);
 
                     if (assem.Used != used)
                     {
@@ -748,11 +606,8 @@
                 }
             }
 
-
-
             GUI.EndScrollView();
-            GUI.DragWindow(CreateRect(0, 0, 1000, 30));
-
+            GUI.DragWindow(new Rect(0, 0, 1000, 30));
 
             if (b_WindowSearchFocus || GUI.GetNameOfFocusedControl() != "NewNodeSearchTextField")
             {
@@ -760,13 +615,10 @@
                 b_WindowSearchFocus = false;
                 GUI.FocusWindow(windowID);
             }
-
-         
         }
 
         private static ObsoleteAttribute attrib = null;
-        private static Rect ObsoleteDrawRect = CreateRect();
-
+        private static Rect ObsoleteDrawRect = new Rect();
 
         public static void SpawnNewNode(object meth, Vector2 pos)
         {
@@ -779,13 +631,13 @@
 
             Linking.TryLinkToNode(newNode);
 
-            if(FilterByExtPin)
+            if (FilterByExtPin)
             {
                 Linking.StartPinLinking(FilterOutNodeId, FilterOutPin);
                 Linking.TryLinkToNode(newNode);
             }
 
-            NNW_DragItem = null;       
+            NNW_DragItem = null;
         }
 
         public static object NNW_DragItem = null;
@@ -796,23 +648,19 @@
             public string NodesGroupName = "";
             public bool b_GroupListOpen = false;
 
-            public TypeBase_Type TypeData;
+            public TypeBase_TypeMutable TypeData;
 
             void SpawnGroup()
             {
-               
-
-                Rect drawrect = CreateRect(12, 18 + ItemsDrawPos, 370, 14);
+                Rect drawrect = new Rect(12, 18 + ItemsDrawPos, 370, 14);
 
                 if (NewNode_Window.RealScrollRect.Contains(drawrect.position))
                 {
-
                     if (GUI.Button(drawrect, NodesGroupName, Res.ListButton))
                     {
                         b_GroupListOpen = !b_GroupListOpen;
                     }
 
-
                     drawrect.y += 2;
                     drawrect.width = 8;
                     drawrect.height = 8;
@@ -827,7 +675,7 @@
             {
                 get
                 {
-                  return CreateRect(20, ItemsDrawPos + 18, 330, 14);
+                    return new Rect(20, ItemsDrawPos + 18, 330, 14);
                 }
             }
 
@@ -835,11 +683,9 @@
             {
                 SpawnGroup();
 
-
                 if (b_GroupListOpen)
                 {
-                    Rect labelRect = CreateRect(20, ItemsDrawPos, 100, 16);
-
+                    Rect labelRect = new Rect(20, ItemsDrawPos, 100, 16);
 
                     if (TypeData.CustomNodes.Count > 0)
                     {
@@ -862,8 +708,6 @@
                         }
                     }
 
-
-
                     if (TypeData.Constructors.Count > 0)
                     {
                         ItemsDrawPos += 17;
@@ -906,8 +750,6 @@
                         }
                     }
 
-
-
                     if (TypeData.Methods.Count > 0)
                     {
                         ItemsDrawPos += 17;
@@ -928,9 +770,9 @@
                                 {
                                     if (attr is ObsoleteAttribute)
                                     {
-                                        if (CreateRect(5, ItemsDrawPos + 18, 370, 16).Contains(Event.current.mousePosition))
+                                        if (new Rect(5, ItemsDrawPos + 18, 370, 16).Contains(Event.current.mousePosition))
                                         {
-                                            ObsoleteDrawRect = CreateRect(5, ItemsDrawPos + 18, 370, 16);
+                                            ObsoleteDrawRect = new Rect(5, ItemsDrawPos + 18, 370, 16);
                                             attrib = attr as ObsoleteAttribute;
                                         }
 
@@ -947,7 +789,6 @@
                         }
                     }
 
-
                     if (TypeData.Properties.Count > 0)
                     {
                         ItemsDrawPos += 17;
@@ -969,8 +810,6 @@
                         }
                     }
 
-
-
                     if (TypeData.Fields.Count > 0)
                     {
                         ItemsDrawPos += 17;
@@ -1017,7 +856,7 @@
 
             private void GetDocForItem(string itemName, object LItem)
             {
-                if(optimizeDocItem != itemName)
+                if (optimizeDocItem != itemName)
                 {
                     DocInfoResult = null;
                     optimizeDocItem = itemName;
@@ -1025,20 +864,19 @@
                     DocInfoResult = DocInfo.GetXmlDocumentation(LItem);
                 }
             }
- 
+
             private void DrawItem(string LItemName, object LItem, Rect drawRect)
             {
                 var favRect = drawRect;
                 favRect.x += favRect.width;
                 favRect.width = 25.0f;
 
-
                 if (GUI.Button(favRect, "☆", Res.ButtonSimple))
                 {
-                
-
-                    FavoriteNode newFavNode = new FavoriteNode();
-                    newFavNode.Name = LItemName;
+                    FavoriteNode newFavNode = new FavoriteNode
+                    {
+                        Name = LItemName
+                    };
 
                     if (LItem is NodeGenPins)
                     {
@@ -1058,10 +896,9 @@
                             newFavNode.FullTypeName = ci.DeclaringType.FullName;
                             newFavNode.FullAssmbName = ci.DeclaringType.Assembly.FullName;
 
-                            var parms = ci.GetParameters().ToList();
                             newFavNode.FullMemberName = "(";
                             bool first = false;
-                            foreach (var param in parms)
+                            foreach (var param in ci.GetParameters())
                             {
                                 if (!first)
                                     first = true;
@@ -1097,12 +934,11 @@
                             newFavNode.FullTypeName = mi.DeclaringType.FullName;
                             newFavNode.FullAssmbName = mi.DeclaringType.Assembly.FullName;
 
-                            var parms = mi.GetParameters().ToList();
-                            newFavNode.FullMemberName = "(";//mi.Name.Replace("set_", "").Replace("get_", "") + 
+                            newFavNode.FullMemberName = "(";//mi.Name.Replace("set_", "").Replace("get_", "") +
                             newFavNode.MemberName = mi.Name;
 
                             bool first = false;
-                            foreach (var param in parms)
+                            foreach (var param in mi.GetParameters())
                             {
                                 if (!first)
                                     first = true;
@@ -1145,7 +981,6 @@
                     InfoMessages.ShowMessage("Added to favorites: " + LItemName);
                 }
 
-
                 var bordRect = drawRect;
 
                 bordRect.x -= 1;
@@ -1161,30 +996,27 @@
                     NewNode_Window.Close();
                 }
 
-                if(_LMB_Down && drawRect.Contains(Event.current.mousePosition))
+                if (_LMB_Down && drawRect.Contains(Event.current.mousePosition))
                 {
                     NNW_DragItem = LItem;
                     NNW_DragItem_Name = LItemName;
                 }
 
-
                 drawRect.x += 1;
                 drawRect.y += 2;
 
                 drawRect.height = 10;
                 drawRect.width = 10;
 
-                
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     GetDocForItem(LItemName, LItem);
 
-                    if(DocInfoResult != null)
+                    if (DocInfoResult != null)
                     {
                         GUIToolTipe = DocInfoResult.Summary.Para;
                     }
                 }
-                
 
                 if (LItem is ConstructorInfo || LItem is StructConstructorInfo)
                 {
@@ -1250,19 +1082,14 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Draw type is not defined!");
+                    if (Options.b_ShowDebug) Debug.Log("Draw type is not defined!");
                 }
                 GUI.color = Color.white;
-
-
-                
-
             }
         }
 
         public static Vector2 RealSpawnVect = Vector2.zero;
 
-
         //////////////////// ASYNC //////////////////////////////////////////////////////////////////
         public float LoadingProgress = 0;
 
@@ -1273,7 +1100,7 @@
             if (CurScript == null)
                 return;
 
-            if(b_AbortThread)
+            if (b_AbortThread)
             {
                 return;
             }
@@ -1288,17 +1115,18 @@
             {
                 b_Filtering = true;
                 LoadingProgress = 0;
-                m_Thread = new System.Threading.Thread(FilterBaseAsync);
-                m_Thread.IsBackground = true;
-                m_Thread.Priority = Options.ThreadSearchPriority;
+                m_Thread = new System.Threading.Thread(FilterBaseAsync)
+                {
+                    IsBackground = true,
+                    Priority = Options.ThreadSearchPriority
+                };
                 m_Thread.Start();
-            }            
+            }
         }
-        
 
         public void AbortThread()
         {
-            if(m_Thread != null && !b_AbortThread)
+            if (m_Thread != null && !b_AbortThread)
             {
                 b_Filtering = false;
                 b_AbortThread = true;
@@ -1311,24 +1139,21 @@
             b_AbortThread = false;
         }
 
-
         public bool b_Filtering = false;
         private bool b_Abort_RepeatFilter = false;
         private bool b_AbortThread = false;
 
-        private void FilterBaseAsync() 
+        private void FilterBaseAsync()
         {
             var ssmbList = GetUsedAssembList_CurScript();
             while (!TypeDataBase.UpdateTypeBase(ssmbList)) { }
 
-            if(!b_AbortThread)
+            if (!b_AbortThread)
             {
                 CurScript.NS_LoadedList = TypeDataBase.Namespaces;
                 Init_NewNodeWindowItems();
             }
 
-            
-
             LoadingProgress = 1;
             b_Filtering = false;
             m_Thread.Abort();
@@ -1345,8 +1170,8 @@
 
         ///////////////////////////////////////////////////////////////////////////////////////
 
-
         public bool b_OpenAllGroups = false;
+
         public void Init_NewNodeWindowItems()
         {
             try
@@ -1356,9 +1181,9 @@
 
                 b_OpenAllGroups = !EmptyFilters;
 
-                HashSet<AssemblyListItem> newList = new HashSet<AssemblyListItem>();
+                List<AssemblyListItem> newList = new List<AssemblyListItem>();
 
-                NewNodeItemsList = new HashSet<AssemblyListItem>();
+                NewNodeItemsList = new List<AssemblyListItem>();
                 NodesCount = 0;
                 if (CurScript == null)
                     return;
@@ -1368,34 +1193,41 @@
                     if (CurScript == null)
                         return;
                     LoadingProgress += 1.0f / CurScript.NS_LoadedList.Count;
-                    AssemblyListItem AsItem = new AssemblyListItem();
-                    AsItem.AssemblyName = Ns.NamespaceName;
-
-                    AsItem.b_Opened = b_OpenAllGroups;
-
+                    AssemblyListItem AsItem = new AssemblyListItem
+                    {
+                        AssemblyName = Ns.NamespaceName,
 
-                    newList.Add(AsItem);
+                        b_Opened = b_OpenAllGroups
+                    };
 
                     AsItem.b_Used = true;
 
-                    HashSet<TypeBase_Type> FilteredTypes;
+                    List<TypeBase_TypeMutable> FilteredTypes;
 
                     if (b_Abort_RepeatFilter || b_AbortThread)
                         break;
 
                     FilteredTypes = Filter(Ns);
 
+                    if (FilteredTypes.Count > 0)
+                        newList.Add(AsItem);
+                    else
+                        continue;
+
                     if (b_Abort_RepeatFilter || b_AbortThread)
                         break;
 
-                    foreach (TypeBase_Type type in FilteredTypes)
+                    foreach (TypeBase_TypeMutable type in FilteredTypes)
                     {
                         if (b_Abort_RepeatFilter || b_AbortThread)
                             break;
-                        NewNodeListItem TypeMPList = new NewNodeListItem();
-                        TypeMPList.b_GroupListOpen = b_OpenAllGroups;
-                        TypeMPList.NodesGroupName = type.Name;
-                        TypeMPList.TypeData = type;
+
+                        NewNodeListItem TypeMPList = new NewNodeListItem
+                        {
+                            b_GroupListOpen = b_OpenAllGroups,
+                            NodesGroupName = type.Name,
+                            TypeData = type
+                        };
                         AsItem.NodesList.Add(TypeMPList);
                     }
 
@@ -1404,7 +1236,6 @@
                 }
                 NewNodeItemsList = newList;
 
-
                 //Debug.Log("End current FilterBaseAsync");
 
                 if (b_Abort_RepeatFilter && !b_AbortThread)
@@ -1418,44 +1249,41 @@
             {
                 //if (Options.b_ShowDebug) Debug.Log("Error in the Init_NewNodeWindowItems thread. Exception: " + e);
             }
-
         }
 
-        private bool SearchByType = false;
-        private HashSet<TypeBase_Type> Filter(TypeBase_NameSpaceceTypes NS)
+        // private bool SearchByType = false;
+        private List<TypeBase_TypeMutable> Filter(TypeBase_NameSpaceceTypes NS)
         {
+            List<TypeBase_TypeMutable> FilteredTypes = new List<TypeBase_TypeMutable>();
 
-            HashSet<TypeBase_Type> FilteredTypes = new HashSet<TypeBase_Type>();
-   
             foreach (TypeBase_Type AssembTypes in NS.AllTypes)
             {
-                TypeBase_Type filterAssem = new TypeBase_Type();
-                filterAssem.Type = AssembTypes.Type;
-                filterAssem.Name = AssembTypes.Name;
- 
+                TypeBase_TypeMutable filterAssem = new TypeBase_TypeMutable
+                {
+                    Type = AssembTypes.Type,
+                    Name = AssembTypes.Name
+                };
 
                 string lastName = "";
 
-                SearchByType = false;
-
+                // SearchByType = false;
 
                 if (filterAssem.Type != null)
                 {
                     if (s_SearchString.Length > 0 && !Linking.IsLinkingSomething)
                     {
-                        SearchByType = s_SearchString.ToLower() == filterAssem.Type.Name.ToLower();
+                        // SearchByType = s_SearchString.ToLower() == filterAssem.Type.Name.ToLower();
                     }
                 }
 
-                if(Options.b_SearchInCurrentType && Linking.IsLinkingSomething)
+                if (Options.b_SearchInCurrentType && Linking.IsLinkingSomething)
                 {
                     if (filterAssem.Type != Linking.NodePin.type.PType)
                         continue;
-                    else
-                        SearchByType = true;
+                    //else
+                    //    SearchByType = true;
                 }
 
-
                 bool add = false;// SearchByType;
 
                 if (SearchFilterType == SearchVarType.All || SearchFilterType == SearchVarType.Method)
@@ -1478,7 +1306,7 @@
                                 {
                                     bool isBaseClass = reflectedType == inheritClassBType.PType;
 
-                                    if(!isBaseClass)
+                                    if (!isBaseClass)
                                     {
                                         bool isSubcl = reflectedType.IsSubclassOf(inheritClassBType.PType);
                                         if (!isSubcl)
@@ -1491,16 +1319,16 @@
                                 }
                             }
                         }
-                        if(skip)
+                        if (skip)
                         {
                             continue;
                         }
 
                         //string name = LItem.ReflectedType.Name + LItem.Name;
-                        
+
                         if (lastName != LItem.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.Name, LItem.DeclaringType.Name, filterAssem.Type))
                             {
                                 filterAssem.Methods.Add(LItem);
@@ -1512,10 +1340,8 @@
                     }
                 }
 
-
                 lastName = "";
 
-
                 if (SearchFilterType == SearchVarType.All || SearchFilterType == SearchVarType.Property)
                 {
                     foreach (PropertyInfo LItem in AssembTypes.Properties)
@@ -1531,7 +1357,7 @@
 
                         if (lastName != LItem.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.Name, LItem.DeclaringType.Name, filterAssem.Type))
                             {
                                 filterAssem.Properties.Add(LItem);
@@ -1553,7 +1379,7 @@
 
                         if (lastName != LItem.DeclaringType.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.DeclaringType.Name, "new ", filterAssem.Type))
                             {
                                 filterAssem.Constructors.Add(LItem);
@@ -1564,13 +1390,12 @@
                         }
                     }
 
-
                     lastName = "";
                     foreach (var LItem in AssembTypes.StructConstructors)
                     {
                         if (lastName != LItem.StructType.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.StructType.Name, "new ", filterAssem.Type))
                             {
                                 filterAssem.StructConstructors.Add(LItem);
@@ -1594,13 +1419,12 @@
                         {
                             continue;
                         }
-                        
+
                         if (lastName != LItem.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.Name, LItem.DeclaringType.Name, filterAssem.Type))
                             {
-
                                 filterAssem.Fields.Add(LItem);
                                 lastName = LItem.Name;
                                 add = true;
@@ -1625,7 +1449,7 @@
 
                         if (lastName != LItem.Name)
                         {
-                            //SearchByType || 
+                            //SearchByType ||
                             if (TestItem(LItem, LItem.Name, LItem.DeclaringType.Name, filterAssem.Type))
                             {
                                 filterAssem.Events.Add(LItem);
@@ -1636,8 +1460,7 @@
                         }
                     }
                 }
-                
-                
+
                 lastName = "";
                 //if (!Options.b_DeclearedType)
                 {
@@ -1656,7 +1479,7 @@
 
                 if (add || (!Linking.IsLinkingSomething && s_SearchStringClear.Length > 0 && TestSearchName(s_SearchStringClear, AssembTypes.Name, Options.SearchFilterType)))
                 {
-                    FilteredTypes.Add(filterAssem);           
+                    FilteredTypes.Add(filterAssem);
                 }
             }
             return FilteredTypes;
@@ -1672,7 +1495,6 @@
             {
                 return ((propertyInfo.CanRead && propertyInfo.GetGetMethod() != null) || (propertyInfo.CanWrite && propertyInfo.GetSetMethod() != null));
             }
-      
         }
 
         private bool CheckField(FieldInfo field)
@@ -1715,12 +1537,10 @@
             bool PlacingSearchFilter = true;
             bool PlacingConPinFilter = true;
 
-    
-            
             if (s_SearchStringClear.Length > 0)//By search
             {
                 PlacingSearchFilter = TestSearchName(s_SearchStringClear, LItemName, ownerName, Options.SearchFilterType, b_UseDot);
-            
+
                 if (!PlacingSearchFilter)
                     return false;
             }
@@ -1750,16 +1570,15 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Error# 1");
+                        if (Options.b_ShowDebug) Debug.Log("Error# 1");
                     }
                 }
                 else if (Linking.b_PinLinking)
                 {
-             
                     if (Linking.NodePin.PinType == PinTypeE.PinIn)
                     {
                         //by out
-                        if(TestNode.PassFilter_ToOut(Linking.NodePin.type.PType, Options.b_DirectTypesLinking))
+                        if (TestNode.PassFilter_ToOut(Linking.NodePin.type.PType, Options.b_DirectTypesLinking))
                             PlacingConPinFilter = true;
                     }
                     else if (Linking.NodePin.PinType == PinTypeE.PinOut)
@@ -1770,15 +1589,14 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Error# 2");
-                    }     
+                        if (Options.b_ShowDebug) Debug.Log("Error# 2");
+                    }
                 }
             }
 
             return PlacingSearchFilter && PlacingConPinFilter;
         }
 
-
         public class AssemblyListItem
         {
             public bool b_Opened = false;
@@ -1789,7 +1607,6 @@
         }
     }
 
-
     [Flags]
     public enum SearchVarType
     {
@@ -1800,4 +1617,4 @@
         Constructor = 16,
         Event = 32
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_NewScriptWIndow.cs Editor/m_NewScriptWIndow.cs
--- .Editor/m_NewScriptWIndow.cs	2018-06-30 08:59:18.550627400 +0700
+++ Editor/m_NewScriptWIndow.cs	2018-06-30 09:02:03.848518400 +0700
@@ -1,21 +1,20 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
-    public static NewScript_WIndow NewScriptWIndow = new NewScript_WIndow();
+    public static NewScript_Window NewScriptWindow = new NewScript_Window();
     public static ScriptType NewScript_SelectedScriptVariant = ScriptType.Undefined;
     public static string NewScript_Description = "";
 
     public class _None_ { }
-    public class NewScript_WIndow
+
+    public class NewScript_Window
     {
         public bool b_Active = false;
 
@@ -26,25 +25,24 @@
 
             b_Active = true;
         }
-        
+
         private const float Height = 300;
 
         public Rect DrawRect;
+
         public void Draw()
         {
             if (b_Active)
             {
-                DrawRect = CreateRect(BPE.position.width / 2 - (DrawPosX + 10) / 2, BPE.position.height / 2 - (DrawPosY + 10) / 2, DrawPosX + 10, DrawPosY + 10);
+                DrawRect = new Rect(BPE.position.width / 2 - (DrawPosX + 10) / 2, BPE.position.height / 2 - (DrawPosY + 10) / 2, DrawPosX + 10, DrawPosY + 10);
 
                 if (_LMB_Down || _RMB_Down)
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
                     RMB_Up_Deleg = delegate
                     {
-
                     };
                     if (!DrawRect.Contains(Event.current.mousePosition))
                     {
@@ -55,24 +53,15 @@
 
                 //GUI.Window(9, DrawRect, OpenScriptFunction, "", Res.EmptyStyle);
 
-
                 OpenScriptFunction(0);
- 
             }
         }
 
-
         private float DrawPosY = 0;
         private float DrawPosX = 0;
 
-  
-
-
-      
-
         private string[] _assemblyMonobehsNames = null;
 
-
         private string[] AssemblyMonobehsNames
         {
             get
@@ -80,25 +69,21 @@
                 if (_assemblyMonobehsNames == null)
                 {
                     _assemblyMonobehsNames = AssemblyMonobehs.Select(x => x.Name).ToArray();
-
                 }
                 return _assemblyMonobehsNames;
             }
-
         }
 
         private Type[] _assemblyMonobehs = null;
 
-
         private Type[] AssemblyMonobehs
         {
             get
             {
-                if(_assemblyMonobehs == null)
+                if (_assemblyMonobehs == null)
                 {
-                    Assembly CSHAssemb = AppDomain.CurrentDomain.GetAssemblies().ToList().Find(x => x.GetName().Name == "Assembly-CSharp");
-                    var _assemblyMonobehsL = CSHAssemb.GetTypes().ToList().ToList();
-                    _assemblyMonobehsL = _assemblyMonobehsL.FindAll(x => IsMonobeh(x)).OrderBy(x => x.Name).ToList();
+                    Assembly CSHAssemb = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetName().Name == "Assembly-CSharp");
+                    var _assemblyMonobehsL = CSHAssemb.GetTypes().Where(x => IsMonobeh(x)).ToList();
                     _assemblyMonobehsL.Add(typeof(MonoBehaviour));
                     _assemblyMonobehs = _assemblyMonobehsL.ToArray();
                 }
@@ -123,27 +108,24 @@
             */
         }
 
-
-
         void OpenScriptFunction(int windowID)
         {
             //GUI.BringWindowToFront(windowID);
-            Graphics.DrawTexture(DrawRect, Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(DrawRect, Res.BaseWindow, 25, 25, 25, 25);
 
-
-            GUI.Box(CreateRect(DrawRect.x + 10, DrawRect.y + 40, DrawPosX - 10, DrawPosY - 40), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 10, DrawRect.y + 40, DrawPosX - 10, DrawPosY - 40), "", Res.Box);
             DrawPosX = DrawRect.x + 20;
             DrawPosY = DrawRect.y + 10;
 
             if (CurScript == null)
             {
-                if (GUI.Button(CreateRect(DrawRect.x + DrawRect.width - 25, DrawPosY - 5, 20, 20), "X", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawRect.x + DrawRect.width - 25, DrawPosY - 5, 20, 20), "X", Res.ButtonSimple))
                 {
                     b_Active = false;
                 }
             }
-           
-            GUI.Label(CreateRect(DrawRect.x + (DrawRect.width / 2 - 100), DrawPosY, 300, 30), "Select script type:", Res.BigWindowLabel);
+
+            GUI.Label(new Rect(DrawRect.x + (DrawRect.width / 2 - 100), DrawPosY, 300, 30), "Select script type:", Res.BigWindowLabel);
             DrawPosY += 40;
 
             DrawButton("Monobehaviour", null, ScriptType.Monobehaviour,
@@ -155,23 +137,20 @@
             DrawButton("Editor Plugin", null, ScriptType.EditorPlugin,
                 "Create your own custom editor window that can float free or be docked as a tab, just like the native windows in the Unity interface.");
 
-
             DrawButton("Scriptable Obj.", null, ScriptType.ScriptableObj,
                "For creating the objects that don't need to be attached to game objects. This is most useful for assets which are only meant to store data.");
 
             DrawButton("Console Applic.", null, ScriptType.ConsoleApp,
               "Creating the command line application. (Note: the precompiler should be enabled in the options.)");
 
-
             DrawButton("Empty script", null, ScriptType.EmptyScript,
                 "Empty script without classes.");
 
-
             DrawButton("Parse .cs script", null, ScriptType.ParsedScript,
            "Convert CSharp code into nodes. Warning: compiling the parsed script can break your original script! Ensure that you have a backup of your script before continuing.");
 
             GUI.color = Color.red;
-            GUI.Label(CreateRect(DrawPosX - 80, DrawPosY, 30, 10), "BETA", Res.Label);
+            GUI.Label(new Rect(DrawPosX - 80, DrawPosY, 30, 10), "BETA", Res.Label);
             GUI.color = Color.white;
 
             DrawPosY += buttonHeight + 10;
@@ -185,7 +164,7 @@
 
                 int Height = (int)(labelSize / drawWidth) + 1;
 
-                GUI.TextArea(CreateRect(DrawRect.x + 20, DrawPosY, drawWidth, Height * 20), NewScript_Description);
+                GUI.TextArea(new Rect(DrawRect.x + 20, DrawPosY, drawWidth, Height * 20), NewScript_Description);
                 DrawPosY += Height * 16;
                 GUI.enabled = true;
                 DrawPosY += 10;
@@ -193,32 +172,31 @@
 
             DrawPosY += 5;
 
-            if(NewScript_SelectedScriptVariant == 0)
+            if (NewScript_SelectedScriptVariant == 0)
                 GUI.enabled = false;
-
             else if (NewScript_SelectedScriptVariant == ScriptType.ForInspector)
             {
                 if (AssemblyMonobehsNames != null && AssemblyMonobehsNames.Length > 0)
                 {
-                    GUI.Label(CreateRect(DrawRect.x + 20, DrawPosY + 2, 200, 20), "Select script:", Res.MiddleBoldNameLabel);
-                    SelectedScriptIndex = EditorGUI.Popup(CreateRect(DrawRect.x + 120, DrawPosY, 300, 20), SelectedScriptIndex, AssemblyMonobehsNames, Res.PopupButton);
+                    GUI.Label(new Rect(DrawRect.x + 20, DrawPosY + 2, 200, 20), "Select script:", Res.MiddleBoldNameLabel);
+                    SelectedScriptIndex = EditorGUI.Popup(new Rect(DrawRect.x + 120, DrawPosY, 300, 20), SelectedScriptIndex, AssemblyMonobehsNames, Res.PopupButton);
                     InspectorScript_ScriptType = AssemblyMonobehs[SelectedScriptIndex];
                 }
                 DrawPosY += 30;
             }
             else if (NewScript_SelectedScriptVariant == ScriptType.EditorPlugin)
             {
-                GUI.Label(CreateRect(DrawRect.x + 20, DrawPosY + 2, 200, 20), "Main menu name:", Res.MiddleBoldNameLabel);
+                GUI.Label(new Rect(DrawRect.x + 20, DrawPosY + 2, 200, 20), "Main menu name:", Res.MiddleBoldNameLabel);
 
                 float posx = DrawRect.x + 150;
-                Options.PluginVariant_Name_p1 = EditorGUI.TextField(CreateRect(posx, DrawPosY, 200, 20), Options.PluginVariant_Name_p1, Res.TextField);
+                Options.PluginVariant_Name_p1 = EditorGUI.TextField(new Rect(posx, DrawPosY, 200, 20), Options.PluginVariant_Name_p1, Res.TextField);
 
                 posx += 215;
 
-                GUI.Label(CreateRect(posx, DrawPosY + 2, 200, 20), "Submenu name: ", Res.MiddleBoldNameLabel);
+                GUI.Label(new Rect(posx, DrawPosY + 2, 200, 20), "Submenu name: ", Res.MiddleBoldNameLabel);
                 posx += 100;
 
-                Options.PluginVariant_Name_p2 = EditorGUI.TextField(CreateRect(posx + 10, DrawPosY, 136, 20), Options.PluginVariant_Name_p2, Res.TextField);
+                Options.PluginVariant_Name_p2 = EditorGUI.TextField(new Rect(posx + 10, DrawPosY, 136, 20), Options.PluginVariant_Name_p2, Res.TextField);
                 DrawPosY += 30;
             }
 
@@ -233,7 +211,7 @@
 
             if (NewScript_SelectedScriptVariant == ScriptType.ParsedScript)
             {
-                if (GUI.Button(CreateRect(DrawRect.x + 20, DrawPosY, DrawRect.width - 40, 30), "Open .cs file", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawRect.x + 20, DrawPosY, DrawRect.width - 40, 30), "Open .cs file", Res.ButtonSimple))
                 {
                     b_Active = false;
                     BPE.ParseFile();
@@ -241,7 +219,7 @@
             }
             else
             {
-                if (GUI.Button(CreateRect(DrawRect.x + 20, DrawPosY, DrawRect.width - 40, 30), "Create Script", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawRect.x + 20, DrawPosY, DrawRect.width - 40, 30), "Create Script", Res.ButtonSimple))
                 {
                     CreateNewScriptVariants();
                 }
@@ -254,17 +232,14 @@
             DrawPosX = DrawPosX - DrawRect.x;
         }
 
-
-
         private int SelectedScriptIndex = 0;
 
         private void CreateNewScriptVariants()
         {
-            //Graphics.DrawTexture(CreateRect(0, 0, BPE.position.width, BPE.position.height), Res.LoadingOparationOverlay);
+            //DrawTexture(new Rect(0, 0, BPE.position.width, BPE.position.height), Res.LoadingOparationOverlay);
 
-            if(!CreateNewScript(NewScript_SelectedScriptVariant == ScriptType.ForInspector || NewScript_SelectedScriptVariant == ScriptType.EditorPlugin))
+            if (!CreateNewScript(NewScript_SelectedScriptVariant == ScriptType.ForInspector || NewScript_SelectedScriptVariant == ScriptType.EditorPlugin))
                 return;
-             
 
             if (NewScript_SelectedScriptVariant != ScriptType.EmptyScript)
             {
@@ -300,6 +275,7 @@
 
             b_Active = false;
         }
+
         private static void SetupMonobVariant(ScriptClass newClass)
         {
             ConnectUnityAssemblies();
@@ -310,7 +286,6 @@
             newClass.CurrentDrawable.DrawType = DrawableType.Method;
             newClass.CurrentDrawable.ID = newF.Obj_ID;
 
-
             newF.m_AccessLevel = 0;
             newF = _CreateMethod("Update", true, true, true, newClass.Functions);
             newF.m_AccessLevel = 0;
@@ -320,7 +295,7 @@
         }
 
         private Type InspectorScript_ScriptType = typeof(_None_);
-       
+
         private void SetupInspectorVariant(ScriptClass newClass)
         {
             SetUsedAssembly("UnityEditor", true, false, false, CurScript);
@@ -345,9 +320,6 @@
                 newF.Commentary.Add(newCommToDD);
             }
 
-
-
-
             ScriptFunction inspGui = newClass.Functions.Find(x => x.Config.Name == "OnInspectorGUI");
             CurDrawable = inspGui;
             if (inspGui != null)
@@ -355,10 +327,8 @@
                 CurClass.CurrentDrawable.ID = inspGui.Obj_ID;
                 CurClass.CurrentDrawable.DrawType = DrawableType.Method;
 
-
                 ScriptFunction DrawDefault = newClass.Functions.Find(x => x.Config.Name == "DrawDefaultInspector");
 
-
                 entryNode = inspGui.Nodes.Find(x => x.NodeType == NodeTypeE.ClassFunctionEntry);
 
                 if (entryNode != null)
@@ -366,36 +336,30 @@
                     Node drawDefNode = new Node(DrawDefault, DefaultSpawnNode1.x + 250, DefaultSpawnNode1.y + 100);
                     inspGui.Nodes.Add(drawDefNode);
 
-
                     Linking.StartConnectorLinking(entryNode.NodeID, entryNode.ConnectorsOut[0]);
                     Linking.TryLinkToNode(drawDefNode);
                     Linking.StopLinking();
-                     
 
                     drawDefNode.DrawNode(Vector2.zero);
-                     
 
                     Commentary newCommToDD = new Commentary(new List<int>() { drawDefNode.NodeID });
                     newCommToDD.ChangeName("Draws default inspector. Create you'r code after this node");
                     inspGui.Commentary.Add(newCommToDD);
-
-                  
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find entry node to setup inspector script template");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find entry node to setup inspector script template");
                 }
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't finde inherited method OnInspectorGUI");
+                if (Options.b_ShowDebug) Debug.Log("Can't finde inherited method OnInspectorGUI");
             }
 
             //OnInspectorGUI
             //newF.m_StaticVirtOvver = 3;
         }
 
-
         private void SetupPluginVariant(ScriptClass newClass)
         {
             SetUsedAssembly("UnityEditor", true, false, false, CurScript);
@@ -409,7 +373,6 @@
             newClass.CurrentDrawable.DrawType = DrawableType.Method;
             newClass.CurrentDrawable.ID = newF.Obj_ID;
 
-
             newF = _CreateMethod("OpenWindow", true, true, true, newClass.Functions);
             newF.m_AccessLevel = 2;
             newF.m_StaticVirtOvverAbstract = 1;
@@ -420,8 +383,6 @@
             var attr = newF.SetNewAttribType_Ret(typeof(MenuItem));
             attr.AttribParameters[0].AttribTempVar.SetTempVar(Options.PluginVariant_Name_p1 + "/" + Options.PluginVariant_Name_p2);
 
-             
-
             MethodInfo getWindowMInf = typeof(EditorWindow).GetMethod("GetWindow", new Type[1] { typeof(Type) });
             Node drawDefNode = new Node(getWindowMInf, DefaultSpawnNode1.x + 250, DefaultSpawnNode1.y + 100);
 
@@ -435,7 +396,6 @@
             Linking.TryLinkToNode(drawDefNode);
             Linking.StopLinking();
 
-
             newF = _CreateMethod("OnGUI", true, true, true, newClass.Functions);
             newF.m_AccessLevel = 0;
             newClass.CurrentDrawable.DrawType = DrawableType.Method;
@@ -465,7 +425,6 @@
             CurDrawable = newF;
         }
 
-
         private static void ConnectUnityAssemblies()
         {
             if (IsNewVersion())
@@ -490,20 +449,11 @@
 
         private static bool IsNewVersion()
         {
-            if (!Application.unityVersion.StartsWith("2017") && Application.unityVersion.Contains('.'))//I'm trying to do that not only for 2017.2 version, but also for later
-                return false;
-
-            int version = 0;
-            try
-            {
-                var preparedVersion = Application.unityVersion.Split('.');
-                var versionStr = preparedVersion[0] + preparedVersion[1];
-                versionStr = new string(versionStr.Where(x => char.IsDigit(x)).ToArray());
-                version = int.Parse(versionStr);
-            }
-            catch (Exception ex) { if(Options.b_ShowDebug) Debug.LogError( ex); }
-
-            return version >= 20172;
+#if UNITY_5 || UNITY_2017_1
+            return false;
+#else
+            return true;
+#endif
         }
 
         public static bool CreateNewScript(bool editor)
@@ -538,33 +488,26 @@
             CurScript = newScript;
             newScript.ScriptFileName = newScriptPath;
 
-
             InitAssemlies();
 
-
             //SetUsedAssembly("UnityEngine", true, false, false, CurScript);
             //SetUsedAssembly("Assembly-CSharp", true, false, false, CurScript);
             SetUsedAssembly("mscorlib", true, false, false, CurScript);
-          
+
             //SaveScript(false);
 
             return true;
         }
 
-
-
-
         private const float buttonWidth = 110;
         private const float buttonHeight = 50;
 
-
         public bool DrawButton(string ButtonName, Texture buttonIcon, ScriptType variant, string Decript)
         {
-            Rect ButtonRect = CreateRect(DrawPosX, DrawPosY, buttonWidth, buttonHeight);
+            Rect ButtonRect = new Rect(DrawPosX, DrawPosY, buttonWidth, buttonHeight);
             GUI.Box(ButtonRect, "", Res.Box);
 
-
-            Rect GlobalButtonRect = CreateRect(DrawPosX, DrawPosY, buttonWidth, buttonHeight);
+            Rect GlobalButtonRect = new Rect(DrawPosX, DrawPosY, buttonWidth, buttonHeight);
 
             if (_LMB_Down && GlobalButtonRect.Contains(GlobalMousePos))
             {
@@ -572,15 +515,11 @@
                 NewScript_Description = Decript;
             }
 
-
-            if (EditorGUI.Toggle(CreateRect(DrawPosX + buttonWidth / 2 - 8, DrawPosY + buttonHeight - 20, 16, 16), NewScript_SelectedScriptVariant == variant, Res.RadioButton)) { }
-
-
+            if (EditorGUI.Toggle(new Rect(DrawPosX + buttonWidth / 2 - 8, DrawPosY + buttonHeight - 20, 16, 16), NewScript_SelectedScriptVariant == variant, Res.RadioButton)) { }
 
             float labelSize = CalcStringPixelsX(ButtonName, Res.MiddleBoldNameLabel);
 
-
-            Rect bLabelRect = CreateRect(DrawPosX + buttonWidth / 2 - labelSize / 2, DrawPosY + buttonHeight - 40, 110, 25);
+            Rect bLabelRect = new Rect(DrawPosX + buttonWidth / 2 - labelSize / 2, DrawPosY + buttonHeight - 40, 110, 25);
 
             GUI.Label(bLabelRect, ButtonName, Res.MiddleBoldNameLabel);
 
@@ -589,7 +528,6 @@
         }
     }
 
-
     public enum ScriptType
     {
         Undefined,
@@ -621,11 +559,10 @@
                 }
             }
 
-         
             if (asmName == "Nottorus_Plugin" || asmName == "Nottorus_Debug" || asmName == "Addon_CSP")
                 continue;
             GetUsedAssembly(asmName, CurScript);
         }
         CurScript.UsedAsseblies = CurScript.UsedAsseblies.OrderBy(x => x.AssemblyName).ToList();
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Node_Base.cs Editor/m_Node_Base.cs
--- .Editor/m_Node_Base.cs	2018-06-30 08:59:18.560629200 +0700
+++ Editor/m_Node_Base.cs	2018-06-30 09:02:03.853518400 +0700
@@ -1,13 +1,11 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System.IO;
-using System.Reflection;
+using System.Diagnostics;
 using System.Linq;
+using System.Reflection;
 using System.Xml.Serialization;
-using System.Collections;
-using System;
-using System.Diagnostics;
+using UnityEditor;
+using UnityEngine;
 using Debug = UnityEngine.Debug;
 
 public partial class Nottorus : EditorWindow
@@ -17,6 +15,7 @@
     {
         //////////////////////////////// Save Data: //////////////////////////////////////////
         public float PosX = 400;
+
         public float PosY = 400;
         public int NodeID;
         public NodeTypeE NodeType;
@@ -37,7 +36,6 @@
         [XmlIgnore]
         public bool BreakpointHighlite = false;
 
-
         [XmlIgnore]
         public string ErrorNodeMessage = "";
 
@@ -54,7 +52,6 @@
 
         public Doc_Node XDoc = null;
 
-
         //WARNING! Add copy data to copy constructor after adding new save data!
 
         public NodeGenericPinSelector GenPinsSelector = new NodeGenericPinSelector();
@@ -70,7 +67,6 @@
             b_Inherited = otherNode.b_Inherited;
             isStatic = otherNode.isStatic;
 
-
             foreach (Node_Connector conn in otherNode.ConnectorsIn)
                 ConnectorsIn.Add(new Node_Connector(conn));
             foreach (Node_Connector conn in otherNode.ConnectorsOut)
@@ -80,13 +76,11 @@
             Operation = otherNode.Operation;
 
             Config = new NodeConfig(otherNode.Config);
-    
+
             GenPinsSelector = new NodeGenericPinSelector(otherNode.GenPinsSelector);
             InitConfig();
         }
 
-
-
         /////////////////////////////////////////////////////////////////////////////////////
 
         private void InitDocumentationForNode(MemberInfo info)
@@ -127,32 +121,26 @@
             }
         }
 
-
         [XmlIgnore]
         public Rect NodeRect;
 
-
-
         //////////////////////////////////////////
 
         //[JsonConstructor]
         public Node() { }
 
-
-
-        
         /////////////////////////////////////////////////////////////////////////////////////
         public void InitConfig()
         {
             ErrorNodeType = 0;
-          
+
             foreach (Node_Pin pin in Config.InPins)
             {
-                if (pin.type.PType == null) 
+                if (pin.type.PType == null)
                 {
                     string mesage = "Can't define type of node out pin! Old type name: '" + pin.type.typeFullName + "'.";
                     ErrorNodeType = 2;
-                    ErrorNodeMessage = "Can't define type of node in pin!";            
+                    ErrorNodeMessage = "Can't define type of node in pin!";
                     BConsole.EditorLog(mesage, 2);
                     pin.SetVarType(typeof(ErrorTypePin));
                     pin.ErrorPin = true;
@@ -165,18 +153,17 @@
                 {
                     string mesage = "Can't define type of node out pin! Old type name: '" + pin.type.typeFullName + "'.";
                     ErrorNodeType = 2;
-                    ErrorNodeMessage = "Can't define type of node out pin!";     
+                    ErrorNodeMessage = "Can't define type of node out pin!";
                     BConsole.EditorLog(mesage, 2);
                     pin.SetVarType(typeof(ErrorTypePin));
                     pin.ErrorPin = true;
                     pin.ErrorPinMessage = mesage;
                 }
             }
-        
-             
+
             if (NodeType == NodeTypeE.Logic)
             {
-                if (Linking.Pin_Linked_ToIn(NodeID, 0) != null) 
+                if (Linking.Pin_Linked_ToIn(NodeID, 0) != null)
                 {
                     SearchAS_TypeVariants(Config.InPins[0].type.PType);
                     As_TypesVariants.Insert(0, typeof(As_Out_Pin));
@@ -222,13 +209,13 @@
             GenPinsSelector.Init(this);
         }
 
-
-
         public Node(object data, float posX, float poxY)
         {
             XDoc = null;
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType();
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType()
+            };
             NodeID = CurScript.GetFreeNodeID();
 
             PosX = posX;
@@ -268,7 +255,6 @@
 
                     EventInfo EI = classVar.Config.NodeRefType2_propOwner.PType.GetEvent(Config.Name, flags);
 
-
                     if (EI != null)
                     {
                         ReInitPins(new NodeGenPins(EI, false, true));
@@ -300,7 +286,6 @@
 
                     FieldInfo FI = classVar.Config.NodeRefType2_propOwner.PType.GetField(Config.Name, flags);
 
-
                     if (FI != null)
                     {
                         ReInitPins(new NodeGenPins(FI, false, true));
@@ -316,7 +301,6 @@
                     ReInitPins(classVar);
                 }
             }
-            
             else if (data is ScriptLocalVariable)
             {
                 ReInitPins(data as ScriptLocalVariable);
@@ -331,23 +315,18 @@
                 {
                     //ReferenceID = prop.PropertyID;
 
-              
-
                     b_Inherited = true;
                     Config.NodeRefType2_propOwner = new BType(prop.Config.NodeRefType2_propOwner);
 
-
                     Config.NodeRefType3_Indexer = new List<BType>();
                     prop.Config.NodeRefType3_Indexer.ForEach(x => Config.NodeRefType3_Indexer.Add(new BType(x)));
 
-
                     Config.Name = prop.Config.Name;
 
                     //BindingFlags flags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
 
                     PropertyInfo PI = GetPropertyByParams(Config.NodeRefType2_propOwner.PType, Config.Name, prop.Config.NodeRefType.PType, Config.NodeRefType3_Indexer.Select(x => x.PType).ToArray());
-                        //prop.Config.NodeRefType2_propOwner.PType.GetProperty(Config.Name, flags);
-
+                    //prop.Config.NodeRefType2_propOwner.PType.GetProperty(Config.Name, flags);
 
                     if (PI != null)
                     {
@@ -364,9 +343,6 @@
                     ReInitPins(data as ScriptProperty);
                 }
                 /////////
-
-
-
             }
             else if (data is ScriptPropertyControlNode)
             {
@@ -390,13 +366,11 @@
                     Config.Name = func.Config.Name;
                     SearchAnalogMethods(false);
 
-
-                    if(Analog_Methods.Count > 0)
+                    if (Analog_Methods.Count > 0)
                     {
                         MethodInfo foundMethod = Analog_Methods[0];
 
-
-                        foreach(var meth in Analog_Methods)
+                        foreach (var meth in Analog_Methods)
                         {
                             var testN = new NodeGenPins(meth, false, b_Inherited);
 
@@ -406,21 +380,20 @@
                             bool allPass = true;
                             for (int i = 0; i < testN.InPins.Length; i++)
                             {
-                                if(testN.InPins[i] != func.Config.InPins[i].type.PType)
+                                if (testN.InPins[i] != func.Config.InPins[i].type.PType)
                                 {
                                     allPass = false;
                                     break;
                                 }
                             }
-                             
-                            if(allPass)
+
+                            if (allPass)
                             {
                                 foundMethod = meth;
                                 break;
                             }
                         }
 
-
                         ReInitPins(foundMethod);
                         SearchAnalogMethods(false);
                     }
@@ -459,21 +432,18 @@
                 ReInitPins(data as StructConstructorInfo);
             }
             else
-            { 
-                if(Options.b_ShowDebug)Debug.Log("Node type is undefined: " + data);
+            {
+                if (Options.b_ShowDebug) Debug.Log("Node type is undefined: " + data);
             }
             InitConfig();
         }
 
-
         private PropertyInfo GetPropertyByParams(Type ownerType, string name, Type returnType, Type[] indexersType)
         {
             BindingFlags flags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
 
-
             var props = ownerType.GetProperties(flags);
 
-
             foreach (var prop in props)
             {
                 /*
@@ -486,22 +456,19 @@
 
                 debug += "  -  ";
 
-
                 if (prop.PropertyType != returnType)
                     debug += prop.PropertyType + "!=" + returnType;
                 else
                     debug += prop.PropertyType + "==" + returnType;
                 */
-                 
-
 
                 if (prop.Name != name || prop.PropertyType != returnType)
                 {
-                  //  Debug.LogError(debug);
+                    //  Debug.LogError(debug);
                     continue;
                 }
-              //  else
-                  //  if(Options.b_ShowDebug)Debug.Log(debug);
+                //  else
+                //  if(Options.b_ShowDebug)Debug.Log(debug);
 
                 var indexerT = prop.GetIndexParameters().Select(x => x.ParameterType).ToArray();
 
@@ -512,12 +479,12 @@
                     var type2 = indexersType[i];
                     if (type != type2)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Indexers not equal: " + type + " - " + type2);
+                        if (Options.b_ShowDebug) Debug.Log("Indexers not equal: " + type + " - " + type2);
                         cont = true;
                         break;
                     }
                 }
-                if(cont)
+                if (cont)
                 {
                     continue;
                 }
@@ -530,7 +497,7 @@
         /////////////////////////////////////////////////////
         public void ReInitPins(NodeGenPins customNode)
         {
-            if(customNode.VariantNum != -1 && customNode.VariantNum > -1)
+            if (customNode.VariantNum != -1 && customNode.VariantNum > -1)
                 Analog_SwitchID = customNode.VariantNum;
 
             if (customNode.DNodeType == DefNodeType.This || customNode.DNodeType == DefNodeType.Base)
@@ -541,7 +508,7 @@
 
                     if (func.m_StaticVirtOvverAbstract == 1)
                     {
-                        BConsole.EditorLog("Using '" + customNode.DNodeType +"' node is not allowed in static function", 2, NodeID);
+                        BConsole.EditorLog("Using '" + customNode.DNodeType + "' node is not allowed in static function", 2, NodeID);
                     }
                 }
                 else if (CurDrawable_IsProp)
@@ -573,7 +540,6 @@
 
             NodeType = customNode.NodeType;
             Config.Icon = customNode.Icon;
-            //Config.LabelColor = customNode.LabelColor;
             DNodeType = customNode.DNodeType;
             isStatic = customNode.isStatic;
 
@@ -581,7 +547,6 @@
 
             b_Inherited = customNode.b_Inherited;
 
-
             if (NodeType == NodeTypeE.Custom || NodeType == NodeTypeE.Logic)
             {
                 if (XDoc == null)
@@ -600,7 +565,6 @@
                 reinitInPins = true;
             }
 
-
             bool reinitOutPins = false;
             if (Config.OutPins.Count != customNode.OutPins.Length)
             {
@@ -608,18 +572,18 @@
                 reinitOutPins = true;
             }
 
-            
             if (Config.InPins_GParameters.Count != customNode.GenericArguments.Length)
             {
                 Config.InPins_GParameters = new List<Node_Pin>();
                 for (int i = 0; i < customNode.GenericArguments.Length; i++)
                 {
-                    Node_Pin newInPin = new Node_Pin(customNode.GenericArguments[i], "Generic Parameter " + i, PinTypeE.GenericParam, Config.UniqInPinID);//typeof(Type),
-                    newInPin.GenericParameter = true;
+                    Node_Pin newInPin = new Node_Pin(customNode.GenericArguments[i], "Generic Parameter " + i, PinTypeE.GenericParam, Config.UniqInPinID)
+                    {
+                        GenericParameter = true
+                    };
                     Config.InPins_GParameters.Add(newInPin);
                 }
             }
-            
 
             ReinitPinsByCustomNode(customNode, reinitInPins, reinitOutPins);
 
@@ -645,9 +609,6 @@
                 ReinitMathPins();
             }
 
-
-
-
             if (customNode.DNodeType == DefNodeType.ExecBConstr || customNode.DNodeType == DefNodeType.ExeThisBConstr)
             {
                 bd_CanBeSelected = false;
@@ -663,7 +624,7 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Class " + CurClass.Config.Name + " don't inherited from other class or script must be compiled (to find inherit type in assembly).");
+                        if (Options.b_ShowDebug) Debug.Log("Class " + CurClass.Config.Name + " don't inherited from other class or script must be compiled (to find inherit type in assembly).");
                     }
                 }
                 else// if(customNode.DNodeType == DefNodeType.ExeThisBConstr)
@@ -672,17 +633,15 @@
 
                     if (genType == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Script must be compiled to find this class type in assembly.");
+                        if (Options.b_ShowDebug) Debug.Log("Script must be compiled to find this class type in assembly.");
                     }
                 }
 
-
                 if (genType != null)
                 {
                     Config.NodeRefType.PType = genType;
                     SearchAnalogConstructors();
 
-
                     ReinitInPinsByConstructor(CurrentConstructor);
 
                     /*
@@ -695,10 +654,6 @@
                     */
                 }
 
-
-
-
-
                 //
                 //Config.NodeRefType.PType
             }
@@ -728,7 +683,6 @@
                     newInPin.SetVarType(customNode.InPins[i]);
                 }
 
-
                 if (customNode.InPins_IsRef.Length > 0)
                     newInPin.IsRef = customNode.InPins_IsRef[i];
 
@@ -740,7 +694,6 @@
 
                 if (customNode.InPinsOptional.Length > 0)
                     newInPin.IsOptional = customNode.InPinsOptional[i];
-
             }
             for (int i = 0; i < customNode.OutPins.Length; i++)
             {
@@ -779,15 +732,14 @@
             Config.NodeRefType2_propOwner = new BType(property.ReflectedType);
             Config.NodeRefType = new BType(property.PropertyType);
 
-
             Config.NodeRefType3_Indexer = new List<BType>();
-            property.GetIndexParameters().ToList().ForEach(x => Config.NodeRefType3_Indexer.Add(new BType(x.ParameterType)));
+            foreach (var item in property.GetIndexParameters())
+                Config.NodeRefType3_Indexer.Add(new BType(item.ParameterType));
 
             SearchCheckProperty(false);
 
             InitDocumentationForNode(property);
         }
-        
 
         public void ReInitPins(FieldInfo field)
         {
@@ -798,7 +750,6 @@
             InitDocumentationForNode(field);
         }
 
-
         public void ReInitPins(EventInfo field)
         {
             ReInitPins(new NodeGenPins(field, false, b_Inherited));
@@ -809,6 +760,7 @@
         }
 
         public bool isStatic = false;
+
         public void ReInitPins(MethodInfo method)
         {
             ReInitPins(new NodeGenPins(method, false, b_Inherited));
@@ -817,7 +769,6 @@
             InitDocumentationForNode(method);
         }
 
-
         public void ReInitPins(ScriptClassVariable Var)
         {
             NodeType = NodeTypeE.ClassVariable;
@@ -833,7 +784,6 @@
             ReinitMathPins();
         }
 
-
         public void ReInitPins(ScriptClassEvent evnt)
         {
             NodeType = NodeTypeE.ClassEvent;
@@ -855,7 +805,6 @@
 
             ReferenceID = Var.Obj_ID;
 
-
             ConnectorsIn = new List<Node_Connector>();
             ConnectorsOut = new List<Node_Connector>();
             ConnectorsIn.Add(new Node_Connector("Set", ConnectorTypeE.ConnectorIn, UniqInConnectorID));
@@ -868,14 +817,12 @@
 
             ReferenceID = Prop.PropertyID;
 
-
             ConnectorsIn = new List<Node_Connector>();
             ConnectorsOut = new List<Node_Connector>();
             ConnectorsIn.Add(new Node_Connector("Set", ConnectorTypeE.ConnectorIn, UniqInConnectorID));
             ConnectorsOut.Add(new Node_Connector("", ConnectorTypeE.ConnectorOut, UniqOutConnectorID));
         }
 
-
         public void ReInitPins(ScriptPropertyControlNode Prop)
         {
             NodeType = Prop.nType;
@@ -906,7 +853,6 @@
             }
         }
 
-
         public void ReInitPins(StructConstructorInfo structConstructor)
         {
             Config.NodeRefType.SetVarType(structConstructor.StructType);
@@ -921,7 +867,6 @@
             InitDocumentationForNode(structConstructor.StructType);
         }
 
-
         public void ReInitPins(ConstructorInfo constructor)
         {
             Config.NodeRefType.SetVarType(constructor.ReflectedType);
@@ -948,7 +893,6 @@
                 Config.InPins.Add(newPin);
             }
 
-
             Config.OutPins.Add(new Node_Pin(constructor.ReflectedType, constructor.ReflectedType.Name, PinTypeE.PinOut, Config.UniqOutPinID));
             */
 
@@ -974,13 +918,11 @@
 
         private void InitConstructorNodeByClassName(Type thisClassType, bool InitParameters)
         {
-           
-
             //Type thisClassType = Type.GetType(typeName, true);//  CurScript.VarsWindow.ClassesTypes.Find(x => x.Name == typeName);
             if (thisClassType == null)
             {
                 BConsole.EditorLog("You must to compile your code before use this node!", 1);
-                if(Options.b_ShowDebug)Debug.Log("You must to compile your code before using this node!");
+                if (Options.b_ShowDebug) Debug.Log("You must to compile your code before using this node!");
 
                 Config = new NodeConfig();
                 NodeType = NodeTypeE.Undefined;
@@ -991,7 +933,6 @@
 
                 SearchAnalogConstructors();
 
-
                 ConstructorInfo CInfo = CurrentConstructor;
 
                 if (CInfo == null)
@@ -1019,7 +960,6 @@
                         ParameterInfo[] pInfos = CurrentConstructor.GetParameters();
                         foreach (ParameterInfo pInfo in pInfos)
                         {
-
                             Node_Pin newPin = new Node_Pin(pInfo.ParameterType, pInfo.Name, PinTypeE.PinIn, Config.UniqInPinID);
                             Config.InPins.Add(newPin);
                         }
@@ -1030,7 +970,6 @@
                     SearchAnalogConstructors();
                 }
             }
-
         }
 
         public void ReInitPins(ScriptClassConstructorControlNode Constr)
@@ -1053,7 +992,6 @@
             }
         }
 
-
         public void ReInitPins(ScriptFunction Func)
         {
             NodeType = NodeTypeE.ClassFunction;
@@ -1087,14 +1025,12 @@
             }
         }
 
-
         private LinkInfo pin_0_link;
         private LinkInfo pin_1_link;
         private LinkInfo pin_2_link;
 
         private List<LinkInfo> Outpin_links;
 
-
         private Node_Pin pin_0
         {
             get
@@ -1102,6 +1038,7 @@
                 return Config.InPins.Find(x => x.PinID == 0);
             }
         }
+
         private Node_Pin pin_1
         {
             get
@@ -1109,6 +1046,7 @@
                 return Config.InPins.Find(x => x.PinID == 1);
             }
         }
+
         private Node_Pin outPin
         {
             get
@@ -1128,10 +1066,9 @@
         [XmlIgnore]
         public bool doNootReinitPins_Parser = false;
 
-
-
         public bool DelegNode_Invoke = false;
         public bool b_AllowDelegNode_Invoke = false;
+
         public void ReinitMathPins(bool parser = false)
         {
             if (parser && doNootReinitPins_Parser)
@@ -1150,17 +1087,18 @@
             pin_2_link = Linking.SourcePinLinkExite(NodeID, 2);
 
             #region generics
+
             if (NodeType == NodeTypeE.Method || NodeType == NodeTypeE.Property)
             {
                 if (Config.InPins.Count > 0 && pin_0 != null)
                 {
-                    if(GenPinsSelector.GenList.Count > 0)//Can switch generic type def.
+                    if (GenPinsSelector.GenList.Count > 0)//Can switch generic type def.
                     {
-                        if(pin_0_link != null)//pin 1 is connected
+                        if (pin_0_link != null)//pin 1 is connected
                         {
                             var thatPin = ConnPin_0;
 
-                            if(thatPin != null && thatPin.type != null)
+                            if (thatPin != null && thatPin.type != null)
                             {
                                 var connectedType = thatPin.type.PType;
 
@@ -1177,24 +1115,23 @@
                                         var genArg = genNames[i];
                                         var genHolder = GenPinsSelector.GenList.Find(x => x.IdentName == genArg.Name);
 
-                                        if(genHolder != null)
+                                        if (genHolder != null)
                                         {
                                             genHolder.Type.SetVarType(connGenTypes[i]);
 
                                             GenPinsSelector.SetFeedbackChange(genHolder);
                                         }
                                     }
-
                                 }
                             }
-
                         }
-                    }                   
+                    }
                 }
             }
+
             #endregion
 
-            if(NodeType == NodeTypeE.ClassEvent || NodeType == NodeTypeE.ClassVariable)
+            if (NodeType == NodeTypeE.ClassEvent || NodeType == NodeTypeE.ClassVariable)
             {
                 if (!IsDeleg(Config.NodeRefType.PType))
                 {
@@ -1203,7 +1140,6 @@
                 }
             }
 
-
             if (NodeType == NodeTypeE.ClassEvent || NodeType == NodeTypeE.ClassVariable)//  || NodeType == NodeTypeE.ClassVariable)
             {
                 b_AllowDelegNode_Invoke = true;
@@ -1219,7 +1155,7 @@
 
                     if (invoke == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Not a delegate.");
+                        if (Options.b_ShowDebug) Debug.Log("Not a delegate.");
                         DelegNode_Invoke = false;
                         return;
                     }
@@ -1227,17 +1163,15 @@
                     var nodeTypeTemp = NodeType;
                     var nodeNameTemp = Config.Name;
 
-                    var NGP = new NodeGenPins(invoke, false, true);
-                    NGP.NodeType = nodeTypeTemp;
-                
+                    var NGP = new NodeGenPins(invoke, false, true)
+                    {
+                        NodeType = nodeTypeTemp
+                    };
+
                     ReInitPins(NGP);
                     b_Inherited = false;
                     Config.Name = nodeNameTemp;
-
-
-                    //return invoke.GetParameters().ToList().Select(x => x.ParameterType).ToArray();
-
-
+                    
                 }
                 else
                 {
@@ -1246,23 +1180,19 @@
                 }
             }
 
-
-            if(!b_AllowDelegNode_Invoke)
+            if (!b_AllowDelegNode_Invoke)
             {
                 DelegNode_Invoke = false;
             }
 
-
             if (NodeType != NodeTypeE.Logic && NodeType != NodeTypeE.Custom)
                 return;
 
-         
-
             Outpin_links = Linking.EndPinLinksExite(NodeID, 0);
 
-            Type AnyNumType = typeof(ValueType);
+            // Type AnyNumType = typeof(ValueType);
             Type AnyType = typeof(AnyType);
-            Type ErrorType = typeof(ErrorTypePin); 
+            Type ErrorType = typeof(ErrorTypePin);
 
             //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
             if (DNodeType == DefNodeType.IsNull)
@@ -1301,7 +1231,7 @@
 
                 return;
             }
-            if(DNodeType == DefNodeType.YieldReturnInstruction)
+            if (DNodeType == DefNodeType.YieldReturnInstruction)
             {
                 if (pin_0_link != null)
                 {
@@ -1309,7 +1239,6 @@
                 }
                 else
                 {
-                   
                 }
             }
             if (DNodeType == DefNodeType.Unary)
@@ -1348,8 +1277,6 @@
                     Operation = "-";
                 }
 
-
-
                 return;
             }
             if (DNodeType == DefNodeType.ConditionalExpr)
@@ -1369,13 +1296,13 @@
                         Config.OutPins[0].SetVarType(typeof(AnyType));
                         Config.InPins[1].SetVarType(typeof(AnyType));
                         Config.InPins[2].SetVarType(typeof(AnyType));
-                    }  
+                    }
                 }
                 else if (pin_1_link != null && pin_2_link == null)
                 {
                     var type = ConnPin_1.type.PType;
 
-                    if(type == typeof(AnyType))
+                    if (type == typeof(AnyType))
                     {
                         if (Outpin_links.Count == 1)
                         {
@@ -1395,8 +1322,8 @@
                     Config.InPins[1].SetVarType(Type);
                     Config.InPins[2].SetVarType(Type);
                 }
-  
-                    return;
+
+                return;
             }
             if (DNodeType == DefNodeType.Using)
             {
@@ -1426,7 +1353,6 @@
                     Config.InPins[1].SetVarType(typeof(AnyType));
                 }
 
-
                 return;
             }
 
@@ -1439,7 +1365,6 @@
 
                 Type connType = null;
 
-
                 if (pin_0_link != null)
                 {
                     connType = ConnPin_0.type.PType;
@@ -1452,7 +1377,7 @@
                     Config.InPins[0].IsDelegate = ConnPin_1.IsDelegate;
                     Config.OutPins[0].IsDelegate = Config.InPins[0].IsDelegate;
 
-                    Config.InPins[1].IsDelegate = Config.InPins[0].IsDelegate;          
+                    Config.InPins[1].IsDelegate = Config.InPins[0].IsDelegate;
                 }
                 else
                 {
@@ -1477,13 +1402,12 @@
                             Config.InPins[1].IsDelegate = false;
                     }
                 }
-                
+
                 Config.InPins[0].SetVarType(connType);
                 Config.OutPins[0].SetVarType(connType);
 
                 //Config.InPins.Add(new Node_Pin(connType, "Value", PinTypeE.PinIn, Config.UniqInPinID));
 
-
                 if (Operation == "++" || Operation == "--")
                 {
                     //ConnectorsIn.Add(new Node_Connector("", ConnectorTypeE.ConnectorIn, UniqInConnectorID));
@@ -1502,13 +1426,12 @@
                     Config.InPins[1].IsDelegate = Config.InPins[0].IsDelegate;
                 }
 
-
                 return;
             }
             if (DNodeType == DefNodeType.TryCatchFinally)
             {
                 //ConnectorsOut.RemoveAll(x => x.ConectorName.StartsWith("Catch"));
-                
+
                 for (int i = 0; i < Config.InPins.Count; i++)
                 {
                     var inPin = Config.InPins[i];
@@ -1555,13 +1478,12 @@
                 Type inType;
                 Type casesType;
 
-
                 if (pin_0_link != null)
                 {
                     casesType = inType = ConnPin_0.type.PType;
 
-                    if(
-                        casesType != typeof(bool) && 
+                    if (
+                        casesType != typeof(bool) &&
                         casesType != typeof(char) &&
                         casesType != typeof(string) &&
                         casesType != typeof(char) &&
@@ -1571,12 +1493,11 @@
                         !casesType.IsEnum
                         )
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Switch expression must be a bool, char, string, integral(int) or enum");
+                        if (Options.b_ShowDebug) Debug.Log("Switch expression must be a bool, char, string, integral(int) or enum");
                         inType = typeof(ValueType);
                         casesType = typeof(UndefinedType);
                         return;
                     }
-
                 }
                 else
                 {
@@ -1584,7 +1505,6 @@
                     casesType = typeof(UndefinedType);
                 }
 
-
                 bool[] caseBrakes = ConnectorsOut.Select(x => x.CaseBreak).ToArray();
 
                 ConnectorsOut = new List<Node_Connector>();
@@ -1595,9 +1515,11 @@
                 {
                     Config.InPins[i].SetVarType(casesType);
                     Config.InPins[i].PinName = "Case " + (i - 1);
-                    var newConn = new Node_Connector(Config.InPins[i].PinName, ConnectorTypeE.ConnectorOut, i - 1);
-                    //Debug.Log("Case: Orig: " + newConn.CaseBreak + " need: " + caseBrakes[i - 1]);
-                    newConn.CaseBreak = caseBrakes[i - 1];
+                    var newConn = new Node_Connector(Config.InPins[i].PinName, ConnectorTypeE.ConnectorOut, i - 1)
+                    {
+                        //Debug.Log("Case: Orig: " + newConn.CaseBreak + " need: " + caseBrakes[i - 1]);
+                        CaseBreak = caseBrakes[i - 1]
+                    };
                     ConnectorsOut.Add(newConn);
                 }
 
@@ -1630,14 +1552,12 @@
 
                 var delegPin = Config.OutPins.Find(x => x.LambdaDelegate);
 
-
                 if (outLinks.Count == 1)
                 {
                     Config.OutPins.RemoveAll(x => !x.LambdaDelegate);
 
                     Type outPinType = CurScript.FindNodeFromID(outLinks[0].NodeID).Config.InPins[outLinks[0].NodeConPinID].type.PType;
 
-
                     delegPin.SetVarType(outPinType);
 
                     if (!IsDeleg(outPinType) || outPinType == typeof(Delegate))
@@ -1652,15 +1572,12 @@
                         return;
                     }
 
-
                     ParameterInfo[] parameters = invoke.GetParameters();
 
-
                     foreach (ParameterInfo pInfo in parameters)
                     {
                         Config.OutPins.Add(new Node_Pin(pInfo.ParameterType, pInfo.Name, PinTypeE.PinOut, Config.UniqOutPinID));
                     }
-
                 }
                 else if (outLinks.Count == 0)
                 {
@@ -1704,7 +1621,6 @@
                     {
                         Config.InPins.RemoveAt(1);
                     }
-
                 }
                 else
                 {
@@ -1714,7 +1630,6 @@
                     }
                 }
 
-
                 return;
             }
             else if (DNodeType == DefNodeType.DelegLambda)// || DNodeType == DefNodeType.ActionDelegLambda
@@ -1745,10 +1660,6 @@
 
                     ParameterInfo[] parameters = invoke.GetParameters();
 
-
-
-
-
                     foreach (ParameterInfo pInfo in parameters)
                     {
                         Config.OutPins.Add(new Node_Pin(pInfo.ParameterType, pInfo.Name, PinTypeE.PinOut, Config.UniqOutPinID));
@@ -1771,7 +1682,6 @@
             }
             else if (DNodeType == DefNodeType.ArrayElem)
             {
-
                 var valuePin = Config.InPins.Last();
 
                 if (pin_0_link != null)
@@ -1780,12 +1690,10 @@
 
                     //Config.InPins = new List<Node_Pin>();
 
-
                     Config.InPins[0].PinName = RenameTypeVarName(inConnectedType, true);
 
                     //Config.InPins.Add(new Node_Pin(typeof(ArrayType), RenameTypeVarName(inConnectedType, true), PinTypeE.PinIn, Config.UniqInPinID));
 
-
                     if (inConnectedType.IsArray)
                     {
                         var arrayRanks = GetTypeArrayRanks(inConnectedType);
@@ -1798,20 +1706,20 @@
                             for (int i = getArrayElemparamsCount; i >= 0; i--)
                             {
                                 var newPin = new Node_Pin(typeof(int), "index: " + i, PinTypeE.PinIn,
-                                    Config.UniqInPinID);
-                                newPin.IndexArrayParamPin = true;
-                                Config.InPins.Insert(1, newPin);//Config.InPins.Count - 
+                                    Config.UniqInPinID)
+                                {
+                                    IndexArrayParamPin = true
+                                };
+                                Config.InPins.Insert(1, newPin);//Config.InPins.Count -
                             }
                         }
 
-
                         var ranksCut = arrayRanks;
                         ranksCut.RemoveAt(0);
 
                         var valueType = MakeTypeArray(inConnectedType, ranksCut);
                         OutPin_SetType(valueType);
 
-
                         valuePin.SetVarType(valueType);
 
                         //Config.InPins.Add(new Node_Pin(valueType, "Value", PinTypeE.PinIn, Config.UniqInPinID));
@@ -1881,6 +1789,7 @@
                     }
 
                     #region generic
+
                     else if (inConnectedType.IsGenericType)
                     {
                         Type[] genArgs = inConnectedType.GetGenericArguments();
@@ -1903,7 +1812,9 @@
                             if(Options.b_ShowDebug)Debug.Log("Generic type (elements) is not defined!");
                         }
                     }
+
                     #endregion generic
+
                     else
                     {
                         if(Options.b_ShowDebug)Debug.Log("Array type is not defined!");
@@ -1928,30 +1839,36 @@
                     {
                         if (Config.OutPins.Count != 2)
                         {
-                            Config.OutPins = new List<Node_Pin>();
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID));
+                            Config.OutPins = new List<Node_Pin>
+                            {
+                                new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID)
+                            };
                         }
                     }
                     else if (inonnectedType == typeof(Vector3))
                     {
                         if (Config.OutPins.Count != 3)
                         {
-                            Config.OutPins = new List<Node_Pin>();
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "z", PinTypeE.PinOut, Config.UniqOutPinID));
+                            Config.OutPins = new List<Node_Pin>
+                            {
+                                new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "z", PinTypeE.PinOut, Config.UniqOutPinID)
+                            };
                         }
                     }
                     else if (inonnectedType == typeof(Vector4))
                     {
                         if (Config.OutPins.Count != 4)
                         {
-                            Config.OutPins = new List<Node_Pin>();
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "z", PinTypeE.PinOut, Config.UniqOutPinID));
-                            Config.OutPins.Add(new Node_Pin(typeof(float), "w", PinTypeE.PinOut, Config.UniqOutPinID));
+                            Config.OutPins = new List<Node_Pin>
+                            {
+                                new Node_Pin(typeof(float), "x", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "y", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "z", PinTypeE.PinOut, Config.UniqOutPinID),
+                                new Node_Pin(typeof(float), "w", PinTypeE.PinOut, Config.UniqOutPinID)
+                            };
                         }
                     }
                 }
@@ -1967,7 +1884,6 @@
                     Type arrayConnectedType = ConnOutPin_FirstLink.type.PType;
                     OutPin_SetType(arrayConnectedType);
 
-
                     Type aElemType;
 
                     if (arrayConnectedType.IsGenericType || arrayConnectedType.IsGenericTypeDefinition)
@@ -1980,21 +1896,18 @@
                             if (Options.b_ShowDebug) Debug.Log("Multi argument types is not allowed now. " + arrayConnectedType);
                             return;
                         }
-
                     }
                     else
                     {
                         aElemType = arrayConnectedType.GetElementType();
                     }
 
-
-
                     if (aElemType != null)
                     {
                         for (int i = 0; i < Config.InPins.Count; i++)
                         {
                             Node_Pin newPin = Config.InPins[i];
-                            if(newPin.type.PType == null || newPin.type.PType == typeof(AnyType))
+                            if (newPin.type.PType == null || newPin.type.PType == typeof(AnyType))
                                 newPin.SetVarType(aElemType);
                             newPin.PinName = "Element: " + i;
                         }
@@ -2022,11 +1935,9 @@
                                 newPin.SetVarType(inonnectedType);
                             newPin.PinName = "Element: " + i;
                         }
-
                     }
                     else
                         if (Options.b_ShowDebug) Debug.Log("Can't make array type: " + inonnectedType);
-
                 }
                 */
                 else if (Outpin_links.Count == 0)
@@ -2108,7 +2019,7 @@
                             Debug.Log("Nottorus: Enumerator type of generic type is not defined!");
                         }
                     }
-                    else if(inonnectedType == typeof(Transform))
+                    else if (inonnectedType == typeof(Transform))
                     {
                         aElemType = typeof(Transform);
                     }
@@ -2121,20 +2032,14 @@
                         //.Where(t => t.GetGenericTypeDefinition() == typeof(IEnumerable));
                         //.Select(t => t.GetGenericArguments()[0]);
 
-
                         var enumer = inonnectedType.GetInterface("IEnumerable");
 
-
                         Debug.Log(enumer);
 
-
-
                         Debug.Log("Elem type: " + aElemType);
                         */
                     }
 
-                 
-
                     OutPin_SetType(aElemType);
                     Config.OutPins[0].PinName = "Value";
                 }
@@ -2147,7 +2052,6 @@
             }
 
             //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-
             else if (DNodeType == DefNodeType.This)
             {
                 InitConstructorNodeByClassName(CurClass.Config.Name, false);
@@ -2176,8 +2080,6 @@
 
                 //InitConstructorNodeByClassName(CurClass.Config.Name, false);
 
-
-
                 //Config.LabelColor = new BPColor(128, 128, 128, 128);
 
                 NodeType = NodeTypeE.Logic;
@@ -2185,7 +2087,6 @@
             }
             else if (DNodeType == DefNodeType.Is)
             {
-
             }
             else if (DNodeType == DefNodeType.AsT)
             {
@@ -2204,17 +2105,17 @@
 
                             if (Outpin_links.Count == 1)
                             {
-
-                                As_TypesVariants = new List<Type>();
-                                As_TypesVariants.Add(typeof(As_Out_Pin));
-                                As_TypesVariants.Add(ConnOutPin_FirstLink.type.PType);
+                                As_TypesVariants = new List<Type>
+                                {
+                                    typeof(As_Out_Pin),
+                                    ConnOutPin_FirstLink.type.PType
+                                };
 
                                 OutPin_SetType(ConnOutPin_FirstLink.type.PType);
                                 Config.NodeRefType.PType = ConnOutPin_FirstLink.type.PType;
                                 return;
                             }
 
-
                             SearchAS_TypeVariants(InPinType);
 
                             As_TypesVariants.Insert(0, typeof(As_Out_Pin));
@@ -2226,8 +2127,6 @@
                                 return;
                             }
 
-
-
                             Type newType = Config.NodeRefType.PType;
                             if (newType == null || !As_TypesVariants.Contains(newType))
                             {
@@ -2242,7 +2141,6 @@
                                 return;
                             }
 
-
                             //if (As_TypesVariants.Count > 0){
                             /*
                             }
@@ -2259,8 +2157,10 @@
                     else if (Outpin_links.Count == 1)
                     {
                         OutPin_SetType(ConnOutPin_FirstLink.type.PType);
-                        As_TypesVariants = new List<Type>();
-                        As_TypesVariants.Add(ConnOutPin_FirstLink.type.PType);
+                        As_TypesVariants = new List<Type>
+                        {
+                            ConnOutPin_FirstLink.type.PType
+                        };
                     }
                     else
                     {
@@ -2277,7 +2177,6 @@
             }
             else if (DNodeType == DefNodeType.Math)
             {
-
                 if (Operation == "<" || Operation == ">" || Operation == "<=" || Operation == ">=")
                 {
                     OutPin_SetType(typeof(bool));
@@ -2316,16 +2215,8 @@
                         OutPin_SetType(typeof(bool));
                         return;
                     }
-                 
                 }
 
-
-
-
-
-
-
-
                 if (pin_0_link == null && pin_1_link == null)
                 {
                     if (Outpin_links.Count == 1)
@@ -2395,7 +2286,6 @@
                     return;
                 }
 
-
                 if (pin_0_link != null && pin_1_link != null)
                 {
                     if (Pin0_isType(typeof(string)))
@@ -2416,7 +2306,6 @@
                         return;
                     }
 
-
                     /*
                     if (Pin0_isType(typeof(Vector3)) && Pin1_isType(typeof(float)))
                     {
@@ -2454,7 +2343,6 @@
                     }
                     */
 
-
                     bool hasVector = AnyPinTypeIs(typeof(Vector2)) || AnyPinTypeIs(typeof(Vector3)) || AnyPinTypeIs(typeof(Vector4));
 
                     if (AnyPinTypeIs(typeof(float)) && hasVector)
@@ -2520,7 +2408,6 @@
                         return;
                     }
 
-
                     if (AnyPinTypeIs(typeof(uint)) && (AnyPinTypeIs(typeof(short)) || AnyPinTypeIs(typeof(int))))
                     {
                         //if(Options.b_ShowDebug)Debug.Log("6");
@@ -2557,7 +2444,6 @@
                         return;
                     }
 
-
                     if (Pin0_isType(typeof(int)) && Pin1_isType(typeof(int)))
                     {
                         //if(Options.b_ShowDebug)Debug.Log("10");
@@ -2567,8 +2453,6 @@
                         return;
                     }
 
-
-
                     Pin_0_SetType(ConnPin_0.type.PType);
                     Pin_1_SetType(ConnPin_1.type.PType);
                     OutPin_SetType(ConnPin_0.type.PType);
@@ -2593,9 +2477,11 @@
                 {
                     Config.InPins.RemoveAll(x => x.IndexArrayParamPin);
 
-                    var newPin = new Node_Pin(typeof(int), "index", PinTypeE.PinIn, Config.UniqInPinID);
-                    //RenameTypeVarName(typeof(int))
-                    newPin.IndexArrayParamPin = true;
+                    var newPin = new Node_Pin(typeof(int), "index", PinTypeE.PinIn, Config.UniqInPinID)
+                    {
+                        //RenameTypeVarName(typeof(int))
+                        IndexArrayParamPin = true
+                    };
                     Config.InPins.Insert(Config.InPins.Count - 1, newPin);
                 }
 
@@ -2608,10 +2494,12 @@
                 if (Config.InPins.Count != 3)
                 {
                     Config.InPins.RemoveAll(x => x.IndexArrayParamPin);
-                    var newPin = new Node_Pin(genArgs[0], "index", PinTypeE.PinIn, Config.UniqInPinID);
-                    //RenameTypeVarName(genArgs[0])
+                    var newPin = new Node_Pin(genArgs[0], "index", PinTypeE.PinIn, Config.UniqInPinID)
+                    {
+                        //RenameTypeVarName(genArgs[0])
 
-                    newPin.IndexArrayParamPin = true;
+                        IndexArrayParamPin = true
+                    };
                     Config.InPins.Insert(Config.InPins.Count - 1, newPin);
                 }
                 valuePin.SetVarType(genArgs[1]);
@@ -2630,22 +2518,22 @@
             }
             As_TypesVariants.AddRange(VariantType.GetInterfaces());
         }
+
         private bool AnyPinTypeIs(Type type)
         {
             return ConnPin_0.type.PType == type || ConnPin_1.type.PType == type;
         }
+
         private bool Pin0_isType(Type type)
         {
             return ConnPin_0.type.PType == type;
         }
+
         private bool Pin1_isType(Type type)
         {
             return ConnPin_1.type.PType == type;
         }
 
-
-
-
         [XmlIgnore]
         public Node_Pin ConnPin_0
         {
@@ -2653,16 +2541,17 @@
             {
                 var node = CurScript.FindNodeFromID(pin_0_link.LNodeID);
 
-                if(pin_0_link.LNodeConPinID < node.Config.OutPins.Count && pin_0_link != null)
+                if (pin_0_link.LNodeConPinID < node.Config.OutPins.Count && pin_0_link != null)
                     return node.Config.OutPins.Find(x => x.PinID == pin_0_link.LNodeConPinID);
                 else
                 {
                     return null;
-                    if (Options.b_ShowDebug)Debug.Log("Can't get out pin : " + pin_0_link.LNodeConPinID + " from nodeId: " + node.NodeID + " , NodeName: " + node.Config.Name);
-                    return node.Config.OutPins.First();
+                    //if (Options.b_ShowDebug)Debug.Log("Can't get out pin : " + pin_0_link.LNodeConPinID + " from nodeId: " + node.NodeID + " , NodeName: " + node.Config.Name);
+                    //return node.Config.OutPins.First();
                 }
             }
         }
+
         [XmlIgnore]
         public Node_Pin ConnPin_1
         {
@@ -2686,19 +2575,19 @@
             {
                 var node = CurScript.FindNodeFromID(Outpin_links[0].NodeID);
 
-                if(node != null)
+                if (node != null)
                 {
                     var pin = node.Config.InPins.Find(x => x.PinID == Outpin_links[0].NodeConPinID);
                     if (pin == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("ConnOutPin_FirstLink: inPin: " + Outpin_links[0].NodeConPinID + " in node: " + node.NodeID + " is not exist , NodeName: " + node.Config.Name);
+                        if (Options.b_ShowDebug) Debug.Log("ConnOutPin_FirstLink: inPin: " + Outpin_links[0].NodeConPinID + " in node: " + node.NodeID + " is not exist , NodeName: " + node.Config.Name);
                         return new Node_Pin();
                     }
                     return pin;
-                }      
+                }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find linked node with id: " + Outpin_links[0].NodeID);
+                    if (Options.b_ShowDebug) Debug.Log("Can't find linked node with id: " + Outpin_links[0].NodeID);
                     return new Node_Pin();
                 }
             }
@@ -2748,17 +2637,13 @@
                 {
                     //var classes = CurScript.GetAllClasses();
 
-
                     _classOwner = CurScript.GetAllClasses().Find(x => x.GetAllNodes().Contains(this));
 
                     /*
                     foreach (var Class in classes)
                     {
-
                         var classNodes = Class.GetAllNodes();
 
-
-
                         //if (classNodes.Contains(this))
                         if(classNodes.Any(x => x.NodeID == NodeID))
                         {
@@ -2768,7 +2653,6 @@
                     }
                 }
                 */
-
                 }
                 return _classOwner;
             }
@@ -2782,10 +2666,9 @@
             if (ReferenceID == -1)
                 return;
 
-
             if (varConfig_Optimize == null)
             {
-                if (NodeType == NodeTypeE.ClassPropertyEntry_Get || NodeType == NodeTypeE.ClassPropertyExit_Get 
+                if (NodeType == NodeTypeE.ClassPropertyEntry_Get || NodeType == NodeTypeE.ClassPropertyExit_Get
                     || NodeType == NodeTypeE.ClassPropertyEntry_Set || NodeType == NodeTypeE.ClassPropertyExit_Set)
                 {
                     ScriptProperty refConfig = ClassOwner.ScriptProperties.Find(x => x.PropertyID == ReferenceID);
@@ -2831,7 +2714,6 @@
                     varConfig_Optimize = refConfig.Config;
                     b_varConfig_Inverted = false;
                 }
-
                 else if (NodeType == NodeTypeE.ClassVariable)
                 {
                     ScriptClassVariable refConfig = ClassOwner.ClassVariables.Find(x => x.Obj_ID == ReferenceID);
@@ -2846,10 +2728,9 @@
                     BaseScriptObject nodeDrawbl = CurScript.FindNodeDrawbl(this);
                     ScriptLocalVariable refLocalVar = null; //CurScript.FindLocalVariableFromID(ReferenceID);
 
-            
-                    if(nodeDrawbl != null)
+                    if (nodeDrawbl != null)
                     {
-                        refLocalVar = nodeDrawbl.LocalVariables.Find(x => x.Obj_ID == ReferenceID);     
+                        refLocalVar = nodeDrawbl.LocalVariables.Find(x => x.Obj_ID == ReferenceID);
                     }
 
                     if (refLocalVar == null)// || refLocalVar.Config.Name != Config.Name)
@@ -2909,7 +2790,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't update config: " + Config.Name + " id: " + NodeID);
+                if (Options.b_ShowDebug) Debug.Log("Can't update config: " + Config.Name + " id: " + NodeID);
             }
         }
 
@@ -2921,7 +2802,6 @@
             ReferenceID = -1;
         }
 
-
         public void UpdateConfigInverted(NodeConfig VarConfig)
         {
             Config.Name = VarConfig.Name;
@@ -2930,17 +2810,15 @@
             Config.Icon = VarConfig.Icon;
             //Config.LabelColor = VarConfig.LabelColor;
 
-
             List<Node_Pin> newOutPinsList = new List<Node_Pin>();
 
-
             for (int i = 0; i < VarConfig.InPins.Count; i++)
             {
                 Node_Pin realPin = VarConfig.InPins[i];
                 Node_Pin newPin = Config.OutPins.Find(x => x.PinID == realPin.PinID);
 
-              //  if (realPin.LinkDelegVoid)
-             //       continue; // no sence
+                //  if (realPin.LinkDelegVoid)
+                //       continue; // no sence
 
                 if (newPin == null)
                 {
@@ -2961,7 +2839,6 @@
                 newPin.PinID = realPin.PinID;
                 newPin.PinName = realPin.PinName;
 
-
                 newOutPinsList.Add(newPin);
             }
             newOutPinsList.AddRange(Config.OutPins.FindAll(x => x.TempVarConstrPin));
@@ -3005,7 +2882,7 @@
 
                 if (outP != null && IsEnumer(outP.type.PType))
                 {
-                    if(ConnectorsOut.Count == 0)
+                    if (ConnectorsOut.Count == 0)
                         ConnectorsOut.Add(new Node_Connector("Next", ConnectorTypeE.ConnectorOut, 0));
                 }
                 else if (ConnectorsOut.Count != 0)
@@ -3023,13 +2900,11 @@
             Config.Icon = VarConfig.Icon;
             //Config.LabelColor = VarConfig.LabelColor;
 
-
             if (DelegNode_Invoke)
             {
                 return;
             }
 
-
             List<Node_Pin> newInPinsList = new List<Node_Pin>();
 
             int startPin = 0;
@@ -3037,7 +2912,6 @@
             if (b_Inherited)
                 startPin = 1;
 
-
             for (int i = startPin; i < VarConfig.InPins.Count; i++)
             {
                 Node_Pin realPin = VarConfig.InPins[i];
@@ -3061,7 +2935,6 @@
                 newPin.PinID = realPin.PinID;
                 newPin.PinName = realPin.PinName;
 
-
                 newInPinsList.Add(newPin);
             }
             newInPinsList.AddRange(Config.InPins.FindAll(x => x.TempVarConstrPin));
@@ -3073,8 +2946,6 @@
                 Node_Pin realPin = VarConfig.OutPins[i];
                 Node_Pin newPin = Config.OutPins.Find(x => x.PinID == realPin.PinID);
 
-
-
                 if (newPin == null)
                 {
                     newPin = new Node_Pin(realPin.type.PType, realPin.PinName, PinTypeE.PinOut, realPin.PinID);
@@ -3097,7 +2968,7 @@
             }
             Config.OutPins = newOutPinsList;
 
-            if(NodeType == NodeTypeE.ClassVariable)
+            if (NodeType == NodeTypeE.ClassVariable)
             {
                 if (Config.InPins.Count > 0 && ConnectorsIn.Count == 0)
                 {
@@ -3117,15 +2988,13 @@
 
         /////////////////////////////////////////////////////////////////////////////////////
 
-
         [XmlIgnore]
         public List<ConstructorInfo> Analog_Constructors = new List<ConstructorInfo>();
+
         private List<MethodInfo> Analog_Methods = null;
 
         private int Analog_SwitchCount = 0;
 
-
-
         public MethodInfo CurrentMethod()
         {
             if (Analog_Methods == null)
@@ -3133,7 +3002,7 @@
 
             if (Analog_Methods.Count <= Analog_SwitchID)// Analog_SwitchID)
             {
-                if(Options.b_ShowDebug)Debug.Log("Try get out method: " + Analog_SwitchID + " Node: " + NodeID + " Analog_Methods.Count: " + Analog_Methods.Count);
+                if (Options.b_ShowDebug) Debug.Log("Try get out method: " + Analog_SwitchID + " Node: " + NodeID + " Analog_Methods.Count: " + Analog_Methods.Count);
                 return null;
             }
 
@@ -3155,7 +3024,7 @@
             }
             set
             {
-                Analog_SwitchID = Config.NodeRefType.PType.GetConstructors().ToList().IndexOf(value);
+                Analog_SwitchID = Array.IndexOf(Config.NodeRefType.PType.GetConstructors(), value);
             }
         }
 
@@ -3173,11 +3042,6 @@
 
             Analog_Constructors = new List<ConstructorInfo>(Config.NodeRefType.PType.GetConstructors(flags));
 
-            
-
-
-
-
             Config.Icon = "Icons/Types/Icon_Constructor";
 
             if (Analog_Constructors.Count > 1)
@@ -3210,7 +3074,7 @@
         {
             string message = "Can't find this Type for node. Seems this type (or script) was removed.";
             BConsole.EditorLog(message, 2, NodeID);
-            if(Options.b_ShowDebug)Debug.Log(message);
+            if (Options.b_ShowDebug) Debug.Log(message);
 
             ErrorNodeType = 2;
             ErrorNodeMessage = message;
@@ -3230,7 +3094,6 @@
 
             Analog_Methods = new List<MethodInfo>(Config.NodeRefType.PType.GetMethods(flags).Where(x => x.Name == Config.Name));
 
-
             Config.Icon = "Icons/Types/Icon_Method";
 
             if (Analog_Methods.Count > 1)
@@ -3241,7 +3104,6 @@
             {
                 Analog_Methods = new List<MethodInfo>(Config.NodeRefType.PType.GetMethods(flags).Where(x => x.Name == "get_" + Config.Name || x.Name == "set_" + Config.Name));
 
-
                 if (Analog_Methods.Count > 1)
                 {
                     b_CanSwitch = true;
@@ -3250,12 +3112,11 @@
                 {
                     Analog_SwitchCount = 0;
                     ReflectionMethodError(2);
-                    if(Options.b_ShowDebug)Debug.Log("Error2");
+                    if (Options.b_ShowDebug) Debug.Log("Error2");
                     return;
                 }
             }
 
-
             /*
             if(Config.Name == "AddListener")//Debug
             {
@@ -3269,7 +3130,6 @@
                     {
                         Debug.Log(par.ParameterType.Name);
                     }
-               
                 }
             }
             */
@@ -3277,18 +3137,15 @@
             Analog_SwitchCount = Analog_Methods.Count;
         }
 
-
         /*
 
         List<Type> ParameterTypes = new List<Type>();
 
-
         foreach(Node_Pin pin in Config.InPins)
         {
            ParameterTypes.Add(pin.type.PType);
         }
 
-
         if(isStatic)
         //    ParameterTypes = Config.InPins.Select(x => x.type.PType).ToList();
         // else
@@ -3298,9 +3155,6 @@
            ParameterTypes.Remove(ParameterTypes.First());
         }
 
-
-
-
         if(Options.b_ShowDebug)Debug.Log(Config.InPins[0].type.PType);
 
         Type[] tpCheck = ParameterTypes.ToArray();
@@ -3310,7 +3164,6 @@
         if (tpCheck == null)
            tpCheck = new Type[0];
 
-
         if (Config.NodeRefType.PType.GetMethod(Config.Name, tpCheck) == null)
         {
            ReflectionMethodError();
@@ -3322,19 +3175,17 @@
         }
         */
 
-             
         private void ReflectionMethodError(int tryN)
         {
             string message = "Can't find Method " + Config.Name + " for type " + Config.NodeRefType.PType + ". Seems referenced function (or script) was removed.";
 
             BConsole.DrawablLog(message, 2, NodeID, CurScript.FindNodeDrawbl(this));
-            if(Options.b_ShowDebug)Debug.Log(message);
+            if (Options.b_ShowDebug) Debug.Log(message);
 
             ErrorNodeType = 2;
             ErrorNodeMessage = message;
         }
 
-
         private void SearchCheckProperty(bool ReinitNode)
         {
             if (GenPinsSelector.GenList.Count > 0)
@@ -3347,9 +3198,8 @@
             {
                 PropertyReflectionError();
                 return;
-            } 
+            }
 
-         
             //PropertyInfo pInf = Config.NodeRefType.PType.GetProperty(Config.Name, flags);//Config.NodeRefType2_prop.PType, new Type[] { typeof(int)}
 
             PropertyInfo pInf = GetPropertyByParams(Config.NodeRefType2_propOwner.PType, Config.Name, Config.NodeRefType.PType, Config.NodeRefType3_Indexer.Select(x => x.PType).ToArray());
@@ -3368,7 +3218,6 @@
                 ReInitPins(pInf);
             }
 
-
             ReflectionPropertyCheckOk = pInf != null;
 
             if (!ReflectionPropertyCheckOk)
@@ -3376,6 +3225,7 @@
                 PropertyReflectionError();
             }
         }
+
         private void PropertyReflectionError()
         {
             Analog_SwitchCount = 0;
@@ -3387,8 +3237,8 @@
             ErrorNodeType = 2;
             ErrorNodeMessage = message;
         }
-        private bool ReflectionPropertyCheckOk = false;
 
+        private bool ReflectionPropertyCheckOk = false;
 
         private void SearchCheckField(bool ReinitNode)
         {
@@ -3413,7 +3263,6 @@
                 ReInitPins(fInf);
             }
 
-
             ReflectionCkeckFieldOk = fInf != null;
 
             if (!ReflectionCkeckFieldOk)
@@ -3422,9 +3271,6 @@
             }
         }
 
-
-
-
         private void FieldReflectionError()
         {
             string message = "Can't find Field (variable) " + Config.Name + " for node. Seems referenced variable (or script) was removed.";
@@ -3436,9 +3282,8 @@
             ErrorNodeType = 2;
             ErrorNodeMessage = message;
         }
-        private bool ReflectionCkeckFieldOk = false;
-
 
+        private bool ReflectionCkeckFieldOk = false;
 
         private void SearchCheckEvent(bool ReinitNode)
         {
@@ -3463,7 +3308,6 @@
                 ReInitPins(fInf);
             }
 
-
             ReflectionCkeckEventOk = fInf != null;
 
             if (!ReflectionCkeckEventOk)
@@ -3483,10 +3327,8 @@
             ErrorNodeType = 2;
             ErrorNodeMessage = message;
         }
-        private bool ReflectionCkeckEventOk = false;
-
-
 
+        private bool ReflectionCkeckEventOk = false;
 
         private bool b_CanSwitch = false;
 
@@ -3531,7 +3373,7 @@
                 ReInitPins(newDoc);
                 LoadDoc(newDoc);
             }
-            else if(NodeType == NodeTypeE.Custom && (DNodeType == DefNodeType.ExecBConstr || DNodeType == DefNodeType.ExeThisBConstr))
+            else if (NodeType == NodeTypeE.Custom && (DNodeType == DefNodeType.ExecBConstr || DNodeType == DefNodeType.ExeThisBConstr))
             {
                 if (Analog_SwitchID < 0)
                     Analog_SwitchID = (short)(Analog_Constructors.Count - 1);
@@ -3564,6 +3406,7 @@
                 return TestID;
             }
         }
+
         public int UniqOutConnectorID
         {
             get
@@ -3585,15 +3428,16 @@
 
         [XmlIgnore]
         public float Width = 200;
+
         [XmlIgnore]
         public float Height = 100;
 
-
         public float HeightLerp = 20;
         public float WidthLerp = 20;
 
         private Texture Icon;
         private string iconOptim = "";
+
         private Texture GetIconTex()
         {
             if (Icon == null || Config.Icon != iconOptim)
@@ -3601,5 +3445,4 @@
             return Icon;
         }
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_NodeConfig.cs Editor/m_NodeConfig.cs
--- .Editor/m_NodeConfig.cs	2018-06-30 08:59:18.552627600 +0700
+++ Editor/m_NodeConfig.cs	2018-06-30 09:02:03.850520000 +0700
@@ -1,18 +1,15 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-using System.IO;
-using System.Reflection;
-using System.Linq;
+﻿using System.Collections.Generic;
 using System.Xml.Serialization;
-using System.Collections;
-using System;
+using UnityEditor;
 
 public partial class Nottorus : EditorWindow
 {
     public class NodeConfig
     {
-        public NodeConfig() { }
+        public NodeConfig()
+        {
+        }
+
         public NodeConfig(NodeConfig other)
         {
             if (other.NodeRefType != null)//&& other.NodeRefType.PType != null
@@ -24,7 +21,6 @@
             NodeRefType3_Indexer = new List<BType>();
             if (other.NodeRefType3_Indexer != null && other.NodeRefType3_Indexer.Count > 0)
             {
-              
                 foreach (var ind in other.NodeRefType3_Indexer)
                     NodeRefType3_Indexer.Add(new BType(ind));
             }
@@ -33,7 +29,6 @@
             //LabelColor = new BPColor(other.LabelColor);
             Name = other.Name;
 
-
             foreach (Node_Pin pin in other.InPins)
                 InPins.Add(new Node_Pin(pin));
 
@@ -69,8 +64,6 @@
             }
         }
 
-
-
         public BType NodeRefType { get; set; }
         public BType NodeRefType2_propOwner { get; set; }
         public List<BType> NodeRefType3_Indexer { get; set; }
@@ -96,6 +89,7 @@
                 return TestID;
             }
         }
+
         [XmlIgnore]
         public int UniqOutPinID
         {
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Node_Connector.cs Editor/m_Node_Connector.cs
--- .Editor/m_Node_Connector.cs	2018-06-30 08:59:18.572631500 +0700
+++ Editor/m_Node_Connector.cs	2018-06-30 09:02:03.854520100 +0700
@@ -1,12 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
 public partial class Nottorus : EditorWindow
 {
     public class Node_Connector
@@ -17,20 +12,26 @@
 
         [XmlIgnore]
         public float PosX = 0;
+
         [XmlIgnore]
         public float PosY = 0;
+
         [XmlIgnore]
         public bool Connected = false;
 
         public bool CaseBreak = false;
 
-        public Node_Connector() { }
+        public Node_Connector()
+        {
+        }
+
         public Node_Connector(string ConectorName, ConnectorTypeE ConnectorType, int ConnectorID)
         {
             this.ConnectorID = ConnectorID;
             this.ConnectorType = ConnectorType;
             this.ConectorName = ConectorName;
         }
+
         public Node_Connector(Node_Connector otherConnector)
         {
             ConectorName = otherConnector.ConectorName;
@@ -38,15 +39,14 @@
             ConnectorType = otherConnector.ConnectorType;
         }
 
-
         public void DrawConnector(Node ownerNode, ref float ConnectorsPosY, ref float ConnectorsWidth)
         {
             Rect nodePinRect;
 
             if (ConnectorType == ConnectorTypeE.ConnectorIn)
-                nodePinRect = CreateRect(ownerNode.NodeRect.x + 5, ownerNode.NodeRect.y + ConnectorsPosY, 18, 18);
+                nodePinRect = new Rect(ownerNode.NodeRect.x + 5, ownerNode.NodeRect.y + ConnectorsPosY, 18, 18);
             else
-                nodePinRect = CreateRect(ownerNode.NodeRect.x + ownerNode.NodeRect.width - 20, ownerNode.NodeRect.y + ConnectorsPosY, 18, 18);
+                nodePinRect = new Rect(ownerNode.NodeRect.x + ownerNode.NodeRect.width - 20, ownerNode.NodeRect.y + ConnectorsPosY, 18, 18);
 
             bool hover = nodePinRect.Contains(Event.current.mousePosition);
 
@@ -59,29 +59,23 @@
 
             Rect nodeLabelRect;
 
-
             if (ConnectorType == ConnectorTypeE.ConnectorIn)
-                nodeLabelRect = CreateRect(ownerNode.NodeRect.x + 25, ownerNode.NodeRect.y + ConnectorsPosY + 2, CalcStringPixelsX(ConectorName, Res.NodePinLabel) + 5, 15);
+                nodeLabelRect = new Rect(ownerNode.NodeRect.x + 25, ownerNode.NodeRect.y + ConnectorsPosY + 2, CalcStringPixelsX(ConectorName, Res.NodePinLabel) + 5, 15);
             else
             {
-
                 float labelPixelsOffset = CalcStringPixelsX(ConectorName, Res.NodePinLabel);
 
-                nodeLabelRect = CreateRect(ownerNode.NodeRect.x + ownerNode.NodeRect.width - labelPixelsOffset - 25, ownerNode.NodeRect.y + ConnectorsPosY + 2, 15, 100);
+                nodeLabelRect = new Rect(ownerNode.NodeRect.x + ownerNode.NodeRect.width - labelPixelsOffset - 25, ownerNode.NodeRect.y + ConnectorsPosY + 2, 15, 100);
             }
 
-
             GUI.color = Color.white;
             GUI.Label(nodeLabelRect, ConectorName, Res.NodePinLabel);
 
-
-            if(ConnectorType == ConnectorTypeE.ConnectorIn)
+            if (ConnectorType == ConnectorTypeE.ConnectorIn)
                 ConnectorsWidth = Mathf.Max(ConnectorsWidth, CalcStringPixelsX(ConectorName, Res.NodePinLabel) + 25);
             else
                 ConnectorsWidth = Mathf.Max(ConnectorsWidth, CalcStringPixelsX(ConectorName, Res.NodePinLabel) + 25);
 
-
-
             if (ConnectorType == ConnectorTypeE.ConnectorIn)
                 PosX = 5;
             else
@@ -89,10 +83,8 @@
 
             PosY = ConnectorsPosY;
 
-
             bool hide = Linking.b_PinLinking || Linking.b_ConnLinking && Linking.NodeConnector != this && !Linking.ConnectorsCanBeLinked(ownerNode.NodeID, this, Linking.NodeID, Linking.NodeConnector, false);
 
-
             if (hide)
             {
                 var color = GUI.color;
@@ -100,14 +92,11 @@
                 GUI.color = color;
             }
 
-
-
             GUI.DrawTexture(nodePinRect, ConnectorTex);
             GUI.color = Color.white;
 
             ConnectorsPosY += 20;
 
-
             if (hover)
             {
                 if (_RMB_Up)
@@ -135,7 +124,6 @@
                             Linking.StartDragConnectorLinking(ownerNode, conn);
                         };
                     }
-                   
                 }
 
                 if (!hide && DragScriptObj)
@@ -173,13 +161,10 @@
                         Linking.StopLinking();
                     }
                 }
-
             }
         }
     }
 
-
-
     public enum ConnectorTypeE
     {
         Undefined,
@@ -187,5 +172,3 @@
         ConnectorOut
     }
 }
-
-
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Node_Draw.cs Editor/m_Node_Draw.cs
--- .Editor/m_Node_Draw.cs	2018-06-30 08:59:18.575632000 +0700
+++ Editor/m_Node_Draw.cs	2018-06-30 09:02:03.855519700 +0700
@@ -1,12 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System.IO;
-using System.Reflection;
 using System.Linq;
 using System.Xml.Serialization;
-using System.Collections;
-using System;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -27,7 +24,7 @@
             {
                 Type vNodeType = null;
 
-                if(Config.InPins.Count > 0)
+                if (Config.InPins.Count > 0)
                     vNodeType = Config.InPins[0].type.PType;
                 else if (Config.OutPins.Count > 0)
                     vNodeType = Config.OutPins[0].type.PType;
@@ -39,20 +36,13 @@
 
                 LabelColor = GetColorByType(LabelColorVarNodeCheck);
 
-                
                 float val = (LabelColor.r + LabelColor.g + LabelColor.b) / 3;
 
                 LabelColor.r *= val;
                 LabelColor.g *= val;
                 LabelColor.b *= val;
 
-                //LabelColor.r = LabelColor.r > val ? val : LabelColor.r;
-                //LabelColor.g = LabelColor.g > val ? val : LabelColor.g;
-                //LabelColor.b = LabelColor.b > val ? val : LabelColor.b;
-
-
                 b_ColorInitialized = false;
-                
             }
             else
             {
@@ -66,24 +56,30 @@
             return LabelColor;
         }
 
-
         private Node execCEntryNode = null;
         public bool isVaribleNode;
+
         public void DrawNode(Vector2 drawOffs)
         {
+
+            var painting = ev.type == EventType.Repaint;
+
             if (DNodeType == DefNodeType.ExecBConstr || DNodeType == DefNodeType.ExeThisBConstr)
             {
-                if(execCEntryNode == null)
+                if (execCEntryNode == null)
                 {
                     execCEntryNode = CurDrawable.Nodes.Find(x => x.NodeType == NodeTypeE.ConstructorEntry);
                 }
                 PosX = execCEntryNode.PosX + execCEntryNode.Width + 100;
                 PosY = execCEntryNode.PosY;
 
-                Vector3 SP = new Vector2(execCEntryNode.NodeRect.x + execCEntryNode.NodeRect.width - 2, execCEntryNode.NodeRect.y + 3);
-                Vector3 EP = new Vector3(NodeRect.x + 2, NodeRect.y + 3);
+                if (painting)
+                {
+                    Vector3 SP = new Vector2(execCEntryNode.NodeRect.x + execCEntryNode.NodeRect.width - 2, execCEntryNode.NodeRect.y + 3);
+                    Vector3 EP = new Vector3(NodeRect.x + 2, NodeRect.y + 3);
 
-                Handles.DrawBezier(SP, EP, SP + Vector3.right, EP + Vector3.left, Color.gray, null, 10);
+                    Handles.DrawBezier(SP, EP, SP + Vector3.right, EP + Vector3.left, Color.gray, null, 10);
+                }
             }
 
             float rPosX = Mathf.RoundToInt(PosX / 16) * 16;
@@ -94,13 +90,9 @@
                 PosX = rPosX;
                 PosY = rPosY;
             }
-            NodeRect = CreateRect((rPosX + 20) + drawOffs.x, (rPosY + 18) + drawOffs.y, WidthLerp, HeightLerp);
-
-
-            Rect nodeRect = CreateRect(NodeRect.x - 15, NodeRect.y - 15, NodeRect.width + 30, NodeRect.height + 30);
-
-     
+            NodeRect = new Rect((rPosX + 20) + drawOffs.x, (rPosY + 18) + drawOffs.y, WidthLerp, HeightLerp);
 
+            Rect nodeRect = new Rect(NodeRect.x - 15, NodeRect.y - 15, NodeRect.width + 30, NodeRect.height + 30);
 
             if (Event.current.button == 0 && Event.current.type == EventType.MouseDrag && bd_CanBeDragged)
             {
@@ -117,14 +109,11 @@
                 DraggingNode = null;
             }
 
-
-
             UpdateConfig(false);
 
             if (CurDrawable == null)
                 return;
 
-
             if (Width < 100)
                 Width = 100;
 
@@ -140,7 +129,6 @@
                 HeightLerp = Mathf.Lerp(HeightLerp, Height, 0.1f);
             }
 
-
             if (b_SelectNodes && bd_CanBeSelected)
             {
                 Rect localRect = CurDrawable.GetEGSelectionRect();
@@ -156,54 +144,47 @@
                 }
             }
 
-
-
             Height = 0;
             Width = 0;
 
-            Texture NodeTexture;
-
             if (!EditorApplication.isPaused || !b_BreakPoint)
                 BreakpointHighlite = false;
 
             isVaribleNode = NodeType == NodeTypeE.ClassVariable || NodeType == NodeTypeE.LocalVariable || NodeType == NodeTypeE.Field;
 
-            if (CurDrawable.SelectedNodes.Contains(NodeID))
-            {
-                if (NodeType == NodeTypeE.Logic)
-                    NodeTexture = Res.Node_Math_Normal;
-                else if (ErrorNodeType > 0 || (CurScript.b_DebugMode && EditorApplication.isPaused && BreakpointHighlite))
-                    NodeTexture = Res.Node_Error_Selected;
-                else
-                    NodeTexture = Res.Node_Selected;
-            }
-            else
+
+            if (painting && RealEditGraphRect.Overlaps(nodeRect))
             {
-                if (NodeType == NodeTypeE.Logic)
-                    NodeTexture = Res.Node_Math_Selected;
-                else if (ErrorNodeType > 0 || (CurScript.b_DebugMode && EditorApplication.isPaused && BreakpointHighlite))
-                    NodeTexture = Res.Node_Error_Selected;
+                Texture NodeTexture;
+                
+                if (CurDrawable.SelectedNodes.Contains(NodeID))
+                {
+                    if (NodeType == NodeTypeE.Logic)
+                        NodeTexture = Res.Node_Math_Normal;
+                    else if (ErrorNodeType > 0 || (CurScript.b_DebugMode && EditorApplication.isPaused && BreakpointHighlite))
+                        NodeTexture = Res.Node_Error_Selected;
+                    else
+                        NodeTexture = Res.Node_Selected;
+                }
                 else
-                    NodeTexture = Res.Node_Normal;
-            }
-
-
+                {
+                    if (NodeType == NodeTypeE.Logic)
+                        NodeTexture = Res.Node_Math_Selected;
+                    else if (ErrorNodeType > 0 || (CurScript.b_DebugMode && EditorApplication.isPaused && BreakpointHighlite))
+                        NodeTexture = Res.Node_Error_Selected;
+                    else
+                        NodeTexture = Res.Node_Normal;
+                }
 
-            if (RealEditGraphRect.Overlaps(nodeRect))
-            {
-                Graphics.DrawTexture(nodeRect, NodeTexture, 45, 45, 45, 45);
+                DrawTexture(nodeRect, NodeTexture, 45, 45, 45, 45);
                 if (NodeType != NodeTypeE.Logic)
                 {
-
                     var colorLabelRect = nodeRect;
 
                     colorLabelRect.x += 16;
                     colorLabelRect.y += 16;
 
-               
-
-
-                    //Graphics.DrawTexture(colorLabelRect, Res.HeaderColorBar, CreateRect(0, 0, 1, 1), 45, 45, 0, 0, GetLabelColor());
+                    //DrawTexture(colorLabelRect, Res.HeaderColorBar, new Rect(0, 0, 1, 1), 45, 45, 0, 0, GetLabelColor());
 
                     GUI.color = GetLabelColor();
 
@@ -223,47 +204,34 @@
                     GUI.DrawTexture(colorLabelRect, Res.HeaderColorBar_Rt);
 
                     GUI.color = Color.white;
-
                 }
             }
-            
-
-         
 
             GUI.enabled = !OpeningDocumentation;
 
-            if (NodeType != NodeTypeE.Logic && !isVaribleNode)//NodeType != NodeTypeE.Custom && 
+            if (NodeType != NodeTypeE.Logic && !isVaribleNode)//NodeType != NodeTypeE.Custom &&
             {
                 DrawDocButton();
             }
             GUI.enabled = true;
 
-
-
-
-
-
-
             //Icon
             if (NodeType != NodeTypeE.Logic)
             {
-
                 //if (NodeType == NodeTypeE.ClassVariable || NodeType == NodeTypeE.LocalVariable)
                 //GUI.color = Config.LabelColor.GetColor();
                 GUI.color = Color.white;
 
-                if(!isVaribleNode)
-                    GUI.DrawTexture(CreateRect(NodeRect.x + 9, NodeRect.y + 6, 16, 16), GetIconTex());
-
-             
+                if (!isVaribleNode)
+                    GUI.DrawTexture(new Rect(NodeRect.x + 9, NodeRect.y + 6, 16, 16), GetIconTex());
 
                 string nodeName = Rename_op_Method(Config.Name);
 
                 if ((NodeType == NodeTypeE.Method || NodeType == NodeTypeE.Field || NodeType == NodeTypeE.Property || NodeType == NodeTypeE.Event) && isStatic)
                 {
-                    if(NodeType == NodeTypeE.Property)
+                    if (NodeType == NodeTypeE.Property)
                     {
-                        if(Config.NodeRefType2_propOwner.PType != null)
+                        if (Config.NodeRefType2_propOwner.PType != null)
                             nodeName = Config.NodeRefType2_propOwner.PType.Name + "." + nodeName;
                     }
                     else if (Config.NodeRefType != null && Config.NodeRefType.PType != null)
@@ -273,44 +241,38 @@
                 {
                     nodeName = "New " + RenameType_ForCompilation(Config.OutPins[0].type.PType);
                 }
-             
 
                 Width = CalcStringPixelsX(nodeName, Res.MiddleBoldNameLabel) + 10;
 
-
                 Node_Pin delegPin = Config.OutPins.Find(x => x.LinkDelegVoid);
 
                 if (delegPin != null)
                     Width += 10;
 
                 // Node name
-                if(isVaribleNode)
+                if (isVaribleNode)
                 {
-                    GUI.Label(CreateRect(NodeRect.x + NodeRect.width / 2 - Width / 2, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
+                    GUI.Label(new Rect(NodeRect.x + NodeRect.width / 2 - Width / 2, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
                 }
                 else if (NodeType == NodeTypeE.Custom)
                 {
-                    GUI.Label(CreateRect(NodeRect.x + (NodeRect.width + 20) / 2 - Width / 2, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
+                    GUI.Label(new Rect(NodeRect.x + (NodeRect.width + 20) / 2 - Width / 2, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
                 }
                 else
                 {
-                    GUI.Label(CreateRect(NodeRect.x + 30, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
+                    GUI.Label(new Rect(NodeRect.x + 30, NodeRect.y + 6, Width + 20, 20), nodeName, Res.MiddleBoldNameLabel);// Node name
                 }
-             
 
                 Width += 35;
-                
-                Width += GenPinsSelector.Draw(NodeRect.x + Width, NodeRect.y + 4);
-
-               
 
+                Width += GenPinsSelector.Draw(NodeRect.x + Width, NodeRect.y + 4);
 
-                if(b_AllowDelegNode_Invoke)
+                if (b_AllowDelegNode_Invoke)
                 {
                     var invokeTest = DelegNode_Invoke;
-                    DrawCheckBoxRight(CreateRect(NodeRect.x + Width + 50, NodeRect.y + 2, 65, 20), "Invoke", ref DelegNode_Invoke);
+                    DrawCheckBoxRight(new Rect(NodeRect.x + Width + 50, NodeRect.y + 2, 65, 20), "Invoke", ref DelegNode_Invoke);
 
-                    if(invokeTest != DelegNode_Invoke)
+                    if (invokeTest != DelegNode_Invoke)
                     {
                         ReinitMathPins();
                     }
@@ -330,11 +292,9 @@
 
                     float t_f_Offset = CalcStringPixelsX(Analog_SwitchID + "/" + (Analog_SwitchCount - 1).ToString(), GS);
 
-                    GUI.Label(CreateRect(NodeRect.x + NodeRect.width - 20 - t_f_Offset, NodeRect.y + 5, 50, 50), Analog_SwitchID + "/" + (Analog_SwitchCount - 1).ToString(), GS);
-
-
+                    GUI.Label(new Rect(NodeRect.x + NodeRect.width - 20 - t_f_Offset, NodeRect.y + 5, 50, 50), Analog_SwitchID + "/" + (Analog_SwitchCount - 1).ToString(), GS);
 
-                    Rect switchButtonRect = CreateRect(NodeRect.x + NodeRect.width - 33 - t_f_Offset, NodeRect.y + 7, 12, 12);
+                    Rect switchButtonRect = new Rect(NodeRect.x + NodeRect.width - 33 - t_f_Offset, NodeRect.y + 7, 12, 12);
                     GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Lt);
 
                     if (GUI.Button(switchButtonRect, "", Res.EmptyStyle))
@@ -342,7 +302,7 @@
                         AnalogSwitch(-1);
                     }
 
-                    switchButtonRect = CreateRect(NodeRect.x + NodeRect.width - 20, NodeRect.y + 7, 12, 12);
+                    switchButtonRect = new Rect(NodeRect.x + NodeRect.width - 20, NodeRect.y + 7, 12, 12);
                     GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Rt);
 
                     if (GUI.Button(switchButtonRect, "", Res.EmptyStyle))
@@ -352,10 +312,6 @@
 
                     Width += 60;
                 }
-
-
-
-
             }
             if (CurScript.b_Debug_DrawPins)
             {
@@ -365,10 +321,9 @@
                 debugStr = "ID: " + NodeID;
 
                 float labelPixelsOffset2 = CalcStringPixelsX(debugStr, Res.MiddleBoldNameLabel);
-                GUI.Label(CreateRect(NodeRect.x + NodeRect.width - labelPixelsOffset2 - 10, NodeRect.y - 20, 250, 20), debugStr, Res.MiddleBoldNameLabel);
+                GUI.Label(new Rect(NodeRect.x + NodeRect.width - labelPixelsOffset2 - 10, NodeRect.y - 20, 250, 20), debugStr, Res.MiddleBoldNameLabel);
             }
 
-
             if (_TryOpen_RMB_Menu && NodeRect.Contains(Event.current.mousePosition))
             {
                 if (bd_CanBeSelected && !IsEditingText)
@@ -387,8 +342,6 @@
                 }
             }
 
-
-
             if (_LMB_Down && NodeRect.Contains(Event.current.mousePosition))
             {
                 if (bd_CanBeSelected)
@@ -420,10 +373,9 @@
                 }
             }
 
-            
             if (CurScript.b_DebugMode && ConnectorsIn.Count > 0 && ConnectorsIn[0].Connected)
             {
-                Rect BRPRect = CreateRect(NodeRect.x + 5, NodeRect.y - 16, 16, 16);
+                Rect BRPRect = new Rect(NodeRect.x + 5, NodeRect.y - 16, 16, 16);
 
                 if (BRPRect.Contains(Event.current.mousePosition))
                 {
@@ -440,23 +392,21 @@
 
                 if (b_BreakPoint)
                 {
-                    Graphics.DrawTexture(BRPRect, Res.BreakPoint);
+                    DrawTexture(BRPRect, Res.BreakPoint);
                 }
                 else
                 {
-                    Graphics.DrawTexture(BRPRect, Res.BreakPoint_Off);
+                    DrawTexture(BRPRect, Res.BreakPoint_Off);
                 }
             }
-    
 
-            if (ErrorNodeType == 2)
+            if (painting && ErrorNodeType == 2)
             {
-
                 float labelOffset = CalcStringPixelsX(ErrorNodeMessage, Res.MiddleBoldNameLabel) + 15;
 
-                Rect bubbleRect = CreateRect(NodeRect.x, NodeRect.y - 35, labelOffset, 32);
+                Rect bubbleRect = new Rect(NodeRect.x, NodeRect.y - 35, labelOffset, 32);
 
-                Graphics.DrawTexture(bubbleRect, Res.Error_Bubble, 23, 20, 8, 8);
+                DrawTexture(bubbleRect, Res.Error_Bubble, 23, 20, 8, 8);
 
                 bubbleRect.x += 5;
                 bubbleRect.y += 5;
@@ -468,8 +418,6 @@
             if (!Options.b_HideElementsOnZoom || CurDrawable.Zoom < 3)
                 DrawConnPins();
 
-
-
             if (_LMB_Up && NodeRect.Contains(Event.current.mousePosition) && !FilterByExtPin)
             {
                 if (Linking.IsLinkingSomething)
@@ -479,11 +427,10 @@
             }
         }
 
-
         //////////////////
 
-
         private float TimeClick_ChangeName = 0;
+
         private void TrySelectNode()
         {
             if (!Global_MouseInEditGraph)
@@ -575,7 +522,6 @@
             {
                 ScriptClassConstructor var = CurClass.ClassConstructors.Find(x => x.Obj_ID == ReferenceID);
 
-
                 if (select)
                     CurScript.SetSelectedObject = var;
                 else
@@ -584,7 +530,6 @@
             else if (NodeType == NodeTypeE.ClassProperty || NodeType == NodeTypeE.ClassPropertyEntry_Set || NodeType == NodeTypeE.ClassPropertyExit_Set
                 || NodeType == NodeTypeE.ClassPropertyEntry_Get || NodeType == NodeTypeE.ClassPropertyExit_Get)
             {
-
                 ScriptProperty var = CurClass.ScriptProperties.Find(x => x.PropertyID == ReferenceID);
 
                 if (select)
@@ -612,14 +557,11 @@
         [XmlIgnore]
         public static Node DraggingNode = null;
 
-
         private static bool OpeningDocumentation = false;
+
         private void DrawDocButton()
         {
-
-
-
-            Rect bRect = CreateRect(NodeRect.x + 7, NodeRect.y + 4, 20, 20);
+            Rect bRect = new Rect(NodeRect.x + 7, NodeRect.y + 4, 20, 20);
 
             if (bRect.Contains(Event.current.mousePosition) && XDoc != null)
             {
@@ -656,7 +598,7 @@
                     }
                     else if (NodeType == NodeTypeE.ClassProperty || NodeType == NodeTypeE.Property)
                     {
-                        if(isStatic)                      
+                        if (isStatic)
                             OpenDoc(Config.NodeRefType2_propOwner.PType, Config.NodeRefType2_propOwner.PType.Name, Config.Name);
                         if (b_Inherited)
                             OpenDoc(Config.NodeRefType.PType, Config.NodeRefType.PType.Name, Config.Name);
@@ -678,7 +620,7 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't open documentation coz node is not defined in code: " + NodeType);
+                        if (Options.b_ShowDebug) Debug.Log("Can't open documentation coz node is not defined in code: " + NodeType);
                     }
                 }
             }
@@ -833,7 +775,7 @@
                     break;
             }
 
-            if(urlId != -1)
+            if (urlId != -1)
             {
                 Application.OpenURL("http://nottorus.net/articles.php?article_id=" + urlId);
             }
@@ -854,7 +796,6 @@
             {
                 string searchQuery = className + "." + action;
 
-
                 if (type.IsPrimitive)
                 {
                     searchQuery = RenameType_ForCompilation(type) + "_CSharpKeyword";
@@ -872,13 +813,12 @@
                     OpeningDocumentation = false;
                     if (!string.IsNullOrEmpty(www.error))
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't open documentation for this node.");
+                        if (Options.b_ShowDebug) Debug.Log("Can't open documentation for this node.");
                     }
                     else
                     {
                         Application.OpenURL(Url);
                     }
-
                 });
             }
         }
@@ -903,7 +843,7 @@
                 OpeningDocumentation = false;
                 if (!string.IsNullOrEmpty(www.error) || www.text.Contains("Error 404"))
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Try open: " + www.url + " get: " + www.error);
+                    if (Options.b_ShowDebug) Debug.Log("Try open: " + www.url + " get: " + www.error);
 
                     if (tryNum == 0)
                     {
@@ -933,11 +873,11 @@
                     {
                         if (www.error == "Rejected because no crossdomain.xml policy file was found")
                         {
-                            if(Options.b_ShowDebug)Debug.Log("Can't open documentation. If your prefered platform is not Webplayer switch build platform from the Webplayer to another one, otherwise add or configure crossdomain.xml file. Details: http://docs.unity3d.com/Manual/SecuritySandbox.html");
+                            if (Options.b_ShowDebug) Debug.Log("Can't open documentation. If your prefered platform is not Webplayer switch build platform from the Webplayer to another one, otherwise add or configure crossdomain.xml file. Details: http://docs.unity3d.com/Manual/SecuritySandbox.html");
                         }
                         else
                         {
-                            if(Options.b_ShowDebug)Debug.Log("Can't open documentation for " + type.Name + " > " + action + ". Error: " + www.error);
+                            if (Options.b_ShowDebug) Debug.Log("Can't open documentation for " + type.Name + " > " + action + ". Error: " + www.error);
                         }
                     }
                 }
@@ -945,7 +885,6 @@
                 {
                     Application.OpenURL(Url);
                 }
-
             });
         }
 
@@ -957,11 +896,12 @@
             {
                 if (ConnectorsIn.Count > 0 && ConnectorsIn[0].Connected)
                     return true;
-                if(ConnectorsOut.Count > 0 && ConnectorsOut[0].Connected)
+                if (ConnectorsOut.Count > 0 && ConnectorsOut[0].Connected)
                     return true;
                 return false;
             }
         }
+
         private bool b_AlwaysDraw
         {
             get
@@ -973,7 +913,7 @@
                     || NodeType == NodeTypeE.Custom || NodeType == NodeTypeE.Logic;
             }
         }
-   
+
         public bool InPinConnected(int pin)
         {
             return (Config.InPins.Count <= pin) ? false : Config.InPins[pin].Connected > 0;
@@ -1010,15 +950,11 @@
                 if (b_AlwaysDraw)
                     return true;
 
-            
-
-        
-
                 bool allow = true;
 
                 if (NodeType == NodeTypeE.ClassVariable || NodeType == NodeTypeE.LocalVariable || NodeType == NodeTypeE.Property || NodeType == NodeTypeE.ClassProperty || NodeType == NodeTypeE.Field || NodeType == NodeTypeE.Event || NodeType == NodeTypeE.ClassEvent)
                 {
-                    if(outPinConn)
+                    if (outPinConn)
                         allow = false;
                 }
                 else if (NodeType == NodeTypeE.Method || NodeType == NodeTypeE.ClassFunction)
@@ -1034,26 +970,23 @@
                     if (outPinConn)
                     {
                         allow = false;
-                    }                  
+                    }
                 }
 
                 return allow;
             }
         }
 
-
         ///////////////////////////
         private float InPinsPosy_ForSwitchNode = 0;
+
         private void DrawConnPins()
         {
             Node_Pin delegPin = Config.OutPins.Find(x => x.LinkDelegVoid);
 
-
-
             float InDrawPosY = 0;
             float OutDrawPosY = 0;
 
-
             if (delegPin != null)
             {
                 float widthdel = 0;
@@ -1061,14 +994,12 @@
             }
             Node_Pin lambDelegPin = Config.OutPins.Find(x => x.LambdaDelegate);
 
-
             if (lambDelegPin != null)
             {
                 float widthdel = 0;
                 lambDelegPin.DrawPin(this, ref OutDrawPosY, ref widthdel, false, false);
             }
 
-
             //////////////////////////////////////////////////////////// Connectors Draw ////////////////////////////////////////////////////////////
             InDrawPosY = 30;
             OutDrawPosY = 30;
@@ -1084,11 +1015,8 @@
             float WidthIn = 0;
             float WidthOut = 0;
 
-
-
             if (b_drawConnectors)
             {
-
                 for (int i = 0; i < ConnectorsIn.Count; ++i)
                 {
                     ConnectorsIn[i].DrawConnector(this, ref InDrawPosY, ref WidthIn);
@@ -1096,7 +1024,6 @@
 
                 foreach (Node_Connector connectorOut in ConnectorsOut)
                 {
-
                     if (DNodeType == DefNodeType.Switch)
                     {
                         if (connectorOut.ConectorName == "Next code")
@@ -1120,8 +1047,6 @@
                         {
                             OutDrawPosY = InPinsPosy_ForSwitchNode;
                         }
-
-
                     }
 
                     float startDrawPosY = OutDrawPosY;
@@ -1136,34 +1061,30 @@
                             connectorOut.CaseBreak = true;
                         }
 
-                        var toggleRect = CreateRect(NodeRect.x + NodeRect.width - 65, NodeRect.y + OutDrawPosY, 18, 18);
+                        var toggleRect = new Rect(NodeRect.x + NodeRect.width - 65, NodeRect.y + OutDrawPosY, 18, 18);
                         connectorOut.CaseBreak = GUI.Toggle(toggleRect, connectorOut.CaseBreak, "", Res.CheckBoxButton);
                         toggleRect.x += 25;
                         GUI.Label(toggleRect, "break", Res.Label);
                         OutDrawPosY += 20;
 
                         GUI.enabled = true;
-                        
                     }
-                    else if(DNodeType == DefNodeType.TryCatchFinally && connectorOut.ConectorName.Contains("Catch:"))
+                    else if (DNodeType == DefNodeType.TryCatchFinally && connectorOut.ConectorName.Contains("Catch:"))
                     {
-                 
                         var foundPin = Config.OutPins.Find(x => connectorOut.ConectorName.EndsWith(x.PinName));
 
                         if (foundPin != null)
                         {
                             foundPin.DrawPin(this, ref OutDrawPosY, ref WidthOut, false, false);
-                            GUI.Box(CreateRect(NodeRect.x + (NodeRect.width - WidthOut) - 2, NodeRect.y + startDrawPosY, WidthOut, OutDrawPosY - startDrawPosY), "", Res.Box_Borders);
+                            GUI.Box(new Rect(NodeRect.x + (NodeRect.width - WidthOut) - 2, NodeRect.y + startDrawPosY, WidthOut, OutDrawPosY - startDrawPosY), "", Res.Box_Borders);
                             OutDrawPosY += 1.5f;
                         }
-                    
                     }
                 }
 
-
                 if (DNodeType == DefNodeType.FlowControl)
                 {
-                    Rect nodeLabelRect = CreateRect(NodeRect.x + NodeRect.width - 45, NodeRect.y + OutDrawPosY + 2, 60, 16);
+                    Rect nodeLabelRect = new Rect(NodeRect.x + NodeRect.width - 45, NodeRect.y + OutDrawPosY + 2, 60, 16);
 
                     if (GUI.Button(nodeLabelRect, "Add →", Res.NodePinLabel))
                     {
@@ -1174,21 +1095,16 @@
                 }
             }
 
-
             //////////////////////////////////////////////////////////// Pins Draw ////////////////////////////////////////////////////////////
 
             InDrawPosY += 5;
 
-
-
-
-
             if (NodeType != NodeTypeE.ClassFunctionEntry && NodeType != NodeTypeE.ConstructorEntry
                  && NodeType != NodeTypeE.ClassPropertyEntry_Get && NodeType != NodeTypeE.ClassPropertyExit_Set && NodeType != NodeTypeE.ClassPropertyEntry_Set)
             {
                 if (_LMB_Up)
                 {
-                    foreach (Node_Pin drawPin in Config.InPins.ToList())
+                    foreach (Node_Pin drawPin in Config.InPins)
                     {
                         if (drawPin.TempVarConstrPin)
                         {
@@ -1197,12 +1113,14 @@
                     }
                 }
 
-                foreach (Node_Pin drawPin in Config.InPins.ToList())
+                for (int i = 0; i < Config.InPins.Count; i++)
                 {
+                    var drawPin = Config.InPins[i];
+
                     if (drawPin.TempVarConstrPin || drawPin.LinkDelegVoid || (NodeType == NodeTypeE.ClassPropertyEntry_Set && drawPin.PropertyIndexerPin))
                         continue;
 
-                    float startDrawPosY = InDrawPosY;//(DNodeType == DefNodeType.Switch && drawPin.PinID != 0) || 
+                    float startDrawPosY = InDrawPosY;//(DNodeType == DefNodeType.Switch && drawPin.PinID != 0) ||
 
                     if (isVaribleNode)
                         drawPin.PinName = "";
@@ -1219,26 +1137,22 @@
                 Config.InPins.RemoveAll(x => x.b_WantDelete);
                 InPinsPosy_ForSwitchNode = InDrawPosY;
 
-
-
-
                 DrawAddInPinButton(ref InDrawPosY);
             }
-         
 
             Height = InDrawPosY;
             DrawBetweenPins(ref WidthIn);
 
             OutDrawPosY += 5;
 
-            if (NodeType != NodeTypeE.ClassFunctionExit && 
+            if (NodeType != NodeTypeE.ClassFunctionExit &&
                 NodeType != NodeTypeE.ConstructorExit &&
-                NodeType != NodeTypeE.ClassPropertyEntry_Get && 
-                NodeType != NodeTypeE.ClassPropertyExit_Set && 
-                NodeType != NodeTypeE.ClassPropertyExit_Get && 
+                NodeType != NodeTypeE.ClassPropertyEntry_Get &&
+                NodeType != NodeTypeE.ClassPropertyExit_Set &&
+                NodeType != NodeTypeE.ClassPropertyExit_Get &&
                 DNodeType != DefNodeType.TryCatchFinally)
             {
-                foreach (Node_Pin drawPin in Config.OutPins.ToList())
+                foreach (Node_Pin drawPin in Config.OutPins)
                 {
                     if (drawPin.LinkDelegVoid || drawPin.PropertyIndexerPin)
                     {
@@ -1254,26 +1168,24 @@
                     if (Config.OutPins.Count == 1 && Config.OutPins[0].Connected > 1)
                     {
                         WidthOut += 25;
-                        Rect tempVarRect = CreateRect(NodeRect.x + (NodeRect.width - WidthOut), NodeRect.y + OutDrawPosY - 20, 20, 20);
+                        Rect tempVarRect = new Rect(NodeRect.x + (NodeRect.width - WidthOut), NodeRect.y + OutDrawPosY - 20, 20, 20);
 
                         CreateOutPinTempVar = GUI.Toggle(tempVarRect, CreateOutPinTempVar, "", Res.CheckBoxButton);
 
-                        //Graphics.DrawTexture(tempVarRect, Res.Warning_yellow_Icon);
+                        //DrawTexture(tempVarRect, Res.Warning_yellow_Icon);
 
                         if (tempVarRect.Contains(Event.current.mousePosition))
                         {
                             GUIToolTipe = "Create temp variable for out pin to prevent code dublicating and executing twice. (Recommended)";
                         }
-
-
                     }
                 }
             }
-            
+
             if (NodeType == NodeTypeE.ClassPropertyEntry_Get || NodeType == NodeTypeE.ClassPropertyEntry_Set)
             {
                 OutDrawPosY += 10;
-                foreach (Node_Pin drawPin in Config.OutPins.ToList())
+                foreach (Node_Pin drawPin in Config.OutPins)
                 {
                     if (drawPin.PropertyIndexerPin)
                     {
@@ -1283,11 +1195,6 @@
             }
 
             DrawAddOutinButton(ref OutDrawPosY);
-  
-
-
-
-
 
             foreach (Node_Connector connectorOut in ConnectorsOut)
                 connectorOut.Connected = false;
@@ -1330,28 +1237,27 @@
         {
             get
             {
-                return 
-                    NodeType == NodeTypeE.ClassProperty || 
-                    NodeType == NodeTypeE.Property|| 
-                    NodeType == NodeTypeE.Method || 
-                    NodeType == NodeTypeE.ClassFunction||
-                    NodeType == NodeTypeE.ClassConstructor|| 
-                    NodeType == NodeTypeE.Constructor||
-                    NodeType == NodeTypeE.Class||
-                    NodeType == NodeTypeE.ClassConstructor||
+                return
+                    NodeType == NodeTypeE.ClassProperty ||
+                    NodeType == NodeTypeE.Property ||
+                    NodeType == NodeTypeE.Method ||
+                    NodeType == NodeTypeE.ClassFunction ||
+                    NodeType == NodeTypeE.ClassConstructor ||
+                    NodeType == NodeTypeE.Constructor ||
+                    NodeType == NodeTypeE.Class ||
+                    NodeType == NodeTypeE.ClassConstructor ||
                     NodeType == NodeTypeE.Constructor
                     ;
             }
         }
 
-
         private void DrawAddOutinButton(ref float drawPosY)
         {
             if (DNodeType == DefNodeType.TryCatchFinally)
             {
                 drawPosY += 5;
 
-                Rect nodeLabelRect = CreateRect(NodeRect.x + NodeRect.width - 90, NodeRect.y + drawPosY + 2, 80, 16);
+                Rect nodeLabelRect = new Rect(NodeRect.x + NodeRect.width - 90, NodeRect.y + drawPosY + 2, 80, 16);
 
                 if (GUI.Button(nodeLabelRect, "Add catch", Res.ButtonSimple))
                 {
@@ -1371,8 +1277,7 @@
             {
                 posY += 5;
 
-                Rect nodeLabelRect = CreateRect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
-
+                Rect nodeLabelRect = new Rect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
 
                 if (GUI.Button(nodeLabelRect, "Add pin", Res.ButtonSimple))
                 {
@@ -1387,7 +1292,7 @@
             {
                 posY += 5;
 
-                Rect nodeLabelRect = CreateRect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
+                Rect nodeLabelRect = new Rect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
 
                 if (GUI.Button(nodeLabelRect, "Add pin", Res.ButtonSimple))
                 {
@@ -1401,7 +1306,7 @@
             {
                 posY += 5;
 
-                Rect nodeLabelRect = CreateRect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
+                Rect nodeLabelRect = new Rect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
 
                 if (GUI.Button(nodeLabelRect, "Add pin", Res.ButtonSimple))
                 {
@@ -1415,8 +1320,7 @@
             {
                 posY += 5;
 
-                Rect nodeLabelRect = CreateRect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
-
+                Rect nodeLabelRect = new Rect(NodeRect.x + 10, NodeRect.y + posY + 2, 60, 16);
 
                 if (GUI.Button(nodeLabelRect, "Add pin", Res.ButtonSimple))
                 {
@@ -1428,6 +1332,7 @@
         }
 
         private ChangeVarType IS_ChangeVar = null;
+
         private float Draw_AsIs(float WidthIn)
         {
             if (DNodeType == DefNodeType.Is)
@@ -1435,20 +1340,17 @@
                 if (IS_ChangeVar == null)
                     IS_ChangeVar = new ChangeVarType();
 
-
                 WidthIn += IS_ChangeVar.DrawVarSelectType(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, 0, Config.NodeRefType, Config.NodeRefType);
             }
-            else if(DNodeType == DefNodeType.YieldReturnInstruction)
+            else if (DNodeType == DefNodeType.YieldReturnInstruction)
             {
                 if (IS_ChangeVar == null)
                     IS_ChangeVar = new ChangeVarType();
 
-
                 WidthIn += IS_ChangeVar.DrawVarSelectType(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, 0, Config.InPins[0].type, Config.InPins[0], false);
             }
             else if (DNodeType == DefNodeType.AsT)
             {
-
                 if (As_TypesVariants.Count > 0)
                 {
                     if (Config.NodeRefType.PType == null || !As_TypesVariants.Contains(Config.NodeRefType.PType))
@@ -1464,20 +1366,17 @@
                     if (index < 0)
                     {
                         index = 0;
-                        if(Options.b_ShowDebug)Debug.Log("Type index out of variants range..");
+                        if (Options.b_ShowDebug) Debug.Log("Type index out of variants range..");
                         // return;
                     }
 
-
                     List<string> drawTypes = new List<string>();
 
                     As_TypesVariants.ForEach(x => drawTypes.Add(x == typeof(As_Out_Pin) ? "As out pin type" : (x.IsInterface ? "Interface: " : "Class: ") + x.Name));
 
                     float labelSizeX = CalcStringPixelsX(drawTypes[index], Res.PopupButton) + 25;
 
-
-                    int newOperation = EditorGUI.Popup(CreateRect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, labelSizeX, 20), index, drawTypes.ToArray(), Res.PopupButton);
-
+                    int newOperation = EditorGUI.Popup(new Rect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, labelSizeX, 20), index, drawTypes.ToArray(), Res.PopupButton);
 
                     if (index != newOperation)
                     {
@@ -1487,12 +1386,8 @@
                         //OutPin_SetType(newType);
                     }
 
-
-
-
                     WidthIn += labelSizeX;
 
-
                     //WidthIn += Mathf.Clamp(165 - width, 0, 100);
                 }
             }
@@ -1503,12 +1398,13 @@
         ///////////////////////////
 
         private ChangeVarType TypeInst_ChangeType = new ChangeVarType();
+
         private void DrawBetweenPins(ref float WidthIn)
         {
             if (DNodeType == DefNodeType.Math)
             {
                 bool bAllowShow = false;
-                var switchRect = CreateRect(NodeRect.x + WidthIn + 5, NodeRect.y + NodeRect.height / 2 - 10, 15, 20);
+                var switchRect = new Rect(NodeRect.x + WidthIn + 5, NodeRect.y + NodeRect.height / 2 - 10, 15, 20);
 
                 if ((Config.InPins[0].Connected == 0 && Config.InPins[1].Connected > 0) || (Config.InPins[1].Connected == 0 && Config.InPins[0].Connected > 0))
                 {
@@ -1518,12 +1414,12 @@
                         {
                             if (Config.InPins[0].Connected > 0)
                             {
-                                Config.InPins[1].SetVarType(Config.InPins[0].type.PType);   
+                                Config.InPins[1].SetVarType(Config.InPins[0].type.PType);
                                 //Config.OutPins[0].SetVarType(Config.InPins[0].type.PType);
                             }
                             else if (Config.InPins[1].Connected > 0)
                             {
-                                Config.InPins[0].SetVarType(Config.InPins[1].type.PType);    
+                                Config.InPins[0].SetVarType(Config.InPins[1].type.PType);
                                 //Config.OutPins[0].SetVarType(Config.InPins[0].type.PType);
                             }
                         }
@@ -1545,7 +1441,7 @@
                 {
                     if (GUI.Button(switchRect, "x", Res.ButtonSimple))
                     {
-                        if(bOnlyOut)
+                        if (bOnlyOut)
                         {
                             Config.InPins[1].PinName = "";
                             Config.InPins[1].SetVarType(typeof(AnyType));
@@ -1577,14 +1473,13 @@
 
                 if (index < 0)
                 {
-           
-                    if(Options.b_ShowDebug)Debug.Log("Operation index out of variants range: '" + Operation + "'");
+                    if (Options.b_ShowDebug) Debug.Log("Operation index out of variants range: '" + Operation + "'");
                     Operation = MathLogOperations[0];
                 }
                 GUI.color = Color.white;
 
                 WidthIn += 15;
-                if (GUI.Button(CreateRect(NodeRect.x + WidthIn, NodeRect.y + NodeRect.height / 2 - 17, 42, 34), "", Res.MathPopupButton))
+                if (GUI.Button(new Rect(NodeRect.x + WidthIn, NodeRect.y + NodeRect.height / 2 - 17, 42, 34), "", Res.MathPopupButton))
                 {
                     RMB_Window.ShowSelectOperation(GlobalMousePos, this, 50, MathLogOperations);
                 }
@@ -1620,14 +1515,12 @@
                     default:
                         break;
                 }
-            
 
-                var mTexRect = CreateRect(NodeRect.x + WidthIn, NodeRect.y + NodeRect.height / 2 - 16, 32, 32);
+                var mTexRect = new Rect(NodeRect.x + WidthIn, NodeRect.y + NodeRect.height / 2 - 16, 32, 32);
 
                 GUI.color = Color.white;
                 GUI.DrawTexture(mTexRect, mathTex);
 
-
                 WidthIn += 25;
             }
             else if (DNodeType == DefNodeType.IncDecrement)
@@ -1638,14 +1531,11 @@
                 {
                     index = 0;
                     Operation = IncDecrOperations[0];
-                    if(Options.b_ShowDebug)Debug.Log("Operation index out of variants range. Fixed..");
+                    if (Options.b_ShowDebug) Debug.Log("Operation index out of variants range. Fixed..");
                 }
 
-
-
-
                 WidthIn += 15;
-                if (GUI.Button(CreateRect(NodeRect.x + WidthIn, NodeRect.y + (NodeRect.height + 25) / 2 - 17, 42, 34), "", Res.MathPopupButton))
+                if (GUI.Button(new Rect(NodeRect.x + WidthIn, NodeRect.y + (NodeRect.height + 25) / 2 - 17, 42, 34), "", Res.MathPopupButton))
                 {
                     RMB_Window.ShowSelectOperation(GlobalMousePos, this, 50, IncDecrOperations);
                 }
@@ -1657,7 +1547,7 @@
                 {
                     case "++": mathTex = Res.Math_Incr; break;
                     case "--": mathTex = Res.Math_Decr; break;
- 
+
                     case "+=": mathTex = Res.Math_PlusEq; break;
                     case "-=": mathTex = Res.Math_MinusEq; break;
                     case "*=": mathTex = Res.Math_MIncr; break;
@@ -1669,16 +1559,10 @@
                         break;
                 }
 
-
-
-                var mTexRect = CreateRect(NodeRect.x + WidthIn, NodeRect.y + (NodeRect.height + 25) / 2 - 16, 32, 32);
+                var mTexRect = new Rect(NodeRect.x + WidthIn, NodeRect.y + (NodeRect.height + 25) / 2 - 16, 32, 32);
                 GUI.DrawTexture(mTexRect, mathTex);
 
-
                 WidthIn += 25;
-
-
-
             }
             else if (DNodeType == DefNodeType.TypeInst)
             {
@@ -1687,19 +1571,18 @@
 
             if (DNodeType == DefNodeType.Is)
             {
-                GUI.Label(CreateRect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 12, 30, 20), "is:", Res.Label);
+                GUI.Label(new Rect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 12, 30, 20), "is:", Res.Label);
                 WidthIn += 20;
             }
 
             if (DNodeType == DefNodeType.AsT)
             {
-
                 List<string> AsIs = new List<string> { "as", "(T)" };
 
                 int index = AsIs.IndexOf(Operation);
 
                 float width = 35;
-                int newOperation = EditorGUI.Popup(CreateRect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, width, 20), index, AsIs.ToArray(), Res.PopupButton);
+                int newOperation = EditorGUI.Popup(new Rect(NodeRect.x + WidthIn + 15, NodeRect.y + NodeRect.height / 2 - 10, width, 20), index, AsIs.ToArray(), Res.PopupButton);
 
                 if (index != newOperation)
                 {
@@ -1710,12 +1593,11 @@
                 WidthIn += 40;
             }
 
-
             if (DNodeType == DefNodeType.NOT || DNodeType == DefNodeType.AND || DNodeType == DefNodeType.OR)
             {
-                Graphics.DrawTexture(CreateRect(NodeRect.x + NodeRect.width / 2, NodeRect.y + NodeRect.height / 2 - 16, 32, 32), GetIconTex());
+                DrawTexture(new Rect(NodeRect.x + NodeRect.width / 2, NodeRect.y + NodeRect.height / 2 - 16, 32, 32), GetIconTex());
                 WidthIn += 30;
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_NodeGenPins.cs Editor/m_NodeGenPins.cs
--- .Editor/m_NodeGenPins.cs	2018-06-30 08:59:18.556628700 +0700
+++ Editor/m_NodeGenPins.cs	2018-06-30 09:02:03.851520900 +0700
@@ -1,19 +1,17 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System.IO;
-using System.Reflection;
 using System.Linq;
-using System.Xml.Serialization;
-using System.Collections;
-using System;
-
+using System.Reflection;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public class NodeGenPins
     {
-        public NodeGenPins() { }
+        public NodeGenPins()
+        {
+        }
 
         public bool HideInNodesList = false;
 
@@ -40,11 +38,12 @@
         public Type NodeRefType;
         public Type NodeRefType_Filter;
         public int VariantNum = -1;
-    
 
         public NodeTypeE NodeType;
+
         //public BPColor LabelColor;
         public string Icon;
+
         public bool isStatic = false;
         public bool b_Inherited = false;
         public DefNodeType DNodeType;
@@ -58,7 +57,6 @@
             SetupNode(data, dontGenerateShit);
         }
 
-
         public NodeGenPins(object data, bool dontGenerateShit)
         {
             SetupNode(data, dontGenerateShit);
@@ -92,7 +90,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Node type is undefined: " + data);
+                if (Options.b_ShowDebug) Debug.Log("Node type is undefined: " + data);
             }
         }
 
@@ -100,8 +98,6 @@
         {
             NodeRefType = property.PropertyType;
 
-            
-
             NodeRefType_Filter = property.ReflectedType;
 
             if (!dontGenerateShit)
@@ -115,8 +111,6 @@
 
             PropertyInfo staticPInf = property.ReflectedType.GetProperty(property.Name, BindingFlags.Static | BindingFlags.Public);
 
-
-
             if (staticPInf == null)
             {
                 isStatic = false;
@@ -126,12 +120,8 @@
                 isStatic = true;
             }
 
-   
-
-
             bool makeNonStaticPin = !isStatic && !b_Inherited;
 
-
             if (property.CanWrite)
             {
                 ConnectorsInNames = new string[1] { "Set" };
@@ -187,10 +177,6 @@
                 }
             }
 
-
-   
-
-
             if (!dontGenerateShit)
             {
                 ParameterInfo[] pInfoIndexers = property.GetIndexParameters();
@@ -212,15 +198,12 @@
                     InPinsNames = inPinsAddIndexer_PinName.ToArray();
                 }
             }
-       
-
         }
 
         public void ReInitPins(FieldInfo field, bool dontGenerateShit)
         {
             NodeRefType = field.DeclaringType;
 
-
             NodeRefType_Filter = field.ReflectedType;
 
             if (!dontGenerateShit)
@@ -264,9 +247,9 @@
                     }
                 }
             }
-            else if(!isStatic && !b_Inherited)
+            else if (!isStatic && !b_Inherited)
             {
-                InPins = new Type[] { NodeRefType};
+                InPins = new Type[] { NodeRefType };
 
                 if (!dontGenerateShit)
                 {
@@ -277,7 +260,6 @@
                 }
             }
 
-
             OutPins = new Type[1] { field.FieldType };
             if (!dontGenerateShit)
             {
@@ -290,7 +272,6 @@
         {
             NodeRefType = Event.DeclaringType;
 
-
             NodeRefType_Filter = Event.ReflectedType;
 
             if (!dontGenerateShit)
@@ -304,9 +285,8 @@
 
             isStatic = Event.GetAddMethod().IsStatic;
 
-
-                ConnectorsInNames = new string[1] { "Set" };
-                ConnectorsOutNames = new string[1] { "" };
+            ConnectorsInNames = new string[1] { "Set" };
+            ConnectorsOutNames = new string[1] { "" };
 
             if (isStatic || b_Inherited)
             {
@@ -332,9 +312,6 @@
                     InPins_IsDelegate[1] = IsDeleg(Event.EventHandlerType);
                 }
             }
-            
-
-
 
             OutPins = new Type[1] { Event.EventHandlerType };
             if (!dontGenerateShit)
@@ -349,11 +326,9 @@
             NodeRefType = method.DeclaringType;
             NodeRefType_Filter = method.ReflectedType;
 
+            var methods = method.DeclaringType.GetMethods(typeDatabaseSearchFlags).Where(x => x.Name == method.Name).ToList();
 
-            var methods = method.DeclaringType.GetMethods(typeDatabaseSearchFlags).ToList();
-            methods = methods.FindAll(x => x.Name == method.Name);
-
-            VariantNum = methods.ToList().IndexOf(method);
+            VariantNum = methods.IndexOf(method);
 
             if (!dontGenerateShit)
             {
@@ -361,13 +336,11 @@
 
                 NodeName = method.Name.Replace("set_", "").Replace("get_", "");
 
-
                 Icon = "Icons/Types/Icon_Method";
                 //LabelColor = new BPColor(0, 200, 255, 200);
                 NodeType = NodeTypeE.Method;
             }
 
-
             if (!method.Name.StartsWith("op_"))
             {
                 ConnectorsInNames = new string[1] { "" };
@@ -402,8 +375,6 @@
             }
             else
             {
-
-
                 InPins = new Type[length];
 
                 if (!dontGenerateShit)
@@ -423,8 +394,6 @@
                 int pinIndex = i + addPinIndex;
                 InPins[pinIndex] = pInfo.ParameterType;
 
-
-
                 if (!dontGenerateShit)
                 {
                     InPinsNames[pinIndex] = pInfo.Name;
@@ -436,7 +405,6 @@
                     InPins_IsDelegate[pinIndex] = IsDeleg(pInfo.ParameterType);
                     InPins_IsOut[pinIndex] = pInfo.IsOut;
 
-
                     if (!pInfo.IsOut)
                     {
                         var Ref = IsRefParam(pInfo);
@@ -450,7 +418,7 @@
             }
             Type methType = method.ReturnParameter.ParameterType;
 
-            if (methType!= typeof(void))
+            if (methType != typeof(void))
             {
                 OutPins = new Type[1] { methType };
 
@@ -460,7 +428,6 @@
                     OutPin_IsDelegate = IsDeleg(methType);
                 }
             }
-
         }
 
         private bool IsRefParam(ParameterInfo pInfo)
@@ -482,7 +449,6 @@
                 NodeType = NodeTypeE.StructConstructor;
             }
 
-
             OutPins = new Type[1] { NodeRefType };
             if (!dontGenerateShit) OutPinsNames = new string[1] { NodeRefType.Name };
         }
@@ -493,8 +459,7 @@
             NodeRefType_Filter = constructor.ReflectedType;
 
             var ctors = constructor.DeclaringType.GetConstructors(typeDatabaseSearchFlags);
-            VariantNum = ctors.ToList().IndexOf(constructor);
-
+            VariantNum = Array.IndexOf(ctors, constructor);
 
             if (!dontGenerateShit)
             {
@@ -513,13 +478,11 @@
 
             if (!dontGenerateShit) InPinsNames = new string[pInfos.Length];
 
-
             for (int i = 0; i < pInfos.Length; i++)
             {
                 bool Ref = IsRefParam(pInfos[i]);
 
-            
-                if(Ref)
+                if (Ref)
                     InPins[i] = pInfos[i].ParameterType.GetElementType();
                 else
                     InPins[i] = pInfos[i].ParameterType;
@@ -533,7 +496,6 @@
                 }
             }
 
-
             OutPins = new Type[1] { NodeRefType };
             if (!dontGenerateShit) OutPinsNames = new string[1] { NodeRefType.Name };
         }
@@ -550,7 +512,6 @@
                 toInResult = true;
             }
 
-
             for (int i = 0; i < InPins.Length; i++)
             {
                 if (Linking.TypesCanBiLinked(pinType, InPins[i], b_DirTypeLinking))
@@ -560,11 +521,9 @@
                 }
             }
 
-
             if (!FilterByExtPin || !toInResult)
                 return toInResult;
 
-
             for (int i = 0; i < OutPins.Length; i++)
             {
                 if (Linking.TypesCanBiLinked(OutPins[i], FilterOutPinType, b_DirTypeLinking))
@@ -574,7 +533,6 @@
             return false;
         }
 
-
         /*
         public bool PassFilter_ToIn(Type pinType)
         {
@@ -586,7 +544,6 @@
                 return true;
             }
 
-
             for (int i = 0; i < InPins.Length; i++)
             {
                 if (Linking.TypesCanBiLinked(pinType, InPins[i]))
@@ -606,8 +563,6 @@
             if (NodeRefType != null && Linking.TypesCanBiLinked(NodeRefType_Filter, pinType, b_DirTypeLinking))
                 toOutResult = true;
 
-
-
             for (int i = 0; i < OutPins.Length; i++)
             {
                 if (Linking.TypesCanBiLinked(OutPins[i], pinType, b_DirTypeLinking))
@@ -629,6 +584,4 @@
             return false;
         }
     }
-
-    
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Node_Pin.cs Editor/m_Node_Pin.cs
--- .Editor/m_Node_Pin.cs	2018-06-30 08:59:18.579633400 +0700
+++ Editor/m_Node_Pin.cs	2018-06-30 09:02:03.856520600 +0700
@@ -1,12 +1,10 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -18,13 +16,12 @@
         public BPColor PinColor = new BPColor(255, 255, 255, 255);
         private bool ColorInitialized = false;
 
-
         public BType type = new BType();
         public int PinID = -1;
         public PinTypeE PinType = PinTypeE.Undefined;
 
         public int TypesConvertVariant = 0;
-    
+
         public TempVarHolder TempVar_TempVarHolder = new TempVarHolder();
 
         public bool GenericPinTypeDraw = false;
@@ -49,39 +46,45 @@
         public void SetDebugValFeedback(object DebugValue, int nodeId, int pinId, bool ignoreListner = false)
         {
             this.DebugValue = DebugValue;
-            if(!ignoreListner)
+            if (!ignoreListner)
                 PinDebugListner(nodeId, pinId, DebugValue);
         }
 
-
         [XmlIgnore]
         public object DebugValue = -77777;
+
         [XmlIgnore]
         public float PinLink_Highlite = 0;
+
         [XmlIgnore]
         public bool b_WantDelete = false;
 
- 
         [XmlIgnore]
         public bool ErrorPin = false;
+
         [XmlIgnore]
         public string ErrorPinMessage = "";
 
         [XmlIgnore]
         public float PosX = 0;
+
         [XmlIgnore]
         public float PosY = 0;
+
         [XmlIgnore]
         public float PinsPosY = 0;
 
+        public Node_Pin()
+        {
+        }
 
-        public Node_Pin() { }
         public Node_Pin(string PinName, PinTypeE PinType, int PinID)
         {
             this.PinID = PinID;
             this.PinName = PinName;
             this.PinType = PinType;
         }
+
         public Node_Pin(Node_Pin otherPin)
         {
             PinName = otherPin.PinName;
@@ -103,6 +106,7 @@
             TempVar_TempVarHolder = new TempVarHolder(otherPin.TempVar_TempVarHolder);
             PinDocumentation = otherPin.PinDocumentation;
         }
+
         public Node_Pin(Type pType, string PinName, PinTypeE PinType, int PinID)
         {
             this.PinID = PinID;
@@ -154,7 +158,7 @@
 
             if (newPinType == null)
             {
-                type.SetVarType(typeof(T));          
+                type.SetVarType(typeof(T));
             }
             else
             {
@@ -162,11 +166,12 @@
             }
         }
         */
+
         public void SetVarType(Type newType)
         {
             if (type == null)
                 type = new BType();
-            
+
             type.SetVarType(newType);
             PinColor = new BPColor(GetColorByType(type.PType));
             IsDelegate = IsDeleg(newType);
@@ -177,24 +182,23 @@
         public Node OwnerNode;
 
         public bool DontDisplayConnector = false;
+
         public void DrawPin(Node ownerNode, ref float PinsPosY, ref float PinsWidth, bool constrPin, bool dontDisplayConnector)
         {
-            if(!ColorInitialized || Options.RepaintNodes)
+            if (!ColorInitialized || Options.RepaintNodes)
             {
                 PinColor = new BPColor(GetColorByType(type.PType));
                 ColorInitialized = true;
             }
 
-
             DontDisplayConnector = dontDisplayConnector;
             OwnerNode = ownerNode;
 
-
             if (type.PType == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("SetToNull: '" + type.PType + "' PinName: " + PinName);
+                if (Options.b_ShowDebug) Debug.Log("SetToNull: '" + type.PType + "' PinName: " + PinName);
                 //SwitchToGenericPinTypeDraw(null);
-              
+
                 //if(Options.b_ShowDebug)Debug.Log("Null type pin: " + PinName);
                 type.PType = typeof(ErrorTypePin);
             }
@@ -202,22 +206,20 @@
             Rect nodePinRect;
 
             if (LinkDelegVoid)
-                nodePinRect = CreateRect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - 20, OwnerNode.NodeRect.y + 5, 18, 18);
-            else if(PinType == PinTypeE.PinIn)
-                nodePinRect = CreateRect(OwnerNode.NodeRect.x + 10, OwnerNode.NodeRect.y + PinsPosY, 18, 18);
+                nodePinRect = new Rect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - 20, OwnerNode.NodeRect.y + 5, 18, 18);
+            else if (PinType == PinTypeE.PinIn)
+                nodePinRect = new Rect(OwnerNode.NodeRect.x + 10, OwnerNode.NodeRect.y + PinsPosY, 18, 18);
             else
-                nodePinRect = CreateRect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - 25, OwnerNode.NodeRect.y + PinsPosY, 18, 18);
+                nodePinRect = new Rect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - 25, OwnerNode.NodeRect.y + PinsPosY, 18, 18);
 
             Vector2 mousePos = Event.current.mousePosition;
             bool hover = nodePinRect.Contains(mousePos);
 
-
-            if(PinName.Contains("`") && PinName == type.PType.Name)
+            if (PinName.Contains("`") && PinName == type.PType.Name)
             {
                 PinName = RenameTypeVarName(type.PType, true);
             }
 
-
             float PinLabelWidth = CalcStringPixelsX(PinName, Res.NodePinLabel);
 
             if (PinType == PinTypeE.PinIn)
@@ -228,14 +230,11 @@
             /*
             if (GenericPinTypeDraw)
             {
-            
                 if (PinType == PinTypeE.PinIn)
                     offsetX = OwnerNode.NodeRect.x + offset;
                 else
                     offsetX = OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - offset - GenricPinTypeDrawer.DrawWidthSize + 5;
 
-              
-
                 offset += GenricPinTypeDrawer.DrawWidthSize + 10;
             }
             */
@@ -248,11 +247,9 @@
             Rect nodeLabelRect;
 
             if (PinType == PinTypeE.PinIn)
-                nodeLabelRect = CreateRect(OwnerNode.NodeRect.x + offset, OwnerNode.NodeRect.y + PinsPosY + 2, PinsWidth, 18);
+                nodeLabelRect = new Rect(OwnerNode.NodeRect.x + offset, OwnerNode.NodeRect.y + PinsPosY + 2, PinsWidth, 18);
             else
-                nodeLabelRect = CreateRect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - PinLabelWidth - offset, OwnerNode.NodeRect.y + PinsPosY + 2, PinLabelWidth + 30, 18);
-
-   
+                nodeLabelRect = new Rect(OwnerNode.NodeRect.x + OwnerNode.NodeRect.width - PinLabelWidth - offset, OwnerNode.NodeRect.y + PinsPosY + 2, PinLabelWidth + 30, 18);
 
             GUI.color = Color.white;
 
@@ -261,20 +258,18 @@
             else
                 PosY = PinsPosY;
 
-
             if (PinType == PinTypeE.PinIn)
                 PosX = 10;
             else
                 PosX = OwnerNode.NodeRect.width - 25;
 
-
             if (ErrorPin)
             {
                 float labelOffset = CalcStringPixelsX(ErrorPinMessage, Res.MiddleBoldNameLabel) + 20;
 
-                Rect bubbleRect = CreateRect(OwnerNode.NodeRect.x - 10 - labelOffset, (OwnerNode.NodeRect.y + PosY) - 5, labelOffset, 27);
+                Rect bubbleRect = new Rect(OwnerNode.NodeRect.x - 10 - labelOffset, (OwnerNode.NodeRect.y + PosY) - 5, labelOffset, 27);
 
-                Graphics.DrawTexture(bubbleRect, Res.Error_Bubble_In_Pin, 23, 20, 8, 8);
+                DrawTexture(bubbleRect, Res.Error_Bubble_In_Pin, 23, 20, 8, 8);
 
                 bubbleRect.x += 5;
                 bubbleRect.y += 5;
@@ -283,31 +278,20 @@
                 GUI.color = Color.white;
             }
 
-
-
-
-
-
             bool hide = b_TranspInPin();
             if (hide)
             {
                 GUI.color = new Color(1, 1, 1, 0.4f);
             }
 
-            float drawYposTemp = PinsPosY;
+            // float drawYposTemp = PinsPosY;
 
             if (constrPin)
                 DrawTempVar(ref PinsPosY, ref PinsWidth, PinLabelWidth, offset);
 
-
-
-
             //if (GenericPinTypeDraw)
             //    GenricPinTypeDrawer.DrawVarSelectType(offsetX, OwnerNode.NodeRect.y + drawYposTemp, 200, type, this);
 
-
-
-
             if (!LinkDelegVoid)
                 GUI.Label(nodeLabelRect, PinName, Res.NodePinLabel);
 
@@ -327,14 +311,10 @@
 
             PinsPosY += 20;
 
-
-
-
             if (hover && !GenericParameter && !dontDisplayConnector)
             {
                 GUIToolTipe = PinTooltipeName();
 
-
                 if (_RMB_Up)
                 {
                     Node_Pin pinIn = this;
@@ -350,7 +330,7 @@
                 {
                     Node_Pin pinIn = this;
 
-                    if(!Event.current.control)
+                    if (!Event.current.control)
                     {
                         LMB_Down_Deleg = delegate
                         {
@@ -366,12 +346,9 @@
                     }
                 }
 
-
-                if (DragScriptObj)//!hide && 
+                if (DragScriptObj)//!hide &&
                     DragObjName_Postfix = " ⇒ " + PinName;
 
-    
-
                 if (Linking.b_PinLinking)
                 {
                     if (!Linking.PinsCanBeLinked(OwnerNode.NodeID, this, Linking.NodeID, Linking.NodePin, false))
@@ -382,7 +359,6 @@
                     }
                 }
 
-
                 if (_LMB_Up)
                 {
                     if (Linking.b_PinLinking)
@@ -399,9 +375,8 @@
                             FilterOutNodeId = OwnerNode.NodeID;
                             FilterOutPin = this;
                         }
-                       
                     }
-                    else if(Linking.b_PinDragLinking)
+                    else if (Linking.b_PinDragLinking)
                     {
                         Linking.DropPunchOfPins(OwnerNode, this);
                     }
@@ -410,14 +385,11 @@
                         DragScriptObj = false;
                         UndoSystem.RegisterUndo("Node creation");
 
-
                         float spawnOffset = 50;
 
                         if (PinType == PinTypeE.PinIn)
                             spawnOffset = -200;
 
-
-
                         Node newNode = new Node(CurScript.SelectedScriptObjects[0], CurDrawable.GetEditGraphRealMousePos_NoOffset.x + spawnOffset, CurDrawable.GetEditGraphRealMousePos_NoOffset.y + 50);
                         CurDrawable.Nodes.Add(newNode);
 
@@ -427,12 +399,10 @@
 
                         Linking.TryLinkToNode(newNode);
 
-
                         Linking.StopLinking();
                     }
                 }
             }
-
         }
 
         private string PinTooltipeName()
@@ -441,7 +411,7 @@
 
             if (IsRef)
             {
-                pinTypeName = "ref " + pinTypeName.Replace("&", ""); 
+                pinTypeName = "ref " + pinTypeName.Replace("&", "");
             }
             else if (IsOut)
             {
@@ -452,15 +422,14 @@
                 pinTypeName = "delegate " + GetDelegateReturnTypeName() + " " + "(" + GetDelegArguments() + ")";
             }
 
-            if(PinDocumentation != "--")
+            if (PinDocumentation != "--")
             {
                 pinTypeName += "\r\n" + PinDocumentation;
             }
 
-            return pinTypeName;  
+            return pinTypeName;
         }
 
-
         public string GetDelegArguments()
         {
             string[] args = GetDelegateParameterTypes().Select(x => RenameType_ForCompilation(x)).ToArray();
@@ -468,49 +437,38 @@
             return string.Join(", ", args);
         }
 
-        public Type[] GetDelegateParameterTypes()
+        public IEnumerable<Type> GetDelegateParameterTypes()
         {
             if (IsDelegate)
-            {
-                /*
-                if (type.PType.BaseType != typeof(MulticastDelegate))
-                {
-                    if(Options.b_ShowDebug)Debug.Log("Not a delegate.");
-                    return new Type[0];
-                }
-                */
-                 
+            {               
                 if (!IsDeleg(type.PType) || type.PType == typeof(Delegate))
                 {
-                    return new Type[0];
+                    return Enumerable.Empty<Type>();
                 }
 
                 MethodInfo invoke = type.PType.GetMethod("Invoke");
 
-
-
                 if (invoke == null)
                 {
                     //if(Options.b_ShowDebug)Debug.Log("Not a delegate.");
-                    return new Type[0];
+                    return Enumerable.Empty<Type>();
                 }
 
-
-                return invoke.GetParameters().ToList().Select(x => x.ParameterType).ToArray();
+                return invoke.GetParameters().Select(x => x.ParameterType);
             }
             else if (LinkDelegVoid)
             {
                 if (OwnerNode == null)
                 {
                     //if(Options.b_ShowDebug)Debug.Log("No owner node");
-                    return new Type[0];
+                    return Enumerable.Empty<Type>();
                 }
-                return OwnerNode.Config.InPins.Select(x => x.type.PType).ToArray();
+                return OwnerNode.Config.InPins.Select(x => x.type.PType);
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Delegate is not defined in code!");
-                return new Type[0];
+                if (Options.b_ShowDebug) Debug.Log("Delegate is not defined in code!");
+                return Enumerable.Empty<Type>();
             }
         }
 
@@ -524,12 +482,11 @@
                 return RenameTypeVarName(retT, true).Replace("Void", "void");
         }
 
-
         public Type GetDelegateReturnType()
         {
             if (IsDelegate)
             {
-                if(!IsDeleg(type.PType) || type.PType == typeof(Delegate))
+                if (!IsDeleg(type.PType) || type.PType == typeof(Delegate))
                     return null;
                 /*
                 if (type.PType.BaseType != typeof(MulticastDelegate))
@@ -546,7 +503,6 @@
                     //if(Options.b_ShowDebug)Debug.Log("Not a delegate.");
                     return null;
                 }
-                
 
                 return invoke.ReturnType;
             }
@@ -572,14 +528,10 @@
             }
         }
 
-
-
-
         private void DrawTempVar(ref float PinsPosY, ref float PinsWidth, float PinLabelWidth, float offset)
         {
             if (PinType == PinTypeE.PinIn)
             {
-
                 bool drawTempVar = Connected == 0;
 
                 if (!OwnerNode.b_AllowDelegNode_Invoke)
@@ -599,14 +551,14 @@
                 if (drawTempVar)
                 {
                     //if(TempVar_TempVarHolder.b_CanBeConstructed || TempVar_TempVarHolder.drawSize.x != 0)
-                       // PinsPosY += 20;
+                    // PinsPosY += 20;
 
                     Vector2 drawPos = new Vector2(OwnerNode.NodeRect.x + PinLabelWidth + 8, OwnerNode.NodeRect.y + PinsPosY - 2);
 
                     if (!TempVar_TempVarHolder.b_CanBeConstructed)// && OwnerNode.NodeType != NodeTypeE.Logic)
 
                         //Mathf.Max(PinsWidth, TempVar_TempVarHolder.drawSize.x)
-                        GUI.Box(CreateRect(drawPos, new Vector2(TempVar_TempVarHolder.drawSize.x + 4, TempVar_TempVarHolder.drawSize.y + 4)), "", Res.Box_Borders);// 
+                        GUI.Box(new Rect(drawPos, new Vector2(TempVar_TempVarHolder.drawSize.x + 4, TempVar_TempVarHolder.drawSize.y + 4)), "", Res.Box_Borders);//
                     drawPos.x += 2;
                     drawPos.y += 2;
 
@@ -712,8 +664,6 @@
             if (Connected > 0)
                 return false;
 
-
-
             if (Linking.b_PinLinking)
             {
                 if (!Linking.PinsCanBeLinked(OwnerNode.NodeID, this, Linking.NodeID, Linking.NodePin, false))
@@ -729,12 +679,9 @@
                 }
             }
 
-   
-
-
             if (OwnerNode.ConnectorsIn.Count > 0 && OwnerNode.ConnectorsOut.Count > 0)
             {
-                if(PinType == PinTypeE.PinIn)
+                if (PinType == PinTypeE.PinIn)
                 {
                     if (OwnerNode.ConnectorsIn[0].Connected || OwnerNode.ConnectorsOut[0].Connected)
                         return false;
@@ -750,7 +697,7 @@
 
             if (OwnerNode.b_AllowDelegNode_Invoke)
             {
-                if(OwnerNode.NodeType == NodeTypeE.ClassEvent || OwnerNode.NodeType == NodeTypeE.ClassVariable || OwnerNode.NodeType == NodeTypeE.LocalVariable)
+                if (OwnerNode.NodeType == NodeTypeE.ClassEvent || OwnerNode.NodeType == NodeTypeE.ClassVariable || OwnerNode.NodeType == NodeTypeE.LocalVariable)
                     return !OwnerNode.DelegNode_Invoke;
             }
 
@@ -773,13 +720,12 @@
                 return false;
             }
 
-            if (OwnerNode.Config.InPins.Count == 0) 
+            if (OwnerNode.Config.InPins.Count == 0)
                 pinCheckIndex = -1;
 
-
             //false
 
-                //bool hide = false;
+            //bool hide = false;
             if (pinCheckIndex != -1)
             {
                 if (this.PinName == OwnerNode.Config.InPins[pinCheckIndex].PinName)
@@ -796,7 +742,6 @@
             return false;
         }
 
-
         public bool InPinIsNum(Node_Pin inPin, int pinCheckIndex, Node ownerNode)
         {
             if (pinCheckIndex >= ownerNode.Config.InPins.Count)
@@ -813,6 +758,4 @@
         PinOut,
         GenericParam
     }
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_OpenWindow.cs Editor/m_OpenWindow.cs
--- .Editor/m_OpenWindow.cs	2018-06-30 08:59:18.582634200 +0700
+++ Editor/m_OpenWindow.cs	2018-06-30 09:02:03.857520600 +0700
@@ -1,12 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
+using System.Linq;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -18,15 +15,12 @@
 
         public void Show()
         {
-            if (NewScriptWIndow.b_Active)
+            if (NewScriptWindow.b_Active)
                 return;
 
-       
-
             if (b_Active)
                 return;
 
-          
             //if (Options.GetGenericParameterValue<bool>("SearchScriptsOpen", false))
             {
                 InitSearchScripts();
@@ -34,7 +28,7 @@
 
             if (ScriptsList.Count == 0)
             {
-                NewScriptWIndow.b_Active = true;
+                NewScriptWindow.b_Active = true;
                 return;
             }
             b_Active = true;
@@ -48,22 +42,20 @@
         {
             if (b_Active)
             {
-                DrawRect = CreateRect(BPE.position.width / 2 - Width / 2, BPE.position.height / 2 - Height / 2, Width, Height);
+                DrawRect = new Rect(BPE.position.width / 2 - Width / 2, BPE.position.height / 2 - Height / 2, Width, Height);
 
                 if (_LMB_Down || _RMB_Down)
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
                     RMB_Up_Deleg = delegate
                     {
-
                     };
                     if (!DrawRect.Contains(Event.current.mousePosition))
                     {
-                        if(CurScript != null)
-                            b_Active = false;   
+                        if (CurScript != null)
+                            b_Active = false;
                     }
                 }
 
@@ -74,7 +66,6 @@
         private Vector2 v_LastScriptsScroll = Vector2.zero;
         private Vector2 v_SearchScriptsScroll = Vector2.zero;
 
-
         private float LastListScrollLength = 0;
         private float SearchListScrollLength = 0;
         private float DrawPos = 0;
@@ -83,77 +74,72 @@
         {
             GUI.BringWindowToFront(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
-            GUI.Box(CreateRect(10, 10, 225, 30), "", Res.Box);
+            GUI.Box(new Rect(10, 10, 225, 30), "", Res.Box);
 
-            if (GUI.Button(CreateRect(15, 15, 100, 20), "New Script", Res.ButtonSimple))
+            if (GUI.Button(new Rect(15, 15, 100, 20), "New Script", Res.ButtonSimple))
             {
                 b_Active = false;
-                NewScriptWIndow.Show();           
+                NewScriptWindow.Show();
             }
 
-
-            if (GUI.Button(CreateRect(120, 15, 110, 20), "Open script file", Res.ButtonSimple))
+            if (GUI.Button(new Rect(120, 15, 110, 20), "Open script file", Res.ButtonSimple))
             {
                 OpenScriptFile();
                 b_Active = false;
             }
 
-            GUI.Box(CreateRect(240, 10, Width - 250, 30), "", Res.Box);
+            GUI.Box(new Rect(240, 10, Width - 250, 30), "", Res.Box);
 
             bool openLast = Options.OpenLastScripts == 1;
 
             EditorGUI.BeginChangeCheck();
-            openLast = EditorGUI.Toggle(CreateRect(245, 10, 200, 20), openLast, Res.RadioButton);
-            GUI.Label(CreateRect(265, 7, 200, 20), "Open last file on load", Res.Label);
+            openLast = EditorGUI.Toggle(new Rect(245, 10, 200, 20), openLast, Res.RadioButton);
+            GUI.Label(new Rect(265, 7, 200, 20), "Open last file on load", Res.Label);
             if (openLast)
                 Options.OpenLastScripts = 1;
 
             bool openAll = Options.OpenLastScripts == 2;
-            openAll = EditorGUI.Toggle(CreateRect(245, 23, 200, 20), openAll, Res.RadioButton);
-            GUI.Label(CreateRect(265, 20, 200, 20), "Open all last files on load", Res.Label);
+            openAll = EditorGUI.Toggle(new Rect(245, 23, 200, 20), openAll, Res.RadioButton);
+            GUI.Label(new Rect(265, 20, 200, 20), "Open all last files on load", Res.Label);
             if (openAll)
                 Options.OpenLastScripts = 2;
 
             if (!openLast && !openAll)
-                Options.OpenLastScripts = 0; 
+                Options.OpenLastScripts = 0;
 
-            if(EditorGUI.EndChangeCheck())
+            if (EditorGUI.EndChangeCheck())
             {
                 EditorOptions.Save();
             }
 
-            GUI.Box(CreateRect(10, 50, Width - 20, Height * 0.5f - 50), "", Res.Box);
+            GUI.Box(new Rect(10, 50, Width - 20, Height * 0.5f - 50), "", Res.Box);
 
-            GUI.Label(CreateRect(15, 50, 300, 20), "Last opened scripts:", Res.Label);
+            GUI.Label(new Rect(15, 50, 300, 20), "Last opened scripts:", Res.Label);
 
-            v_LastScriptsScroll = GUI.BeginScrollView(CreateRect(15, 65, Width - 30, Height * 0.5f - 70), v_LastScriptsScroll, CreateRect(0, 0, 100, LastListScrollLength));
+            v_LastScriptsScroll = GUI.BeginScrollView(new Rect(15, 65, Width - 30, Height * 0.5f - 70), v_LastScriptsScroll, new Rect(0, 0, 100, LastListScrollLength));
             DrawPos = 0;
 
-
-
-            foreach (string path in Options.LastScriptsPaths.ToList())
+            foreach (string path in Options.LastScriptsPaths)
             {
-                GUI.Box(CreateRect(0, DrawPos, Width - 50, 20), "", Res.Box);
+                GUI.Box(new Rect(0, DrawPos, Width - 50, 20), "", Res.Box);
 
-                
                 if (IsOpened(path))
                 {
-                    //GUI.Label(CreateRect(Width - 180, DrawPos + 2, Width - 70, 20), "Allready opened", Res.Label);
+                    //GUI.Label(new Rect(Width - 180, DrawPos + 2, Width - 70, 20), "Allready opened", Res.Label);
                     GUI.enabled = false;
                 }
-                
 
-                if (GUI.Button(CreateRect(0, DrawPos, Width - 70, 20), path, Res.Label))
+                if (GUI.Button(new Rect(0, DrawPos, Width - 70, 20), path, Res.Label))
                 {
                     OpenAddScript(path, true);
                     b_Active = false;
                 }
                 GUI.enabled = true;
 
-                GUI.Box(CreateRect(Width - 70, DrawPos, 20, 20), "", Res.Box);
-                if (GUI.Button(CreateRect(Width - 65, DrawPos, 15, 20), "X", Res.Label))
+                GUI.Box(new Rect(Width - 70, DrawPos, 20, 20), "", Res.Box);
+                if (GUI.Button(new Rect(Width - 65, DrawPos, 15, 20), "X", Res.Label))
                 {
                     Options.RemoveLastScript(path);
                     return;
@@ -166,26 +152,23 @@
 
             DrawPos = Width / 2 + 10;
 
-            GUI.Box(CreateRect(10, DrawPos, Width - 20, Height * 0.5f - 20), "", Res.Box);
+            GUI.Box(new Rect(10, DrawPos, Width - 20, Height * 0.5f - 20), "", Res.Box);
 
             bool searchScriptsOpen = Options.GetGenericParameterValue<bool>("SearchScriptsOpen", true);
 
-            //bool SearchScriptsOpen = EditorGUI.Foldout(CreateRect(10, DrawPos, Width - 20, 20), searchScriptsOpen, "Search scripts in project files:");
-
-
+            //bool SearchScriptsOpen = EditorGUI.Foldout(new Rect(10, DrawPos, Width - 20, 20), searchScriptsOpen, "Search scripts in project files:");
 
-            bool SearchScriptsOpen = GUI.Toggle(CreateRect(10, DrawPos + 3, 200, 20), searchScriptsOpen, "", Res.EmptyStyle);
+            bool SearchScriptsOpen = GUI.Toggle(new Rect(10, DrawPos + 3, 200, 20), searchScriptsOpen, "", Res.EmptyStyle);
 
-            GUI.Label(CreateRect(35, DrawPos, 300, 20), "Search scripts in project files:", Res.Label);
+            GUI.Label(new Rect(35, DrawPos, 300, 20), "Search scripts in project files:", Res.Label);
 
-            var toggleRect = CreateRect(20, DrawPos + 8, 8, 8);
+            var toggleRect = new Rect(20, DrawPos + 8, 8, 8);
 
             if (SearchScriptsOpen)
                 GUI.DrawTexture(toggleRect, Res.ListButtonOpen);
             else
                 GUI.DrawTexture(toggleRect, Res.ListButtonClose);
 
-
             if (SearchScriptsOpen != searchScriptsOpen)
             {
                 Options.SetParameterValue("SearchScriptsOpen", SearchScriptsOpen);
@@ -211,36 +194,34 @@
 
                 DrawPos += 20;
 
-
-                v_SearchScriptsScroll = GUI.BeginScrollView(CreateRect(15, DrawPos, Width - 25, Height * 0.5f - 40), v_SearchScriptsScroll, CreateRect(0, 0, SearchScriptsWidthResult, SearchListScrollLength));
+                v_SearchScriptsScroll = GUI.BeginScrollView(new Rect(15, DrawPos, Width - 25, Height * 0.5f - 40), v_SearchScriptsScroll, new Rect(0, 0, SearchScriptsWidthResult, SearchListScrollLength));
                 SearchScriptsWidth = 0;
                 DrawPos = 0;
 
-                foreach (string path in ScriptsList.ToList())
+                foreach (string path in ScriptsList)
                 {
                     float curWidth = 0;
-                    GUI.Box(CreateRect(0, DrawPos, SearchScriptsWidthResult - 30, 20), "", Res.Box);
-                     
+                    GUI.Box(new Rect(0, DrawPos, SearchScriptsWidthResult - 30, 20), "", Res.Box);
+
                     if (IsOpened(path))
                     {
                         GUI.enabled = false;
-                        //GUI.Label(CreateRect(SearchScriptsWidthResult - 140, DrawPos + 2, 150, 20), "Allready opened", Res.Label);                   
+                        //GUI.Label(new Rect(SearchScriptsWidthResult - 140, DrawPos + 2, 150, 20), "Allready opened", Res.Label);
                     }
 
                     float drawLabelWidth = CalcStringPixelsX(path, Res.Label);
 
                     curWidth += 10 + drawLabelWidth + 20;
-                    if (GUI.Button(CreateRect(10, DrawPos, SearchScriptsWidthResult - 80, 20), path, Res.Label))
+                    if (GUI.Button(new Rect(10, DrawPos, SearchScriptsWidthResult - 80, 20), path, Res.Label))
                     {
                         OpenAddScript(path, true);
                         b_Active = false;
                     }
                     GUI.enabled = true;
 
-
                     curWidth += 25;
-                    GUI.Box(CreateRect(SearchScriptsWidthResult - 30, DrawPos, 20, 20), "", Res.Box);
-                    if (GUI.Button(CreateRect(SearchScriptsWidthResult - 25, DrawPos, 15, 20), "X", Res.Label))
+                    GUI.Box(new Rect(SearchScriptsWidthResult - 30, DrawPos, 20, 20), "", Res.Box);
+                    if (GUI.Button(new Rect(SearchScriptsWidthResult - 25, DrawPos, 15, 20), "X", Res.Label))
                     {
                         int option = EditorUtility.DisplayDialogComplex(
                         "Delete script?",
@@ -253,7 +234,7 @@
                         string deleteFilePath = Application.dataPath.Replace("Assets", "") + path;
                         if (option == 0)
                         {
-                            Options.RemoveLastScript(path); 
+                            Options.RemoveLastScript(path);
                             File.Delete(deleteFilePath + ExtensionType);
                             File.Delete(deleteFilePath + ExtensionType + ".meta");
 
@@ -261,7 +242,7 @@
                             EditorOptions.Save();
                             break;
                         }
-                        else if(option == 1)
+                        else if (option == 1)
                         {
                             File.Delete(deleteFilePath + ".cs");
                             EditorOptions.Save();
@@ -271,7 +252,6 @@
                         {
                             return;
                         }
-                     
                     }
 
                     DrawPos += 20;
@@ -283,6 +263,7 @@
                 SearchScriptsWidthResult = Mathf.Max(SearchScriptsWidth, Width - 45);
             }
         }
+
         private float SearchScriptsWidth = 0;
         private float SearchScriptsWidthResult = 0;
         private List<string> ScriptsList = new List<string>();
@@ -294,11 +275,11 @@
 
             SearchRecurcively(scriptsFIs, Application.dataPath + @"/", Application.dataPath + @"/");
 
-
             string mainPath = Application.dataPath.Replace(@"/", @"\") + @"\";
 
-            scriptsFIs = scriptsFIs.OrderBy(x => x.LastAccessTime).ToList();
+            var dtComparer = Comparer<DateTime>.Default;
 
+            scriptsFIs.Sort((x, y) => dtComparer.Compare(x.LastAccessTime, y.LastAccessTime));
 
             if (Options.SortBy_LastAccess)
             {
@@ -331,11 +312,10 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't create fileinfo at path: " + path);
+                if (Options.b_ShowDebug) Debug.Log("Can't create fileinfo at path: " + path);
             }
         }
 
-
         private bool IsOpened(string path)
         {
             foreach (ScriptData script in Scripts)
@@ -347,4 +327,4 @@
             return false;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_OptionsCFG.cs Editor/m_OptionsCFG.cs
--- .Editor/m_OptionsCFG.cs	2018-06-30 08:59:18.585634700 +0700
+++ Editor/m_OptionsCFG.cs	2018-06-30 09:02:03.859521500 +0700
@@ -1,19 +1,14 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
 using System.Xml.Serialization;
-
-
+using UnityEditor;
+using UnityEngine;
 
 public sealed partial class Nottorus : EditorWindow
 {
     public static EditorOptions _options = new EditorOptions();
-   
+
     public static EditorOptions Options
     {
         get
@@ -34,11 +29,10 @@
 
     private const string EditorFolder = "Nottorus/";
 
-
     public class FavoriteNode
     {
         public string Name;
-        public bool b_DefaultNode;      
+        public bool b_DefaultNode;
         public NodeTypeE NodeType;
         public DefNodeType DefaultNodeType;
         public string FullTypeName;
@@ -47,12 +41,13 @@
         public string FullMemberName;
     }
 
-
     public class EditorOptions
     {
-        // 0 - Do nothing
-        // 1 - Open last
-        // 2 - Open all
+        /// <summary>
+        /// 0 - Do nothing
+        /// 1 - Open last
+        /// 2 - Open all
+        /// </summary>
         public int OpenLastScripts = 2;
 
         public bool SortBy_LastAccess = true;
@@ -75,9 +70,7 @@
         public bool b_DeclearedType = false;
 
         public SearchStringType SearchFilterType = SearchStringType.Contains;
-
-        public bool b_UsePrecompiler = true;
-
+        
         public List<string> LastScriptsPaths = new List<string>();
         public const string TempFileName = EditorFolder + "NottorusOptions.ini";
 
@@ -85,6 +78,11 @@
         public string sCustomNameScriptPromotedVarAlias = "$pinname$_$pintype$_var";
         public string sCustomNameLocalPromotedVarAlias = "_$pinname$_$pintype$_var";
 
+        public bool IsDeleteKey(KeyCode keyCode)
+        {
+            return keyCode == KeyCode.Delete || keyCode == KeyCode.Backspace;
+        }
+
         public string PluginVariant_Name_p1 = "Plugins";
         public string PluginVariant_Name_p2 = "My Plugin";
 
@@ -136,9 +134,7 @@
         public bool PlaceVariant_NodeWidth = false;
 
         public int PlaceVariant_OffsetType = 3;
-
-        public KeyCode DeleteKey = KeyCode.Delete;
-
+        
         public bool bPreventHotkeysSpam = false;
 
         //public byte[] Variants = new byte[0];
@@ -146,6 +142,7 @@
         public List<FavoriteNode> FavoriteNodes = new List<Nottorus.FavoriteNode>();
 
         public bool b_SortDefaultNodes = false;
+        public bool b_SortMembers = false;
 
         public bool bShortTypeNameCompilation = false;
         public bool bShortTypeNameCompilation_ShowInfo = false;
@@ -174,8 +171,8 @@
                     Save();
                 }
             }
-        } 
-        
+        }
+
         public T GetGenericParameterValue<T>(string parm, object DefaultValue)
         {
             Option fOpt = Parameters.Find(x => x.Parameter == parm);
@@ -191,16 +188,16 @@
 
         /////////////////////////////////////////////////////////////////////////////////////
         public List<ColorSaver> NodeLabelColors = new List<ColorSaver>();
+
         public ColorSaver GetColorForNode(NodeTypeE nodeType, DefNodeType dNodeType)
         {
             string typeName = "";
 
-            if(nodeType == NodeTypeE.Custom || nodeType == NodeTypeE.Logic)
+            if (nodeType == NodeTypeE.Custom || nodeType == NodeTypeE.Logic)
                 typeName = dNodeType.ToString();
             else
                 typeName = nodeType.ToString();
 
-
             return GetColorSByName(typeName);
         }
 
@@ -217,144 +214,211 @@
 
         private Color GetDefaultColor(string nodeType)
         {
-            BPColor result = new BPColor();
+            // BPColor result = new BPColor();
 
-            switch(nodeType)
+            switch (nodeType)
             {
                 case "ClassFunctionEntry":
                     return new Color32(138, 89, 36, 40);
+
                 case "ClassFunctionExit":
                     return new Color32(165, 100, 65, 40);
+
                 case "ClassVariable":
                     return new Color32(112, 126, 221, 40);
+
                 case "Method":
                     return new Color32(100, 153, 28, 40);
+
                 case "Property":
                     return new Color32(45, 97, 198, 40);
+
                 case "Field":
                     return new Color32(206, 166, 0, 40);
+
                 case "ClassFunction":
                     return new Color32(116, 134, 223, 40);
+
                 case "ConsolePrint":
                     return new Color32(189, 25, 25, 40);
+
                 case "StringBuilder":
                     return new Color32(255, 0, 255, 40);
+
                 case "Class":
                     return new Color32(57, 236, 0, 40);
+
                 case "Constructor":
                     return new Color32(149, 47, 100, 40);
+
                 case "StructConstructor":
                     return new Color32(61, 176, 193, 40);
+
                 case "ClassConstructor":
                     return new Color32(123, 60, 60, 40);
+
                 case "ConstructorEntry":
                     return new Color32(138, 89, 36, 40);
+
                 case "ConstructorExit":
                     return new Color32(165, 100, 65, 40);
+
                 case "ClassProperty":
                     return new Color32(148, 255, 162, 40);
+
                 case "ClassPropertyEntry_Set":
                     return new Color32(138, 89, 36, 40);
+
                 case "ClassPropertyExit_Set":
                     return new Color32(165, 100, 65, 40);
+
                 case "ClassPropertyEntry_Get":
                     return new Color32(138, 89, 36, 40);
+
                 case "ClassPropertyExit_Get":
                     return new Color32(165, 100, 65, 40);
+
                 case "LocalVariable":
                     return new Color32(128, 128, 128, 40);
+
                 case "StateMachineNode_Entry":
                     return new Color32(138, 89, 36, 40);
+
                 case "StateMachineNode_Exit":
                     return new Color32(165, 100, 65, 40);
+
                 case "TryCatchFinally":
                     return new Color32(26, 146, 126, 40);
+
                 case "FlowControl":
                     return new Color32(168, 71, 71, 40);
+
                 case "If":
                     return new Color32(255, 0, 0, 40);
+
                 case "While":
                     return new Color32(255, 0, 0, 40);
+
                 case "For":
                     return new Color32(112, 73, 73, 40);
+
                 case "Math":
                     return new Color32(80, 44, 44, 40);
+
                 case "NOT":
                     return new Color32(62, 101, 148, 40);
+
                 case "AND":
                     return new Color32(32, 73, 119, 40);
+
                 case "OR":
                     return new Color32(43, 92, 149, 40);
+
                 case "AsT":
                     return new Color32(29, 52, 161, 40);
+
                 case "Is":
                     return new Color32(1, 2, 153, 40);
+
                 case "This":
                     return new Color32(19, 116, 36, 40);
+
                 case "ArrayElem":
                     return new Color32(131, 12, 12, 40);
+
                 case "MakeArray":
                     return new Color32(111, 36, 119, 40);
+
                 case "ForEachIndex":
                     return new Color32(71, 17, 17, 40);
+
                 case "IsNull":
                     return new Color32(131, 82, 82, 40);
+
                 case "Null":
                     return new Color32(84, 49, 49, 40);
+
                 case "MakeDelegate":
                     return new Color32(118, 72, 72, 40);
+
                 case "YieldReturnInstruction":
                     return new Color32(95, 55, 116, 40);
+
                 case "YieldReturnValue":
                     return new Color32(119, 51, 138, 40);
+
                 case "Break":
                     return new Color32(57, 82, 10, 40);
+
                 case "Continue":
                     return new Color32(51, 89, 20, 40);
+
                 case "DelegLambda":
                     return new Color32(86, 38, 38, 40);
+
                 case "Lock":
                     return new Color32(106, 71, 18, 40);
+
                 case "Throw":
                     return new Color32(108, 43, 43, 40);
+
                 case "Var":
                     return new Color32(135, 99, 99, 40);
+
                 case "IncDecrement":
                     return new Color32(89, 65, 65, 40);
+
                 case "SetValue":
                     return new Color32(53, 99, 41, 40);
+
                 case "Switch":
                     return new Color32(22, 108, 58, 40);
+
                 case "Using":
                     return new Color32(73, 35, 35, 40);
+
                 case "GotoRegist":
                     return new Color32(41, 123, 86, 40);
+
                 case "Goto":
                     return new Color32(106, 58, 58, 40);
+
                 case "Typeof":
                     return new Color32(78, 54, 54, 40);
+
                 case "ExecBConstr":
                     return new Color32(59, 100, 179, 40);
+
                 case "ExeThisBConstr":
                     return new Color32(27, 102, 176, 40);
+
                 case "ConditionalExpr":
                     return new Color32(93, 44, 44, 40);
+
                 case "Unary":
                     return new Color32(38, 73, 21, 40);
+
                 case "DelegateReturn":
                     return new Color32(136, 107, 45, 40);
+
                 case "BreakVect":
                     return new Color32(97, 84, 15, 40);
+
                 case "TypeInst":
                     return new Color32(22, 129, 8, 40);
+
                 case "DoWhile":
                     return new Color32(95, 33, 33, 40);
+
                 case "YieldReturnBreak":
                     return new Color32(101, 55, 55, 40);
+
                 case "Base":
                     return new Color32(116, 62, 62, 40);
+
                 case "MakeAMethod":
                     return new Color32(42, 59, 138, 40);
+
                 default:
                     break;
             }
@@ -364,6 +428,7 @@
 
         ///////////////////////////////////////////////////////////////////////////////////////
         public List<ColorSaver> TypeColors = new List<ColorSaver>();
+
         public ColorSaver GetTypeColorByName(string typeName)
         {
             return TypeColors.Find(x => x.Name == typeName);
@@ -371,7 +436,7 @@
 
         public void CheckSetupDefaultTypeColors(bool check = true)
         {
-            if(!check || TypeColors.Count == 0)
+            if (!check || TypeColors.Count == 0)
             {
                 Options.TypeColors = new List<ColorSaver>();
                 TypeColors.Add(new ColorSaver("Type", new Color32(100, 100, 100, 255)));
@@ -391,14 +456,15 @@
             }
         }
 
-
         ///////////////////////////////////////////////////////////////////////////////////////
         public class Option
         {
             public string Parameter = "";
             public object Value = null;
 
-            public Option() { }
+            public Option()
+            {
+            }
 
             public Option(string Parameter, object Value)
             {
@@ -423,7 +489,7 @@
             else
             {
                 Options = new EditorOptions();
-            }   
+            }
         }
 
         public static void Save()
@@ -437,7 +503,6 @@
             }
         }
 
-
         public void AddLastScript(string path)
         {
             if (!LastScriptsPaths.Contains(path))
@@ -445,6 +510,7 @@
 
             Save();
         }
+
         public void RemoveLastScript(string path)
         {
             LastScriptsPaths.RemoveAll(x => x == path);
@@ -454,13 +520,21 @@
 
     public class ColorSaver
     {
-        public ColorSaver() { }
-        public ColorSaver(string name, byte[] color) { Name = name; Color = color; }
+        public ColorSaver()
+        {
+        }
+
+        public ColorSaver(string name, byte[] color)
+        {
+            Name = name; Color = color;
+        }
+
         public ColorSaver(string name, Color32 color)
         {
             Name = name;
             Color = new byte[] { color.r, color.g, color.b, color.a };
         }
+
         public string Name;
         public byte[] Color;
 
@@ -468,9 +542,10 @@
         {
             Color = new byte[] { color.r, color.g, color.b, color.a };
         }
+
         public Color GetColor()
         {
             return new UnityEngine.Color32(Color[0], Color[1], Color[2], Color[3]);
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_OptionsPanel.cs Editor/m_OptionsPanel.cs
--- .Editor/m_OptionsPanel.cs	2018-06-30 08:59:18.588635600 +0700
+++ Editor/m_OptionsPanel.cs	2018-06-30 09:02:03.860521100 +0700
@@ -1,14 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
-using System.Xml.Serialization;
-using System.Text.RegularExpressions;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -18,12 +13,13 @@
     {
         public bool b_Active = false;
         private string[] AwailableAssemblies = new string[0];//"Error: List Is Not Initialized"
+
         public void Show()
         {
             b_Active = true;
             //TabWindowIndex = 0;
 
-            if(AwailableAssemblies.Length == 0)
+            if (AwailableAssemblies.Length == 0)
                 AwailableAssemblies = CurScript.UsedAsseblies.Select(x => x.AssemblyName).ToArray();
         }
 
@@ -38,7 +34,6 @@
             b_Active = false;
             Options.RepaintNodes = false;
             EditorOptions.Save();
-            bHandleDeleteKey = false;
 
             if (TabWindowIndex == 1)
                 InfoMessages.ShowMessage("Colors saved", 1);
@@ -52,7 +47,7 @@
             if (b_Active)
             {
                 Height = DrawPosY;
-                DrawRect = CreateRect(Window_PosX, Window_PosY, Width, Height);
+                DrawRect = new Rect(Window_PosX, Window_PosY, Width, Height);
 
                 var labelDragRect = DrawRect;
                 labelDragRect.height = 40;
@@ -74,19 +69,16 @@
                     {
                         LMB_Down_Deleg = delegate
                         {
-
                         };
 
                         RMB_Up_Deleg = delegate
                         {
-
                         };
                     }
                     else if (TabWindowIndex == 0 || TabWindowIndex == 2)
                         Close();
                 }
 
-
                 if (b_Active)
                     OpenScriptFunction(0);
 
@@ -101,24 +93,25 @@
 
         private float DrawPosY = 0;
         private int TabWindowIndex = 0;
+
         void OpenScriptFunction(int windowID)
         {
             //GUI.BringWindowToFront(windowID);
 
-            Graphics.DrawTexture(DrawRect, Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(DrawRect, Res.BaseWindow, 25, 25, 25, 25);
 
-            if (GUI.Button(CreateRect(DrawRect.x + DrawRect.width - 25, DrawRect.y + 5, 20, 20), "X", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + DrawRect.width - 25, DrawRect.y + 5, 20, 20), "X", Res.ButtonSimple))
             {
                 Close();
                 return;
             }
 
-            GUI.Label(CreateRect(DrawRect.x + Width / 2 - 40, DrawRect.y + 10, 100, 30), "Options", Res.BigWindowLabel);
-            GUI.Box(CreateRect(DrawRect.x + 4, DrawRect.y + 60, Width - 8, DrawPosY - 63), "", Res.Box);
+            GUI.Label(new Rect(DrawRect.x + Width / 2 - 40, DrawRect.y + 10, 100, 30), "Options", Res.BigWindowLabel);
+            GUI.Box(new Rect(DrawRect.x + 4, DrawRect.y + 60, Width - 8, DrawPosY - 63), "", Res.Box);
 
             DrawPosY = DrawRect.y + 63;
 
-            TabsDrawRect = CreateRect(DrawRect.x + 10, DrawRect.y + 40, 100, 20);
+            TabsDrawRect = new Rect(DrawRect.x + 10, DrawRect.y + 40, 100, 20);
 
             if (DrawTab(0, "Main"))
                 DrawMainOptions();
@@ -128,19 +121,20 @@
 
             if (DrawTab(2, "Default Assemblies"))
                 DrawDefaultAssemblies();
-
         }
+
         private Rect TabsDrawRect;
+
         private bool DrawTab(int tabIndex, string tabName)
         {
             TabsDrawRect.width = CalcStringPixelsX(tabName, Res.NodePinLabel) + 20;
 
             if (TabWindowIndex == tabIndex)
-                Graphics.DrawTexture(TabsDrawRect, Res.TabActive, 20, 20, 5, 5);
+                DrawTexture(TabsDrawRect, Res.TabActive, 20, 20, 5, 5);
             else
-                Graphics.DrawTexture(TabsDrawRect, Res.Tab, 20, 20, 5, 5);
+                DrawTexture(TabsDrawRect, Res.Tab, 20, 20, 5, 5);
 
-            Rect DrawlabelRect = CreateRect(TabsDrawRect.x + 10, TabsDrawRect.y + 5, TabsDrawRect.width - 10, 20);
+            Rect DrawlabelRect = new Rect(TabsDrawRect.x + 10, TabsDrawRect.y + 5, TabsDrawRect.width - 10, 20);
             GUI.Label(DrawlabelRect, tabName, Res.NodePinLabel);
 
             if (_LMB_Down && TabsDrawRect.Contains(Event.current.mousePosition))
@@ -153,10 +147,8 @@
             return TabWindowIndex == tabIndex;
         }
 
-
-
-
         private float TypeColorsLength = 0;
+
         private void DrawColorsOptions()
         {
             DrawLabelsColorOptions();
@@ -166,24 +158,23 @@
 
             typesScrollHeight = Mathf.Clamp(typesScrollHeight, 30, 350);
 
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 80, 20), "Type Colors", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 80, 20), "Type Colors", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, typesScrollHeight + 65), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, typesScrollHeight + 65), "", Res.Box);
             DrawPosY += 5;
 
-
-            TypeColorsScroll = GUI.BeginScrollView(CreateRect(DrawRect.x + 7, DrawPosY, Width - 14, typesScrollHeight), TypeColorsScroll, new Rect(0, 0, 10, TypeColorsLength));
+            TypeColorsScroll = GUI.BeginScrollView(new Rect(DrawRect.x + 7, DrawPosY, Width - 14, typesScrollHeight), TypeColorsScroll, new Rect(0, 0, 10, TypeColorsLength));
 
             TypeColorsLength = 0;
             foreach (var typeColor in Options.TypeColors)
             {
-                typeColor.Name = EditorGUI.TextField(CreateRect(10, TypeColorsLength, 150, 16), typeColor.Name);
+                typeColor.Name = EditorGUI.TextField(new Rect(10, TypeColorsLength, 150, 16), typeColor.Name);
                 Color sysColor = typeColor.GetColor();
-                //sysColor = EditorGUI.ColorField(CreateRect(160, TypeColorsLength, 40, 16), sysColor);
+                //sysColor = EditorGUI.ColorField(new Rect(160, TypeColorsLength, 40, 16), sysColor);
                 //typeColor.SetColor(sysColor);
-                DrawColorPicker(CreateRect(160, TypeColorsLength, 40, 16), sysColor, typeColor, sysColor.a);
+                DrawColorPicker(new Rect(160, TypeColorsLength, 40, 16), sysColor, typeColor, sysColor.a);
 
-                if (GUI.Button(CreateRect(205, TypeColorsLength, 16, 16), "X", Res.ButtonSimple))
+                if (GUI.Button(new Rect(205, TypeColorsLength, 16, 16), "X", Res.ButtonSimple))
                 {
                     Options.TypeColors.Remove(typeColor);
                     break;
@@ -196,53 +187,52 @@
             DrawPosY += typesScrollHeight;
             DrawPosY += 5;
             ////////// Add new /////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 225, 25), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 225, 25), "", Res.Box);
             DrawPosY += 5;
-            NewColorname = EditorGUI.TextField(CreateRect(DrawRect.x + 10, DrawPosY, 150, 16), NewColorname);
+            NewColorname = EditorGUI.TextField(new Rect(DrawRect.x + 10, DrawPosY, 150, 16), NewColorname);
 
-            if (GUI.Button(CreateRect(DrawRect.x + 165, DrawPosY, 60, 16), "Add new", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + 165, DrawPosY, 60, 16), "Add new", Res.ButtonSimple))
             {
                 Options.TypeColors.Add(new ColorSaver(NewColorname, new Color32(0, 0, 0, 0)));
                 NewColorname = "";
             }
             DrawPosY += 25;
             ////////////////////////
-            if (GUI.Button(CreateRect(DrawRect.x + 7, DrawPosY, 225, 20), "Reset all Type colors to default", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + 7, DrawPosY, 225, 20), "Reset all Type colors to default", Res.ButtonSimple))
             {
                 Options.CheckSetupDefaultTypeColors(false);
             }
             DrawPosY += 30;
 
-            GUI.Label(CreateRect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Colors will be automatically saved on closing options.", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Colors will be automatically saved on closing options.", Res.Label);
             DrawPosY += 20;
-            GUI.Label(CreateRect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Note: The colors in all edit graphs will be updated after the plugin restarts.", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Note: The colors in all edit graphs will be updated after the plugin restarts.", Res.Label);
 
             TypeColorsLength += 10;
             DrawPosY = 635;
         }
 
-
         private void DrawDefaultAssemblies()
         {
-            GUI.Label(CreateRect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Additional assemblies, that will be connected after script creation.", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Additional assemblies, that will be connected after script creation.", Res.Label);
             DrawPosY += 20;
-            GUI.Label(CreateRect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Note: more assemblies will increase time of generation of available nodes list.", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 7, DrawPosY, DrawRect.width - 20, 40), "Note: more assemblies will increase time of generation of available nodes list.", Res.Label);
             DrawPosY += 30;
 
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 100, 20), "Assemblies", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 100, 20), "Assemblies", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, Options.DefaultAssembliesToConnect.Count * 22 + 10), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, Options.DefaultAssembliesToConnect.Count * 22 + 10), "", Res.Box);
             DrawPosY += 5;
-            for (int i = 0; i< Options.DefaultAssembliesToConnect.Count; i++)
+            for (int i = 0; i < Options.DefaultAssembliesToConnect.Count; i++)
             {
-                //Options.DefaultAssembliesToConnect[i] = EditorGUI.TextField(CreateRect(DrawRect.x + 7, DrawPosY, DrawRect.width - 40, 20), Options.DefaultAssembliesToConnect[i]);
-      
-                var selIndex = AwailableAssemblies.ToList().IndexOf(Options.DefaultAssembliesToConnect[i]);
-                var resultSelected = EditorGUI.Popup(CreateRect(DrawRect.x + 10, DrawPosY, 300, 20), selIndex, AwailableAssemblies, Res.PopupButton);
-                if(selIndex != resultSelected)
+                //Options.DefaultAssembliesToConnect[i] = EditorGUI.TextField(new Rect(DrawRect.x + 7, DrawPosY, DrawRect.width - 40, 20), Options.DefaultAssembliesToConnect[i]);
+
+                var selIndex = Array.IndexOf(AwailableAssemblies, Options.DefaultAssembliesToConnect[i]);
+                var resultSelected = EditorGUI.Popup(new Rect(DrawRect.x + 10, DrawPosY, 300, 20), selIndex, AwailableAssemblies, Res.PopupButton);
+                if (selIndex != resultSelected)
                     Options.DefaultAssembliesToConnect[i] = AwailableAssemblies[resultSelected];
 
-                if (GUI.Button(CreateRect(DrawRect.x + 315, DrawPosY, 20, 20), "x", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawRect.x + 315, DrawPosY, 20, 20), "x", Res.ButtonSimple))
                 {
                     Options.DefaultAssembliesToConnect.RemoveAt(i);
                     break;
@@ -250,7 +240,7 @@
                 DrawPosY += 22;
             }
             DrawPosY += 10;
-            if (GUI.Button(CreateRect(DrawRect.x + 5, DrawPosY, 100, 20), "Add", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + 5, DrawPosY, 100, 20), "Add", Res.ButtonSimple))
             {
                 Options.DefaultAssembliesToConnect.Add("");
             }
@@ -258,13 +248,10 @@
             DrawPosY -= DrawRect.y;
         }
 
-
-
         private Vector2 TypeColorsScroll;
 
         private string NewColorname = "";
 
-
         private string[] SysNodeTypes = new string[0];
         private string[] DefNodeTypes = new string[0];
         private string SelectedSysNodeType = "";
@@ -273,12 +260,13 @@
         private int selectedDefIndex = -1;
         private ColorSaver SelectedSysSaver = null;
         private ColorSaver SelectedDefSaver = null;
+
         private void DrawLabelsColorOptions()
         {
             Options.RepaintNodes = true;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 120, 20), "Node Label Colors", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 120, 20), "Node Label Colors", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 80), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 80), "", Res.Box);
             DrawPosY += 5;
 
             if (SysNodeTypes.Length == 0)
@@ -290,13 +278,12 @@
                 SysNodeTypes = allNames.ToArray();
             }
 
-
             if (SelectedSysNodeType.Length > 0)
             {
                 // selectedSysIndex = SysNodeTypes.ToList().IndexOf(SelectedSysNodeType);
             }
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 100, 20), "System node type:", Res.Label);
-            var newSysIndex = EditorGUI.Popup(CreateRect(DrawRect.x + 120, DrawPosY, 100, 20), selectedSysIndex, SysNodeTypes, Res.PopupButton);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 100, 20), "System node type:", Res.Label);
+            var newSysIndex = EditorGUI.Popup(new Rect(DrawRect.x + 120, DrawPosY, 100, 20), selectedSysIndex, SysNodeTypes, Res.PopupButton);
 
             if (selectedSysIndex != newSysIndex)
             {
@@ -308,10 +295,10 @@
             if (SelectedSysSaver != null)
             {
                 Color sysColor = SelectedSysSaver.GetColor();
-                //sysColor = EditorGUI.ColorField(CreateRect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor);
+                //sysColor = EditorGUI.ColorField(new Rect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor);
                 //SelectedSysSaver.SetColor(sysColor);
 
-                DrawColorPicker(CreateRect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor, SelectedSysSaver, sysColor.a);
+                DrawColorPicker(new Rect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor, SelectedSysSaver, sysColor.a);
             }
 
             DrawPosY += 25;
@@ -323,13 +310,12 @@
                 DefNodeTypes = allNames.ToArray();
             }
 
-
             if (SelectedDefNodeType.Length > 0)
             {
-                selectedDefIndex = DefNodeTypes.ToList().IndexOf(SelectedDefNodeType);
+                selectedDefIndex = Array.IndexOf(DefNodeTypes, SelectedDefNodeType);
             }
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 100, 20), "Default node type:", Res.Label);
-            var newDefIndex = EditorGUI.Popup(CreateRect(DrawRect.x + 120, DrawPosY, 100, 20), selectedDefIndex, DefNodeTypes, Res.PopupButton);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 100, 20), "Default node type:", Res.Label);
+            var newDefIndex = EditorGUI.Popup(new Rect(DrawRect.x + 120, DrawPosY, 100, 20), selectedDefIndex, DefNodeTypes, Res.PopupButton);
 
             if (selectedDefIndex != newDefIndex)
             {
@@ -338,20 +324,18 @@
                 SelectedDefSaver = Options.GetColorSByName(SelectedDefNodeType);
             }
 
-
-
             if (SelectedDefSaver != null)
             {
                 Color sysColor = SelectedDefSaver.GetColor();
-                //sysColor = EditorGUI.ColorField(CreateRect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor);
+                //sysColor = EditorGUI.ColorField(new Rect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor);
                 //SelectedDefSaver.SetColor(sysColor);
 
-                DrawColorPicker(CreateRect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor, SelectedDefSaver, sysColor.a);
+                DrawColorPicker(new Rect(DrawRect.x + 230, DrawPosY, 40, 16), sysColor, SelectedDefSaver, sysColor.a);
             }
 
             DrawPosY += 27;
 
-            if (GUI.Button(CreateRect(DrawRect.x + 7, DrawPosY, 213, 20), "Reset all label colors to default", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + 7, DrawPosY, 213, 20), "Reset all label colors to default", Res.ButtonSimple))
             {
                 if (EditorUtility.DisplayDialog("Reset to default", "Do you reslly want to reset all label colors to default?", "Reset", "Cancel"))
                 {
@@ -361,7 +345,7 @@
 
             /*
             //DrawPosY += 25;
-            if (GUI.Button(CreateRect(DrawRect.x + (DrawRect.width - 110), DrawPosY, 100, 20), "Generate CFG", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + (DrawRect.width - 110), DrawPosY, 100, 20), "Generate CFG", Res.ButtonSimple))
             {
                 string code = "";
                 foreach (var color in Options.NodeLabelColors)
@@ -373,203 +357,171 @@
             }
             */
             DrawPosY += 25;
-
         }
 
-        private bool bHandleDeleteKey = false;
         private void DrawMainOptions()
         {
-
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 105, 20), "On plugin load", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 105, 20), "On plugin load", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
             //////////////////////
 
             bool openLast = Options.OpenLastScripts == 1;
             EditorGUI.BeginChangeCheck();
-            openLast = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 200, 20), openLast, Res.RadioButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Open last opened file on load", Res.Label);
+            openLast = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 200, 20), openLast, Res.RadioButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Open last opened file on load", Res.Label);
             if (openLast)
                 Options.OpenLastScripts = 1;
 
             DrawPosY += 20;
 
             bool openAll = Options.OpenLastScripts == 2;
-            openAll = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 200, 20), openAll, Res.RadioButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Open all last opened files on load", Res.Label);
+            openAll = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 200, 20), openAll, Res.RadioButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Open all last opened files on load", Res.Label);
             if (openAll)
                 Options.OpenLastScripts = 2;
 
             if (!openLast && !openAll)
                 Options.OpenLastScripts = 0;
 
-
             DrawPosY += 30;
 
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 45, 20), "Undo", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 45, 20), "Undo", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
             //////////////////////
 
-            Options.b_UndoEnabled = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_UndoEnabled, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Undo enabled", Res.Label);
+            Options.b_UndoEnabled = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_UndoEnabled, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Undo enabled", Res.Label);
             DrawPosY += 20;
 
             GUI.enabled = Options.b_UndoEnabled;
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Undo levels: ", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "Undo levels: ", Res.Label);
             float labelOffset = CalcStringPixelsX("Undo levels: ", Res.Label);
-            Options.UndoLevels = EditorGUI.IntField(CreateRect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 30, 16), Options.UndoLevels, Res.TextField);
+            Options.UndoLevels = EditorGUI.IntField(new Rect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 30, 16), Options.UndoLevels, Res.TextField);
             Options.UndoLevels = Mathf.Clamp(Options.UndoLevels, 1, 100);
-            GUI.Label(CreateRect(DrawRect.x + labelOffset + 50, DrawPosY, 200, 20), "(default: 30)", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + labelOffset + 50, DrawPosY, 200, 20), "(default: 30)", Res.Label);
             DrawPosY += 30;
             GUI.enabled = true;
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 75, 20), "Autosaves", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 75, 20), "Autosaves", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 65), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 65), "", Res.Box);
             //////////////////////
 
-            Options.b_EnableAutosaves = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_EnableAutosaves, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Enable autosaves", Res.Label);
+            Options.b_EnableAutosaves = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_EnableAutosaves, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Enable autosaves", Res.Label);
             DrawPosY += 20;
 
             GUI.enabled = Options.b_EnableAutosaves;
 
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Autosave delay (sec): ", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "Autosave delay (sec): ", Res.Label);
             labelOffset = CalcStringPixelsX("Autosave delay (sec): ", Res.Label);
-            Options.AutosaveDelay = EditorGUI.IntField(CreateRect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 40, 16), Options.AutosaveDelay, Res.TextField);
+            Options.AutosaveDelay = EditorGUI.IntField(new Rect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 40, 16), Options.AutosaveDelay, Res.TextField);
             Options.AutosaveDelay = Mathf.Clamp(Options.AutosaveDelay, 10, 10000);
-            GUI.Label(CreateRect(DrawRect.x + labelOffset + 60, DrawPosY, 200, 20), "(default: 300)", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + labelOffset + 60, DrawPosY, 200, 20), "(default: 300)", Res.Label);
             DrawPosY += 20;
 
-            Options.b_ZipAutosaves = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_ZipAutosaves, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Zip autosaves", Res.Label);
+            Options.b_ZipAutosaves = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_ZipAutosaves, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Zip autosaves", Res.Label);
             DrawPosY += 30;
 
             GUI.enabled = true;
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 105, 20), "Documentation", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 105, 20), "Documentation", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
             //////////////////////
 
-            Options.UseDocumentation = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.UseDocumentation, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Load documentation for nodes", Res.Label);
+            Options.UseDocumentation = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.UseDocumentation, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Load documentation for nodes", Res.Label);
             DrawPosY += 20;
 
             GUI.enabled = false;
-            Options.UseLocalDocumentation = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.UseLocalDocumentation, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Use local documentation (if access to external dll documentation is denied)", Res.Label);
+            Options.UseLocalDocumentation = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.UseLocalDocumentation, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Use local documentation (if access to external dll documentation is denied)", Res.Label);
             DrawPosY += 30;
             GUI.enabled = true;
 
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 75, 20), "Interface", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 75, 20), "Interface", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 165), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 165), "", Res.Box);
             //////////////////////
 
-            Options.bVarNodesLabelsAsVarType = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bVarNodesLabelsAsVarType, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Draw variable node label color as type color", Res.Label);
+            Options.bVarNodesLabelsAsVarType = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bVarNodesLabelsAsVarType, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Draw variable node label color as type color", Res.Label);
             DrawPosY += 20;
 
-
-            Options.HidePinWhenInitialisedByConstructor = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.HidePinWhenInitialisedByConstructor, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Hide in pin when initialised by constructor", Res.Label);
+            Options.HidePinWhenInitialisedByConstructor = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.HidePinWhenInitialisedByConstructor, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Hide in pin when initialised by constructor", Res.Label);
             DrawPosY += 20;
 
-            Options.b_HideElementsOnZoom = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_HideElementsOnZoom, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Hide edit graph elements on zoom-out", Res.Label);
+            Options.b_HideElementsOnZoom = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_HideElementsOnZoom, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Hide edit graph elements on zoom-out", Res.Label);
             DrawPosY += 20;
 
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "CPU Usage (on async searching items by filter):", Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "CPU Usage (on async searching items by filter):", Res.Label);
             //DrawPosY += 20;
-            var newpriority = EditorGUI.EnumPopup(CreateRect(DrawRect.x + 290, DrawPosY, 100, 20), Options.ThreadSearchPriority, Res.PopupButton);
+            var newpriority = EditorGUI.EnumPopup(new Rect(DrawRect.x + 290, DrawPosY, 100, 20), Options.ThreadSearchPriority, Res.PopupButton);
             Options.ThreadSearchPriority = (System.Threading.ThreadPriority)newpriority;
             DrawPosY += 20;
 
-            Options.b_SortDefaultNodes = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_SortDefaultNodes, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Sort the default nodes alphabetically", Res.Label);
-            DrawPosY += 20;
-
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Delete key (for MAC users):", Res.Label);
-            var deleteKey = EditorGUI.EnumPopup(CreateRect(DrawRect.x + 175, DrawPosY, 100, 20), Options.DeleteKey, Res.PopupButton);
-            Options.DeleteKey = (KeyCode)deleteKey;
-
-            string handleText = bHandleDeleteKey ? "Cancel handle" : "Press for handle pressed button";
-
-            if (GUI.Button(CreateRect(DrawRect.x + 280, DrawPosY, 230, 20), handleText, Res.ButtonSimple))
-            {
-                bHandleDeleteKey = !bHandleDeleteKey;
-            }
-            if(bHandleDeleteKey)
-            {
-                if (Event.current.isKey && Event.current.keyCode != KeyCode.None)
-                {
-                    bHandleDeleteKey = false;
-                    Options.DeleteKey = Event.current.keyCode;
-                    EditorOptions.Save();
-                }
-            }
+            Options.b_SortDefaultNodes = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_SortDefaultNodes, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Sort the default nodes alphabetically", Res.Label);
             DrawPosY += 20;
-
-            Options.bPreventHotkeysSpam = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bPreventHotkeysSpam, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Prevent hotkey spaming (CTRL+C/V) (for MAC users)", Res.Label);
+            
+            Options.b_SortMembers = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_SortMembers, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), new GUIContent( "Sort assembly members", "can make Nottorus slightly slower at initial load"), Res.Label);
+            DrawPosY += 20;
+            
+            Options.bPreventHotkeysSpam = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bPreventHotkeysSpam, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Prevent hotkey spaming (CTRL+C/V) (for MAC users)", Res.Label);
             DrawPosY += 20;
-            Options.bLoadDynamicAssemblies = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bLoadDynamicAssemblies, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Load Dynamic Assemblies (.NET 4.6 only) (can cause problem a lot of weird assemblies)", Res.Label);
+            Options.bLoadDynamicAssemblies = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bLoadDynamicAssemblies, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Load Dynamic Assemblies (.NET 4.6 only) (can cause problem a lot of weird assemblies)", Res.Label);
 
             DrawPosY += 30;
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 85, 20), "Compilation", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 85, 20), "Compilation", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 85), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 85), "", Res.Box);
             //////////////////////
 
-#if UNITY_EDITOR_OSX
-            GUI.Label(CreateRect(DrawRect.x + 250, DrawPosY, 400, 20), "(Not allowed in MAC OS)", Res.LabelStyle);
-            GUI.enabled = false;
-#endif
-            Options.b_UsePrecompiler = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_UsePrecompiler, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 400, 20), "Use precompiler (Recommended)", Res.Label);
-            DrawPosY += 20;
-            GUI.enabled = true;
-
-            Options.CompileEmptyStateMachineFunctions = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.CompileEmptyStateMachineFunctions, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Compile Empty State Machine events", Res.Label);
+            Options.CompileEmptyStateMachineFunctions = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.CompileEmptyStateMachineFunctions, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Compile Empty State Machine events", Res.Label);
             DrawPosY += 20;
 
-            Options.bShortTypeNameCompilation = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bShortTypeNameCompilation, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Compile short Type names (without namespace)(Recommended)", Res.Label);
+            Options.bShortTypeNameCompilation = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bShortTypeNameCompilation, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Compile short Type names (without namespace)(Recommended)", Res.Label);
             DrawPosY += 20;
 
             if (!Options.bShortTypeNameCompilation)
                 GUI.enabled = false;
-            Options.bShortTypeNameCompilation_ShowInfo = EditorGUI.Toggle(CreateRect(DrawRect.x + 30, DrawPosY + 3, 20, 20), Options.bShortTypeNameCompilation_ShowInfo, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 50, DrawPosY, 200, 20), "Show debug messages", Res.Label);
+            Options.bShortTypeNameCompilation_ShowInfo = EditorGUI.Toggle(new Rect(DrawRect.x + 30, DrawPosY + 3, 20, 20), Options.bShortTypeNameCompilation_ShowInfo, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 50, DrawPosY, 200, 20), "Show debug messages", Res.Label);
             GUI.enabled = true;
             DrawPosY += 30;
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 55, 20), "Debug", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 55, 20), "Debug", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 25), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 25), "", Res.Box);
             //////////////////////
-            Options.b_ShowDebug = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_ShowDebug, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Show debug messages", Res.Label);
+            Options.b_ShowDebug = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.b_ShowDebug, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Show debug messages", Res.Label);
             DrawPosY += 30;
 
             ///////////////////////////////////////////////////////////////////////////////////////////
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 55, 20), "Other", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 55, 20), "Other", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 65), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 65), "", Res.Box);
             //////////////////////
-            Options.bCustomNamePromotedVars = EditorGUI.Toggle(CreateRect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bCustomNamePromotedVars, Res.CheckBoxButton);
-            GUI.Label(CreateRect(DrawRect.x + 30, DrawPosY, 200, 20), "Custom name for promoted variables", Res.Label);
-          
+            Options.bCustomNamePromotedVars = EditorGUI.Toggle(new Rect(DrawRect.x + 10, DrawPosY + 3, 20, 20), Options.bCustomNamePromotedVars, Res.CheckBoxButton);
+            GUI.Label(new Rect(DrawRect.x + 30, DrawPosY, 200, 20), "Custom name for promoted variables", Res.Label);
 
-            if(GUI.Button(CreateRect(DrawRect.x + 270, DrawPosY + 3, 70, 16), "Reset", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.x + 270, DrawPosY + 3, 70, 16), "Reset", Res.ButtonSimple))
             {
                 Options.sCustomNameScriptPromotedVarAlias = "$pinname$_$pintype$_var";
                 Options.sCustomNameLocalPromotedVarAlias = "_$pinname$_$pintype$_var";
@@ -579,27 +531,27 @@
             DrawPosY += 20;
 
             labelOffset = CalcStringPixelsX("Public variables alias: ", Res.Label);
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Script variables alias:", Res.Label);
-            Options.sCustomNameScriptPromotedVarAlias = EditorGUI.TextField(CreateRect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 300, 16), Options.sCustomNameScriptPromotedVarAlias.Replace(" ", "").Replace("-", ""), Res.TextField);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "Script variables alias:", Res.Label);
+            Options.sCustomNameScriptPromotedVarAlias = EditorGUI.TextField(new Rect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 300, 16), Options.sCustomNameScriptPromotedVarAlias.Replace(" ", "").Replace("-", ""), Res.TextField);
             DrawPosY += 20;
 
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Local variables alias:", Res.Label);
-            Options.sCustomNameLocalPromotedVarAlias = EditorGUI.TextField(CreateRect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 300, 16), Options.sCustomNameLocalPromotedVarAlias.Replace(" ", "").Replace("-", ""), Res.TextField);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "Local variables alias:", Res.Label);
+            Options.sCustomNameLocalPromotedVarAlias = EditorGUI.TextField(new Rect(DrawRect.x + 15 + labelOffset, DrawPosY + 3, 300, 16), Options.sCustomNameLocalPromotedVarAlias.Replace(" ", "").Replace("-", ""), Res.TextField);
             GUI.enabled = true;
 
             DrawPosY += 30;
             ///////////////////////////////////////////////////////////////////////////////////////////
 
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, 55, 20), "Skins", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, 55, 20), "Skins", Res.Box);
             DrawPosY += 19;
-            GUI.Box(CreateRect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
+            GUI.Box(new Rect(DrawRect.x + 5, DrawPosY, Width - 10, 45), "", Res.Box);
             //////////////////////
 
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 500, 20), "Skins directory: " + Options.SkinsDirectory, Res.Label);
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 500, 20), "Skins directory: " + Options.SkinsDirectory, Res.Label);
 
             if (Options.SkinsDirectory.Length == 0)
             {
-                if (GUI.Button(CreateRect(DrawRect.x + 110, DrawPosY + 2, 210, 16), "Auto search skins dictionary", Res.ButtonSimple))
+                if (GUI.Button(new Rect(DrawRect.x + 110, DrawPosY + 2, 210, 16), "Auto search skins dictionary", Res.ButtonSimple))
                 {
                     SearchSkinsDir(Application.dataPath + "/");
                 }
@@ -608,7 +560,7 @@
             else
             {
                 DirectoryInfo dir = new DirectoryInfo(Options.SkinsDirectory);
-                
+
                 if (dir != null && dir.Exists)
                 {
                     skinNames = dir.GetDirectories().Select(x => x.Name).ToArray();
@@ -621,13 +573,11 @@
 
             DrawPosY += 20;
 
-            GUI.Label(CreateRect(DrawRect.x + 10, DrawPosY, 200, 20), "Editor skin:", Res.Label);
-            //DrawPosY += 20;
-
+            GUI.Label(new Rect(DrawRect.x + 10, DrawPosY, 200, 20), "Editor skin:", Res.Label);
+           
+            var index = Array.IndexOf(skinNames, Options.SkinName);
 
-            var index = skinNames.ToList().IndexOf(Options.SkinName);
-
-            index = EditorGUI.Popup(CreateRect(DrawRect.x + 80, DrawPosY + 2, 140, 20), index, skinNames, Res.PopupButton);
+            index = EditorGUI.Popup(new Rect(DrawRect.x + 80, DrawPosY + 2, 140, 20), index, skinNames, Res.PopupButton);
 
             if (Options.SkinName != skinNames[index])
             {
@@ -644,7 +594,6 @@
 
             /////////////////////////////////////////////////////////////////////////////////////////
 
-
             if (EditorGUI.EndChangeCheck())
             {
                 EditorOptions.Save();
@@ -670,7 +619,6 @@
                 if (SearchSkinsDir(path + di.Name + "/"))
                     return true;
             }
-
         }
         else
         {
@@ -678,7 +626,4 @@
         }
         return false;
     }
-
-
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_OutObjectDropWindow.cs Editor/m_OutObjectDropWindow.cs
--- .Editor/m_OutObjectDropWindow.cs	2018-06-30 08:59:18.592637000 +0700
+++ Editor/m_OutObjectDropWindow.cs	2018-06-30 09:02:03.861521700 +0700
@@ -1,13 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static OutObjectDropWindow DropWindowMenu = new OutObjectDropWindow();
@@ -26,6 +20,7 @@
         {
             b_Active = false;
         }
+
         public void Show(Vector2 Pos, UnityEngine.Object[] droppedObjects)
         {
             if (droppedObjects == null || droppedObjects.Length == 0 || DragScriptObj)
@@ -46,13 +41,14 @@
 
         //private const float Height = 600;
         private const float Width = 400;
-        public Rect DrawRect = CreateRect(0, 0, 0, 0);
+
+        public Rect DrawRect = new Rect(0, 0, 0, 0);
 
         public void Draw()
         {
             if (b_Active)
             {
-                DrawRect = CreateRect(WindowPos.x, WindowPos.y, Width, DrawPosY);
+                DrawRect = new Rect(WindowPos.x, WindowPos.y, Width, DrawPosY);
 
                 GUI.Window(11, DrawRect, DropWindowFunction, "", Res.EmptyStyle);
 
@@ -60,7 +56,6 @@
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(GlobalMousePos))
@@ -70,13 +65,15 @@
                 }
             }
         }
+
         private float DrawPosY = 0;
+
         void DropWindowFunction(int windowID)
         {
             GUI.BringWindowToFront(windowID);
             GUI.FocusWindow(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
 
             DrawPosY = 10;
 
@@ -87,7 +84,7 @@
             if (DragObjType == typeof(MonoScript))
             {
                 MonoScript script = DroppedObject as MonoScript;
-                if(script.GetClass() != null)
+                if (script.GetClass() != null)
                     DragObjType = script.GetClass();
             }
             else if (DragObjType == typeof(GameObject))
@@ -95,32 +92,29 @@
                 GO = DroppedObject as GameObject;
             }
 
-
             var droppedObjName = DroppedObject.name;
 
-
             var droppedTypeName = DragObjType.Name;
 
-            GUI.Label(CreateRect(10, DrawPosY, Width - 20, 30), droppedObjName + " (" + droppedTypeName + ")", Res.BigWindowLabel);
+            GUI.Label(new Rect(10, DrawPosY, Width - 20, 30), droppedObjName + " (" + droppedTypeName + ")", Res.BigWindowLabel);
             DrawPosY += 20;
 
-
-            GUI.Label(CreateRect(10, DrawPosY, Width - 20, 30), "Create variable:", Res.BigWindowLabel);
+            GUI.Label(new Rect(10, DrawPosY, Width - 20, 30), "Create variable:", Res.BigWindowLabel);
             DrawPosY += 30;
 
-            ScriptVar = EditorGUI.Toggle(CreateRect(10, DrawPosY - 3, 20, 20), ScriptVar);
-            GUI.Label(CreateRect(35, DrawPosY, Width - 20, 20), "Class variable", Res.NodePinLabel);
+            ScriptVar = EditorGUI.Toggle(new Rect(10, DrawPosY - 3, 20, 20), ScriptVar);
+            GUI.Label(new Rect(35, DrawPosY, Width - 20, 20), "Class variable", Res.NodePinLabel);
 
-            if(ScriptVar)
+            if (ScriptVar)
             {
                 DrawPosY += 20;
-                PublicVar = EditorGUI.Toggle(CreateRect(10, DrawPosY - 3, 20, 20), PublicVar);
-                GUI.Label(CreateRect(35, DrawPosY, Width - 20, 20), "Public variable", Res.NodePinLabel);
+                PublicVar = EditorGUI.Toggle(new Rect(10, DrawPosY - 3, 20, 20), PublicVar);
+                GUI.Label(new Rect(35, DrawPosY, Width - 20, 20), "Public variable", Res.NodePinLabel);
             }
 
             DrawPosY += 25;
 
-            if (GUI.Button(CreateRect(5, DrawPosY, 390, 20), droppedTypeName + "     ID: " + DroppedObject.GetInstanceID(), Res.ButtonSimple))
+            if (GUI.Button(new Rect(5, DrawPosY, 390, 20), droppedTypeName + "     ID: " + DroppedObject.GetInstanceID(), Res.ButtonSimple))
             {
                 AddVarAndNode(droppedTypeName + "_" + droppedObjName, DragObjType);
                 Close();
@@ -133,14 +127,14 @@
 
                 if (MBComps.Length > 0)
                 {
-                    GUI.Label(CreateRect(10, DrawPosY, Width - 20, 20), "Components:", Res.NodePinLabel);
+                    GUI.Label(new Rect(10, DrawPosY, Width - 20, 20), "Components:", Res.NodePinLabel);
                     DrawPosY += 20;
 
                     foreach (Component comp in MBComps)
                     {
                         Type compType = comp.GetType();
 
-                        if (GUI.Button(CreateRect(5, DrawPosY, 390, 20), compType.Name + "     ID: "  + comp.GetInstanceID(), Res.ButtonSimple))//, Res.NormalStyle
+                        if (GUI.Button(new Rect(5, DrawPosY, 390, 20), compType.Name + "     ID: " + comp.GetInstanceID(), Res.ButtonSimple))//, Res.NormalStyle
                         {
                             AddVarAndNode(compType.Name + "_" + droppedObjName, compType);
                             Close();
@@ -148,7 +142,7 @@
                         DrawPosY += 20;
                     }
                 }
-            }           
+            }
         }
 
         private void AddVarAndNode(string name, Type type)
@@ -159,7 +153,7 @@
             {
                 ScriptClassVariable newVar = new ScriptClassVariable(name, type, true);
 
-                if(PublicVar)
+                if (PublicVar)
                 {
                     newVar.m_AccessLevel = 2;
                 }
@@ -184,4 +178,4 @@
                 CurDrawable.Nodes.Add(addNode);
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Parser.cs Editor/m_Parser.cs
--- .Editor/m_Parser.cs	2018-06-30 08:59:18.699664700 +0700
+++ Editor/m_Parser.cs	2018-06-30 09:02:03.863520500 +0700
@@ -1,20 +1,19 @@
-﻿using UnityEditor;
+﻿using Addon_CSP;
+using Addon_CSP.Collections;
+using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
-using Addon_CSP;
-using Addon_CSP.Collections;
+using System.Reflection;
 using System.Text;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     /////////////////////////////////////////////////////////////////////////
     private List<TypeNameHolder> TypeHolders = new List<TypeNameHolder>();
+
     private class TypeNameHolder
     {
         public string TypeQName = "";
@@ -54,7 +53,6 @@
             Type tryFindType = null;
             AllParsedTypes.TryGetValue(endName, out tryFindType);
 
-
             if (tryFindType == null)
             {
                 string[] namePart = endName.Split("."[0]);
@@ -70,13 +68,11 @@
                 {
                     List<IdentExpressionPart> partName = new List<IdentExpressionPart>();
 
-
                     for (int i = 0; i < namePart.Length; i++)
                     {
                         partName.Add(new IdentExpressionPart(namePart[i]));
                     }
 
-
                     FullNameAssemblyFind_Obj = GetNextIdent_InRefs(partName, FullNameAssemblyFind_Ident, 0, null);
 
                     if (FullNameAssemblyFind_Obj != null && FullNameAssemblyFind_Obj is IdentifierObject)
@@ -100,9 +96,8 @@
             return GetTypeByEnds(endName);
     }
 
+    private Dictionary<string, Type> PreparsedTypesOptimize = new Dictionary<string, Type>();
 
-
-    private Dictionary<string, Type> PreparsedTypesOptimize = new Dictionary<string, Type>(); 
     private Type GetTypeFromIType(IType type)
     {
         Type defType = null;
@@ -145,7 +140,7 @@
                         }
                         else
                         {
-                            if(Options.b_ShowDebug)Debug.Log("Allready thrown exception: Can't find generic type argument: " + typeName);
+                            if (Options.b_ShowDebug) Debug.Log("Allready thrown exception: Can't find generic type argument: " + typeName);
                         }
                     }
 
@@ -153,7 +148,7 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find generic type defenition: " + typeName);
+                    if (Options.b_ShowDebug) Debug.Log("Can't find generic type defenition: " + typeName);
                 }
             }
             else
@@ -169,15 +164,14 @@
                 {
                     identExpr = typeNode.Identifier.Expressions.Last as IdentifierExpression;
 
-                    if(identExpr != null)     
+                    if (identExpr != null)
                         testType = GetTypeByEnds(RenameNameStringToType(identExpr.Identifier));
-
                 }
             }
 
             if (testType != null)
             {
-                if(identExpr != null)
+                if (identExpr != null)
                 {
                     testType = MakeTypeArray(testType, identExpr.RankSpecifiers);
                 }
@@ -195,16 +189,13 @@
                     }
                 }
 
-               
-
                 defType = testType;
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find type: " + typeNode.Identifier.QualifiedIdentifier);
+                if (Options.b_ShowDebug) Debug.Log("Can't find type: " + typeNode.Identifier.QualifiedIdentifier);
             }
 
-
             if (!PreparsedTypesOptimize.ContainsKey(testType.Name))
                 PreparsedTypesOptimize.Add(testType.Name, testType);
 
@@ -213,10 +204,9 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("iType is not defined: " + type.GetType());
+            if (Options.b_ShowDebug) Debug.Log("iType is not defined: " + type.GetType());
         }
 
-
         return defType;
     }
 
@@ -245,16 +235,19 @@
         if (newAsm == null)
         {
             //if (asmName != "System.Collections.Generic" && asmName != "System.Collections")
-            if(Options.b_ShowDebug)Debug.Log("Can't load assembly: " + asmName);
+            if (Options.b_ShowDebug) Debug.Log("Can't load assembly: " + asmName);
         }
         else
         {
             SetUsedAssembly(newAsm.GetName().Name, true, false, false, CurScript);
-            newAsm.GetTypes().ToList().ForEach(x => TypeHolders.Add(new TypeNameHolder(x)));
+            foreach (var asm in newAsm.GetTypes())
+            {
+                TypeHolders.Add(new TypeNameHolder(asm));
+            }
         }
     }
-    /////////////////////////////////////////////////////////////////////////
 
+    /////////////////////////////////////////////////////////////////////////
 
     private static List<NodeGenPins> DefaultNodes_All;
 
@@ -265,18 +258,15 @@
         if (string.IsNullOrEmpty(FileName))
             return;
 
-        if(!FileName.Contains(Application.dataPath))
+        if (!FileName.Contains(Application.dataPath))
         {
             BConsole.EditorLog("The selected file for parsing must be inside the project!", 2);
             return;
         }
 
-
         ParseFile(FileName);
     }
 
-
-
     public void ParseFile(string FileName, bool dontCreate = false)
     {
         UndoSystem.DisableUndo = true;
@@ -284,14 +274,12 @@
         PreparsedTypesOptimize = new Dictionary<string, Type>();
         DelegateReturnParsing = false;
 
-
         AssembliesTypeRefs = new Dictionary<string, IdentifierObject>();
         GenericClassParameterTypes = new Dictionary<string, Type>();
         GenericMethodParameterTypes = new Dictionary<string, Type>();
         TypeHolders = new List<TypeNameHolder>();
         InitAsemblyRefs();
 
-
         DefaultNodes_All = new List<NodeGenPins>();
 
         DefaultNodes_All.AddRange(GetDefaultNodes_FlowControl());
@@ -305,13 +293,13 @@
             return;
         }
 
-
         //if(Options.b_ShowDebug)Debug.Log(typeof(List<>).AssemblyQualifiedName);
 
-        var newScript = new ScriptData();
-
-        newScript.ScriptType = ScriptType.ParsedScript;
-        newScript.ScriptFileName = FileName.Replace(".cs", "").Replace(ApplicationDataPath + "/", "Assets/");
+        var newScript = new ScriptData
+        {
+            ScriptType = ScriptType.ParsedScript,
+            ScriptFileName = FileName.Replace(".cs", "").Replace(ApplicationDataPath + "/", "Assets/")
+        };
 
         if (dontCreate)
         {
@@ -324,7 +312,6 @@
         }
         CurScript = newScript;
 
-
         CurScript.Classes = new List<ScriptClass>();
 
         //TODO: Check is editorscript
@@ -353,7 +340,6 @@
         NewNode_Window.FilterBase();
     }
 
-
     private void ParseNamespace(ScriptData newScript, NamespaceNode NS, CompilationUnitNode CompileResult)
     {
         foreach (var directive in NS.UsingDirectives)
@@ -366,11 +352,9 @@
             ProcessAssemblyForHolders(asmName);
         }
 
-
         CurScript.CurrentClass = -1;
 
-
-        ParseClasses(NS.Classes.ToList(), null);
+        ParseClasses(NS.Classes, null);
         var classStructs = NS.Structs.ConvertAll<ClassNode>(ConvertStruct);
         ParseClasses(classStructs, null);
 
@@ -384,7 +368,6 @@
         return strNode;
     }
 
-
     /////////////////////////////////////////////////////////////////////////////////////////////
     private void ParseEnums(NodeCollection<EnumNode> Enums)
     {
@@ -394,7 +377,6 @@
 
             NodeCollection<EnumNode> coll = Enum.Value as NodeCollection<EnumNode>;
 
-
             foreach (var enumLine in coll)
             {
                 EnumNode enumVal = enumLine as EnumNode;
@@ -405,10 +387,10 @@
 
                     newEnum.EnumValues.Add(enumv);
                     enumv.Value = enumVal.Name.Identifier;
-          
+
                     if (enumVal.Value != null)
                     {
-                        if(enumVal.Value is IntegralPrimitive)
+                        if (enumVal.Value is IntegralPrimitive)
                         {
                             IntegralPrimitive value = (IntegralPrimitive)enumVal.Value;
                             enumv.Num = (int)value.Value;
@@ -421,8 +403,8 @@
 
                             valExpr.ToSource(sb);
 
-                            enumv.CustomValue =  sb.ToString();
-                        }           
+                            enumv.CustomValue = sb.ToString();
+                        }
                     }
                 }
             }
@@ -439,7 +421,6 @@
             {
                 ParseSetupAttribute(Enum.Attributes, newEnum);
             }
-
         }
     }
 
@@ -469,10 +450,9 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find type for delegate argument. Set bool for default");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find type for delegate argument. Set bool for default");
                     newParam.ArgType.SetVarType(typeof(bool));
                 }
-
             }
 
             if (deleg.Attributes.Count > 0)
@@ -488,78 +468,69 @@
         {
             var newInterface = _CreateInterface(interf.Name.Identifier);
 
-            foreach(var method in interf.Methods)
+            foreach (var method in interf.Methods)
             {
                 var newMethod = new ScriptClassInterface.SCInterface_Method(method.Names[0].QualifiedIdentifier);
                 newInterface.InterfMethods.Add(newMethod);
 
-                foreach(var mParam in method.Params)
+                foreach (var mParam in method.Params)
                 {
                     Type paramType = GetTypeFromIType(mParam.Type);
                     if (paramType == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't parse type of interface method: " + newMethod.MethName + " argument: " + mParam.Name + ". Set default type 'int'.");
+                        if (Options.b_ShowDebug) Debug.Log("Can't parse type of interface method: " + newMethod.MethName + " argument: " + mParam.Name + ". Set default type 'int'.");
                         paramType = typeof(int);
                     }
 
                     newMethod.ArgumentPins.Add(new Node_Pin(paramType, mParam.Name, PinTypeE.PinIn, 0));
                 }
 
-
-                if(method.Type != null)
+                if (method.Type != null)
                 {
                     Type paramType = GetTypeFromIType(method.Type);
                     if (paramType == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't parse return type of interface method: " + newMethod.MethName + ". Set default type 'int'.");
+                        if (Options.b_ShowDebug) Debug.Log("Can't parse return type of interface method: " + newMethod.MethName + ". Set default type 'int'.");
                         paramType = typeof(int);
                     }
 
-                    if(paramType != typeof(void))
+                    if (paramType != typeof(void))
                         newMethod.OutPinType = new BType(paramType);
                 }
-
-                
             }
 
             foreach (var prop in interf.Properties)
             {
                 var newProp = new ScriptClassInterface.SCInterface_Property();
 
-           
-
                 string propName = prop.Names[0].QualifiedIdentifier;
 
                 Type paramType = GetTypeFromIType(prop.Type);
                 if (paramType == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't parse type of interface property: " + propName + ". Set default type 'int'.");
+                    if (Options.b_ShowDebug) Debug.Log("Can't parse type of interface property: " + propName + ". Set default type 'int'.");
                     paramType = typeof(int);
                 }
 
                 newProp.PropName = propName;
                 newProp.PropType = new BType(paramType);
 
-
                 newInterface.InterfProperties.Add(newProp);
-
             }
 
             if (interf.Attributes.Count > 0)
             {
                 ParseSetupAttribute(interf.Attributes, newInterface);
             }
-
         }
     }
 
-
     private Dictionary<string, Type> GenericClassParameterTypes = new Dictionary<string, Type>();
     private Dictionary<string, Type> GenericMethodParameterTypes = new Dictionary<string, Type>();
 
     private Type GetUniqGenTypeParam()
     {
-        foreach(var type in GenericClassTypes)
+        foreach (var type in GenericClassTypes)
         {
             if (!GenericClassParameterTypes.ContainsValue(type) && !GenericMethodParameterTypes.ContainsValue(type))
                 return type;
@@ -567,13 +538,13 @@
         Debug.Log("Can't find free generic type parameter for generic class/method.");
         return null;
     }
+
     /////////////////////////////////////////////////////////////////////////////////////////////
     private void ParseClasses(List<ClassNode> classes, ScriptClass ownerClass)
     {
         foreach (var cl in classes)
         {
             GenericClassParameterTypes = new Dictionary<string, Type>();
-     
 
             PreparsedFunctions = new List<PreparsedMethod>();
             PreparsedProperties = new List<PreparsedProperty>();
@@ -581,7 +552,6 @@
 
             ParseDelegates(cl.Delegates);
             ParseInterfaces(cl.Interfaces);
-         
 
             CurScript.CurrentClass++;
             ScriptClass newClass = new ScriptClass(cl.Name.Identifier);
@@ -664,12 +634,11 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find inherited class: " + baseType.Identifier.QualifiedIdentifier);
+                    if (Options.b_ShowDebug) Debug.Log("Can't find inherited class: " + baseType.Identifier.QualifiedIdentifier);
                 }
             }
             ParseClassFields(cl.Fields.Select(x => x as MemberNode).ToList(), newClass, false);
 
-
             var cList = cl.Constants.Select(x => x as MemberNode).ToList();
 
             /*
@@ -699,7 +668,7 @@
 
             ParseClasses(cl.Classes, newClass);
 
-            var classStructs = cl.Structs.ConvertAll<ClassNode>(ConvertStruct);
+            var classStructs = cl.Structs.ConvertAll(ConvertStruct);
 
             ParseEnums(cl.Enums);
 
@@ -707,7 +676,6 @@
 
             GenericClassParameterTypes = new Dictionary<string, Type>();
         }
-
     }
 
     private void ParseSetupAttribute(NodeCollection<AttributeNode> attrList, BaseScriptObject bso)
@@ -740,20 +708,20 @@
 
                                 if (atrTParam != null)
                                 {
-                                    atrTParam.AttribTempVar = new TempVarHolder();
-                                    atrTParam.AttribTempVar.TempVarPrimitive = PrimitiveConv;
+                                    atrTParam.AttribTempVar = new TempVarHolder
+                                    {
+                                        TempVarPrimitive = PrimitiveConv
+                                    };
                                 }
                             }
                         }
                     }
-
                 }
                 else
                 if (Options.b_ShowDebug) Debug.Log("Can't find attribute: " + attribName);
-
             }
 
-            bso.AttributeDrawers.Add(newAttr);      
+            bso.AttributeDrawers.Add(newAttr);
         }
     }
 
@@ -776,7 +744,6 @@
             defSpawnPosY = 1;
             NextNodeConnId = 0;
 
-
             var modif = constr.Modifiers;
 
             if ((modif & Modifier.Public) == Modifier.Public)
@@ -793,7 +760,7 @@
                 var param = constr.Params[i];
                 Type paramType = GetTypeFromIType(param.Type);
 
-                var pinType = paramType == null ? typeof(UndefinedType) : paramType;
+                var pinType = paramType ?? typeof(UndefinedType);
 
                 var newPin = new Node_Pin(pinType, param.Name, PinTypeE.PinIn, newConstr.Config.UniqInPinID);
 
@@ -806,7 +773,6 @@
                     newPin.IsOut = true;
                 }
 
-
                 newConstr.Config.InPins.Add(newPin);
 
                 LocalIdentifiedObjects.Add(new IdentifierObject(param.Name, LastNode, pinType, i));
@@ -828,7 +794,6 @@
                         }
                     }
 
-
                     int pinNum = 0;
                     foreach (var erg in constr.ThisBaseArgs)
                     {
@@ -839,14 +804,14 @@
                             if (pinNum < execContr.Config.InPins.Count)
                                 execContr.Config.InPins[pinNum].TempVar_TempVarHolder.TempVarPrimitive = pExprResult.PrimitiveData;
                             else
-                                if(Options.b_ShowDebug)Debug.Log("Try to assign temp value to pin, but it doesn't exist. NodeId: " + execContr.NodeID + ", pin: " + pinNum);
+                                if (Options.b_ShowDebug) Debug.Log("Try to assign temp value to pin, but it doesn't exist. NodeId: " + execContr.NodeID + ", pin: " + pinNum);
                         }
                         pinNum++;
                     }
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find 'Exec constructor' node..");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find 'Exec constructor' node..");
                 }
             }
 
@@ -863,12 +828,8 @@
         }
     }
 
-
-
-
     /////////////////////////////////////////////////////////////////////////////////////////////
 
-
     private void ParseIdentifiers()
     {
         foreach (var field in CurClass.ClassVariables)
@@ -898,34 +859,28 @@
         }
     }
 
-    private StringBuilder SB = new StringBuilder();
-
+    // private StringBuilder SB = new StringBuilder();
 
     private class Var { }
 
-
-
     /////////////////////////////////////////////////////////////////////////////////////////////
 
     private BaseScriptObject OwnerDrawer;
 
     private Vector2 StartSpawnNodesPosOffset;
 
-
     private int defSpawnPosX = 0;
     private int defSpawnPosY = 0;
 
-
     private Node LastNode;
     private int NextNodeConnId = 0;
 
-
     /////////////////////////////////////////////////////////////////////////////////////////////
     private List<PreparsedMethod> PreparsedFunctions = new List<PreparsedMethod>();
+
     private List<PreparsedProperty> PreparsedProperties = new List<PreparsedProperty>();
     private List<PreparsedIndexer> PreparsedIndexers = new List<PreparsedIndexer>();
 
-
     private void PreParseClassProperties(NodeCollection<PropertyNode> properties, ScriptClass cl)
     {
         PreparsedProperties = new List<PreparsedProperty>();
@@ -938,7 +893,6 @@
             if (newProp == null)
                 newProp = _CreateProperty(propName, false, false, true, true, cl.ScriptProperties, true);
 
-
             Type propType = GetTypeFromIType(property.Type);
 
             if (propType != null)
@@ -947,18 +901,14 @@
             {
                 propType = typeof(bool);
                 newProp.ChangeVarType(propType);
-                if(Options.b_ShowDebug)Debug.Log("Can't define property type: " + newProp.Config.Name + " set to default (bool)");
+                if (Options.b_ShowDebug) Debug.Log("Can't define property type: " + newProp.Config.Name + " set to default (bool)");
             }
 
-
             if (property.Attributes.Count > 0)
             {
                 ParseSetupAttribute(property.Attributes, newProp);
             }
 
-
-
-
             PreparsedProperties.Add(new PreparsedProperty(propName, newProp, property));
         }
     }
@@ -1041,7 +991,7 @@
 
                 Type paramType = GetTypeFromIType(param.Type);
 
-                var pinType = paramType == null ? typeof(UndefinedType) : paramType;
+                var pinType = paramType ?? typeof(UndefinedType);
 
                 Node_Pin newPin = newMethod.Config.InPins.Find(x => x.PinName == param.Name);
                 if (newPin == null)
@@ -1063,9 +1013,9 @@
 
             Type methodRetType = GetTypeFromIType(method.Type);
 
-            if(methodRetType != typeof(void))
+            if (methodRetType != typeof(void))
             {
-                if(newMethod.Config.OutPinsNoDeleg.Count == 0)
+                if (newMethod.Config.OutPinsNoDeleg.Count == 0)
                 {
                     newMethod.Config.OutPins.Add(new Node_Pin(methodRetType, "result", PinTypeE.PinOut, newMethod.Config.UniqOutPinID));
                 }
@@ -1081,9 +1031,6 @@
                 node.UpdateConfig(true);
             }
 
-
-
-
             PreparsedFunctions.Add(new PreparsedMethod(methodName, newMethod, method));
             GenericMethodParameterTypes = new Dictionary<string, Type>();
         }
@@ -1096,7 +1043,6 @@
         {
             var newProp = _CreateIndexer();
 
-
             Type propType = GetTypeFromIType(indexer.Type);
 
             if (propType != null)
@@ -1105,7 +1051,7 @@
             {
                 propType = typeof(bool);
                 newProp.ChangeVarType(propType);
-                if(Options.b_ShowDebug)Debug.Log("Can't define property type: " + newProp.Config.Name + " set to default (bool)");
+                if (Options.b_ShowDebug) Debug.Log("Can't define property type: " + newProp.Config.Name + " set to default (bool)");
             }
 
             newProp.PropertyIndexParameters = new List<ArgumentDrawer>();
@@ -1117,7 +1063,7 @@
 
                 if (paramType == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't define parameter type of indexer. Set default type: int");
+                    if (Options.b_ShowDebug) Debug.Log("Can't define parameter type of indexer. Set default type: int");
                     paramType = typeof(int);
                 }
 
@@ -1134,29 +1080,26 @@
             PreparsedIndexers.Add(new PreparsedIndexer(newProp, indexer));
         }
     }
+
     /////////////////////////////////////////////////////////////////////////////////////////////
     private void ParseClassMethods()
     {
-
         foreach (PreparsedMethod method in PreparsedFunctions)
         {
             LocalIdentifiedObjects = new List<IdentifierObject>();
             OwnerDrawer = method.Function;
             CurDrawable = method.Function;
 
-
             LastNode = method.Function.Nodes[0];
             StartSpawnNodesPosOffset = LastNode.NodeRect.position;
 
-            foreach(var inParam in method.Function.Config.InPins)
+            foreach (var inParam in method.Function.Config.InPins)
                 LocalIdentifiedObjects.Add(new IdentifierObject(inParam.PinName, LastNode, inParam.type.PType, inParam.PinID));
 
-
             defSpawnPosX = 1;
             defSpawnPosY = 1;
             NextNodeConnId = 0;
 
-
             foreach (var statement in method.MethNode.StatementBlock.Statements)
             {
                 ParseStatement(statement, defSpawnPosX + 1, LastNode.NodeID, NextNodeConnId);
@@ -1174,7 +1117,6 @@
             }
             CurDrawable.NodePinsLinks = linksLinkInfos.Values.ToList();
 
-
             linksLinkInfos = new Dictionary<string, LinkInfo>();
             foreach (var link in CurDrawable.NodeConnectorsLinks)
             {
@@ -1188,8 +1130,6 @@
 
             CurDrawable.NodeConnectorsLinks = linksLinkInfos.Values.ToList();
         }
-
-
     }
 
     private void ParseProperties()
@@ -1204,8 +1144,6 @@
                 CurClass.CurrentDrawable.ID = prop.Property.PropertyID;
                 CurClass.CurrentDrawable.DrawType = DrawableType.PropertyGet;
 
-
-
                 LastNode = OwnerDrawer.Nodes[0];
                 StartSpawnNodesPosOffset = LastNode.NodeRect.position;
                 defSpawnPosX = 1;
@@ -1264,7 +1202,6 @@
             {
                 prop.Property._Set = false;
             }
-
         }
     }
 
@@ -1272,9 +1209,6 @@
     {
         foreach (var indexer in PreparsedIndexers)
         {
-          
-
-
             if (indexer.PropertyNode.Getter != null)
             {
                 OwnerDrawer = indexer.Property.Drawable_Get;
@@ -1282,8 +1216,6 @@
                 CurClass.CurrentDrawable.ID = indexer.Property.PropertyID;
                 CurClass.CurrentDrawable.DrawType = DrawableType.PropertyGet;
 
-
-
                 LastNode = OwnerDrawer.Nodes[0];
                 StartSpawnNodesPosOffset = LastNode.NodeRect.position;
                 defSpawnPosX = 1;
@@ -1332,7 +1264,6 @@
                     pinIndex++;
                 }
 
-
                 LocalIdentifiedObjects.Add(new IdentifierObject("value", LastNode, indexer.Property.Config.NodeRefType.PType, 0));
 
                 foreach (var statement in indexer.PropertyNode.Setter.StatementBlock.Statements)
@@ -1349,7 +1280,6 @@
                     node.UpdateConfig(true);
                 }
             }
-
         }
     }
 
@@ -1366,11 +1296,10 @@
 
                 Type defType = GetTypeFromIType(field.Type);
 
-                defType = defType == null ? typeof(object) : defType;
+                defType = defType ?? typeof(object);
 
                 newField.InitVar(fieldName, defType, false);
 
-
                 var modif = field.Modifiers;
                 if ((modif & Modifier.Private) == Modifier.Private)
                 {
@@ -1392,7 +1321,6 @@
                     newField.m_AccessLevel = 4;
                 }
 
-
                 if ((modif & Modifier.ConstantMods) == Modifier.ConstantMods)
                 {
                     newField.m_StaticConst = 2;
@@ -1402,7 +1330,7 @@
                     newField.m_StaticConst = 1;
                 }
 
-                if(isStatic)
+                if (isStatic)
                     newField.m_StaticConst = 1;
 
                 if (field.Attributes.Count > 0)
@@ -1427,7 +1355,6 @@
                     {
                         ObjectCreationExpression OC_expr = field.Value as ObjectCreationExpression;
 
-
                         int wantedConstrlength = OC_expr.ArgumentList.Count;
 
                         var allContructors = defType.GetConstructors();
@@ -1444,8 +1371,7 @@
                                 if (Options.b_ShowDebug) Debug.Log("More than one contructor mach case: " + contructorCaseCount.Count + " in type: " + defType + " . Selecting first");
                             }
 
-                            newField.TempVar.ConstructorNum = allContructors.ToList().IndexOf(contructorCaseCount[0]);
-
+                            newField.TempVar.ConstructorNum = Array.IndexOf(allContructors, contructorCaseCount[0]);
 
                             newField.TempVar.ConstructorTempVars = new TempVarHolder[OC_expr.ArgumentList.Count];
 
@@ -1455,8 +1381,10 @@
                                 var argument = OC_expr.ArgumentList[i];
 
                                 var argumentExpression = argument.Expression;
-                                newField.TempVar.ConstructorTempVars[i] = new TempVarHolder();
-                                newField.TempVar.ConstructorTempVars[i]._BTypeType = new BType(constrParams[i].ParameterType);
+                                newField.TempVar.ConstructorTempVars[i] = new TempVarHolder
+                                {
+                                    _BTypeType = new BType(constrParams[i].ParameterType)
+                                };
                                 //newField.TempVar.ConstructorTempVars[i].PinID = i;
 
                                 if (GetPrimitiveFromExpr(argumentExpression, false, 0))
@@ -1482,11 +1410,10 @@
 
                 Type defType = GetTypeFromIType(evnt.Type);
 
-                defType = defType == null ? typeof(EventHandler) : defType;
+                defType = defType ?? typeof(EventHandler);
 
                 newEvent.InitVar(eventName, defType, false);
 
-
                 var modif = evnt.Modifiers;
                 if ((modif & Modifier.Private) == Modifier.Private)
                 {
@@ -1532,7 +1459,6 @@
                     {
                         ObjectCreationExpression OC_expr = evnt.Value as ObjectCreationExpression;
 
-
                         int wantedConstrlength = OC_expr.ArgumentList.Count;
 
                         var allContructors = defType.GetConstructors();
@@ -1551,7 +1477,6 @@
 
                             newEvent.TempVar.ConstructorNum = allContructors.ToList().IndexOf(contructorCaseCount[0]);
 
-
                             newEvent.TempVar.ConstructorTempVars = new TempVarHolder[OC_expr.ArgumentList.Count];
 
                             for (int i = 0; i < OC_expr.ArgumentList.Count; i++)
@@ -1568,9 +1493,6 @@
                             }
                         }
 
-
-
-
                         //TODO: Parse params
                     }
                 }
@@ -1587,6 +1509,7 @@
             this.Function = Function;
             this.MethNode = MethNode;
         }
+
         public string FunctionName;
         public ScriptFunction Function;
         public MethodNode MethNode;
@@ -1600,6 +1523,7 @@
             this.Property = Property;
             this.PropertyNode = PropertyNode;
         }
+
         public string FunctionName;
         public ScriptProperty Property;
         public PropertyNode PropertyNode;
@@ -1612,6 +1536,7 @@
             this.Property = indexer;
             this.PropertyNode = indexerNode;
         }
+
         public ScriptProperty Property;
         public IndexerNode PropertyNode;
     }
@@ -1629,21 +1554,15 @@
 
             var refData = ParseExpression(ifS.Test, spawnPosX, ifNode.NodeID, 0);
 
-
             if (!refData.IsRef)
             {
                 ifNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = refData.PrimitiveData;
             }
             else
             {
-
                 Linking.AddLinksDirectly(ifNode.NodeID, 0, refData.refNode.NodeID, refData.refNode.Config.OutPinsNoDeleg[0].PinID);
             }
 
-
-
-
-
             foreach (var ifStatement in ifS.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -1679,18 +1598,11 @@
                     {
                         int ToNode_InPinNum;
 
-                
-
-
                         if (ToNode == OwnerDrawer.Nodes[0] || ToNode.DNodeType == DefNodeType.Var)//Is argument
                         {
-
-
-
                             var setValNode = SpawnNodeByType(DefNodeType.SetValue, spawnPosX - 1);
                             //setValNode.ReinitMathPins(true);
 
-
                             if (parseLeftResult.OutPinRefId != -1)
                             {
                                 Linking.AddLinksDirectly(setValNode.NodeID, 0, ToNode.NodeID, parseLeftResult.OutPinRefId);
@@ -1700,18 +1612,12 @@
                                 if (Options.b_ShowDebug) Debug.Log("Can't define pink num to link to");
                             }
 
-
-
-
                             setValNode.ReinitMathPins(true);
 
-
-
                             //Linking.LinkConnectorsDirectly(Connector_LinkWithNode_Id, Connector_LinkWithNode_PinId, setValNode.NodeID, 0);
                             //NextNodeConnId = 0;
                             //LastNode = setValNode;
 
-
                             ToNode = setValNode;
                             ToNode_InPinNum = 1;
                         }
@@ -1725,7 +1631,6 @@
                                 if (ToNode.Config.InPins.Count == 1)
                                     ToNode_InPinNum = 0;
                             }
-
                         }
 
                         Linking.LinkConnectorsDirectly(Connector_LinkWithNode_Id, Connector_LinkWithNode_PinId, ToNode.NodeID, 0);
@@ -1734,8 +1639,6 @@
 
                         defSpawnPosY++;
 
-
-
                         var refData = ParseExpression(bexpr.Right, spawnPosX, -1, -1);//linkedNode.NodeID
 
                         if (refData.InitByTempContructor)
@@ -1747,11 +1650,15 @@
                             List<TempVarHolder> holders = new List<TempVarHolder>();
                             foreach (var arg in refData.ContructorConfig)
                             {
-                                var newHolder = new TempVarHolder();
-                                newHolder.PinID = ToNode.Config.UniqInPinID;
+                                var newHolder = new TempVarHolder
+                                {
+                                    PinID = ToNode.Config.UniqInPinID
+                                };
 
-                                var drawPin = new Node_Pin(arg.PinType, arg.PinName, PinTypeE.PinIn, newHolder.PinID);
-                                drawPin.TempVarConstrPin = true;
+                                var drawPin = new Node_Pin(arg.PinType, arg.PinName, PinTypeE.PinIn, newHolder.PinID)
+                                {
+                                    TempVarConstrPin = true
+                                };
                                 ToNode.Config.InPins.Add(drawPin);
 
                                 if (arg.bLinkConnPin)
@@ -1764,7 +1671,6 @@
                                     newHolder.TempVarPrimitive = arg.TempVarPrimitive;
                                 }
 
-
                                 holders.Add(newHolder);
                             }
 
@@ -1785,7 +1691,6 @@
                         {
                             if (refData.refNode != null)
                             {
-
                                 if (ToNode == OwnerDrawer.Nodes[0])
                                 {
                                     //To "set value" node
@@ -1815,14 +1720,10 @@
                                             }
                                             catch
                                             {
-
                                             }
                                         }
                                     }
 
-
-
-
                                     Linking.AddLinksDirectly(ToNode.NodeID, ToNode_InPinNum, refData.refNode.NodeID, refConnOutPinNum);
                                 }
                                 refData.refNode.ReinitMathPins();
@@ -1839,9 +1740,7 @@
                                         {
                                             node.ReinitMathPins();
                                         }
-
                                     }
-
                                 }
                             }
                             else
@@ -1860,8 +1759,6 @@
                     var parseLeftResult = ParseExpression(bexpr.Left, spawnPosX - 1, -1, -1);
                     Node ToNode = parseLeftResult.refNode;
 
-
-
                     int ToNode_OutPinNum = ToNode.Config.OutPinsNoDeleg[0].PinID;
                     if (parseLeftResult.OutPinRefId != -1)
                         ToNode_OutPinNum = parseLeftResult.OutPinRefId;
@@ -1872,7 +1769,6 @@
                             ToNode_OutPinNum = 0;
                     }
 
-
                     Node incNode = SpawnNodeByType(DefNodeType.IncDecrement, spawnPosX - 1);
 
                     if (bexpr.Op == TokenID.PlusEqual)
@@ -1888,8 +1784,6 @@
                     else if (bexpr.Op == TokenID.BAndEqual)
                         incNode.Operation = "&=";
 
-
-
                     Linking.AddLinksDirectly(incNode.NodeID, 0, ToNode.NodeID, ToNode_OutPinNum);
 
                     incNode.ReinitMathPins(true);
@@ -1900,12 +1794,8 @@
 
                     defSpawnPosY++;
 
-
-
                     var refData = ParseExpression(bexpr.Right, spawnPosX - 1, -1, -1);
 
-
-
                     if (!refData.IsRef)
                     {
                         incNode.Config.InPins[1].TempVar_TempVarHolder.TempVarPrimitive = refData.PrimitiveData;
@@ -1914,7 +1804,6 @@
                     {
                         if (refData.refNode != null)
                         {
-
                             int refConnOutPinNum = -1;
 
                             if (refData.refNode.Config.OutPinsNoDeleg.Count > 0)
@@ -1928,7 +1817,6 @@
                                 refConnOutPinNum = refData.OutPinRefId;
 
                             Linking.AddLinksDirectly(incNode.NodeID, 1, refData.refNode.NodeID, refConnOutPinNum);
-
                         }
                         else
                         {
@@ -1969,7 +1857,6 @@
 
                 ParseExpression(exPI.Expression, spawnPosX - 1, pIncNode.NodeID, 0);
             }
-            
             else
             {
                 if (Options.b_ShowDebug) Debug.Log("Undefined exS: " + exS.Expression.GetType());
@@ -1979,8 +1866,6 @@
         {
             LocalDeclarationStatement LDecl = statement as LocalDeclarationStatement;
 
-
-
             var type = GetTypeFromIType(LDecl.Type);
             string varName = LDecl.Declarators[0].Identifier.Identifier;
 
@@ -2001,8 +1886,6 @@
                 var localVar = _CreateLocalVariable(varName);
                 localVar.InitVar(varName, type);
 
-
-
                 LocalIdentifiedObjects.Add(new IdentifierObject(varName, localVar, type, 0));
 
                 if (LDecl.Declarators[0].Initializer != null)
@@ -2011,11 +1894,8 @@
                 //var localVar = null;
             }
 
-
-
             if (varNode != null)
             {
-
                 Linking.LinkConnectorsDirectly(Connector_LinkWithNode_Id, Connector_LinkWithNode_PinId, varNode.NodeID, 0);
                 NextNodeConnId = 0;
                 LastNode = varNode;
@@ -2039,7 +1919,6 @@
                         if (Ident != null && refData.refNode != null)
                             Ident.ObjType = refData.refNode.Config.OutPins[0].type.PType;
 
-
                         Linking.AddLinksDirectly(varNode.NodeID, 0, refData.refNode.NodeID, refData.refNode.Config.OutPinsNoDeleg[0].PinID);
                         varNode.ReinitMathPins(true);
                         //Link pins!
@@ -2047,7 +1926,6 @@
                 }
             }
 
-
             //LocalIdentifiedObjects.RemoveAll(x => x.IdentifierName == varName);
         }
         else if (statement is ReturnStatement)
@@ -2056,9 +1934,6 @@
 
             Node ReturnNode = null;
 
-
-
-
             if (DelegateReturnParsing && MakeDelegNode != null)
             {
                 ReturnNode = SpawnNodeByType(DefNodeType.DelegateReturn, spawnPosX);
@@ -2085,12 +1960,6 @@
                 ReturnNode.UpdateConfig(true);
             }
 
-
-
-
-
-
-
             if (ReturnNode != null)
             {
                 Linking.LinkConnectorsDirectly(Connector_LinkWithNode_Id, Connector_LinkWithNode_PinId, ReturnNode.NodeID, 0);
@@ -2118,7 +1987,7 @@
                 {
                     var pin = ReturnNode.Config.InPins.Find(x => x.PinID == nodePin);
 
-                    if(pin != null)
+                    if (pin != null)
                     {
                         pin.TempVar_TempVarHolder.TempVarPrimitive = refData.PrimitiveData;
                     }
@@ -2182,7 +2051,6 @@
             {
                 BinaryExpression bExpr = forSt.Test as BinaryExpression;
 
-
                 var testData = ParseExpression(bExpr.Right, spawnPosX, forNode.NodeID, 1);
 
                 if (!testData.IsRef)
@@ -2193,12 +2061,10 @@
             else
                 if (Options.b_ShowDebug) Debug.Log("Can't parse 'for' expression on: Test");
 
-
             if (forSt.Inc is ExpressionList)
             {
                 ExpressionList exprList = forSt.Inc as ExpressionList;
 
-
                 if (exprList[0] is PostIncrementExpression)
                 {
                     forNode.Config.InPins[2].TempVar_TempVarHolder.TempVarPrimitive = 1;
@@ -2219,12 +2085,10 @@
                 {
                     if (Options.b_ShowDebug) Debug.Log("Can't parse 'for' expression on: PostIncrementExpression. Type: " + exprList[0].GetType());
                 }
-
             }
             else
                 if (Options.b_ShowDebug) Debug.Log("Can't parse 'for' expression on: For.Inc");
 
-
             foreach (var ifStatement in forSt.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -2233,7 +2097,6 @@
             NextNodeConnId = 1;
             LastNode = forNode;
 
-
             LocalIdentifiedObjects.RemoveAll(x => x.IdentifierName == varName);
         }
         else if (statement is ForEachStatement)
@@ -2261,13 +2124,12 @@
 
             string varName = feStat.Iterator.Name;
 
-         
             if (type == typeof(Var))
             {
                 var pinType = foreachNode.Config.InPins[0].type.PType;
-                if(pinType != null)
+                if (pinType != null)
                 {
-                    if(pinType.HasElementType)//pinType.IsArray && 
+                    if (pinType.HasElementType)//pinType.IsArray &&
                     {
                         type = pinType.GetElementType();
                     }
@@ -2277,7 +2139,6 @@
             var Ident = new IdentifierObject(varName, foreachNode, type, 0);
             LocalIdentifiedObjects.Add(Ident);
 
-
             foreach (var ifStatement in feStat.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -2292,8 +2153,6 @@
         {
             WhileStatement wState = statement as WhileStatement;
 
-
-
             Node whileNode = SpawnNodeByType(DefNodeType.While, spawnPosX);
 
             Linking.LinkConnectorsDirectly(Connector_LinkWithNode_Id, Connector_LinkWithNode_PinId, whileNode.NodeID, 0);
@@ -2307,8 +2166,6 @@
                 whileNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = whileExprTest.PrimitiveData;
             }
 
-
-
             foreach (var ifStatement in wState.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -2345,7 +2202,6 @@
 
             string descrCut = "";
 
-
             foreach (string line in descrLines)
             {
                 if (line.Contains("</summary>"))
@@ -2401,7 +2257,6 @@
                 var inPin = new Node_Pin(typeof(TryCatch_InPin_Config), "", PinTypeE.PinIn, tryNode.Config.UniqInPinID);
                 tryNode.Config.InPins.Add(inPin);
 
-
                 var outPin = new Node_Pin(typeof(Exception), "", PinTypeE.PinOut, tryNode.Config.UniqOutPinID);
                 tryNode.Config.OutPins.Add(outPin);
 
@@ -2409,17 +2264,11 @@
 
                 var tryType = GetTypeFromIType(catchBl.ClassType);
 
-
                 inPin.TempVar_TempVarHolder.SetTempVar_Type(tryType);
                 outPin.SetVarType(tryType);
 
-
                 LocalIdentifiedObjects.Add(new IdentifierObject(identifierName, tryNode, tryType, i));
 
-
-
-
-
                 NextNodeConnId = i + 3;
                 LastNode = tryNode;
 
@@ -2447,7 +2296,6 @@
                     defSpawnPosY++;
                     ParseStatement(catchStatement, spawnPosX + 1, LastNode.NodeID, NextNodeConnId);
                 }
-
             }
 
             NextNodeConnId = 2;
@@ -2462,7 +2310,6 @@
             NextNodeConnId = 0;
             LastNode = switchNode;
 
-
             var result = ParseExpression(swSt.Test, spawnPosX, switchNode.NodeID, 0);
 
             if (!result.IsRef)
@@ -2482,18 +2329,14 @@
 
             //while (switchNode.Config.InPins.Count < swSt.Cases.Count)
             {
-
             }
             switchNode.ReinitMathPins(true);
 
-
             int pinIndex = 1;
             for (int i = 0; i < swSt.Cases.Count; i++)
             {
                 var Case = swSt.Cases[i];
 
-
-
                 for (int j = 0; j < Case.Ranges.Count; j++)
                 {
                     var caseExpression = Case.Ranges[j];
@@ -2512,18 +2355,15 @@
                     pinIndex++;
                 }
 
-
                 if (Case.IsDefaultCase)
                 {
                     pinIndex++;
                 }
 
-
                 NextNodeConnId = pinIndex - 2;
 
                 LastNode = switchNode;
 
-
                 //defSpawnPosY++;
                 //ParseStatement(Case, spawnPosX + 1, switchNode.NodeID, i);
 
@@ -2538,11 +2378,9 @@
 
                     defSpawnPosY++;
 
-
                     ParseStatement(caseStatement, spawnPosX + 3, LastNode.NodeID, connectorCase.ConnectorID);
                 }
             }
-
         }
         else if (statement is CaseNode)
         {
@@ -2550,7 +2388,7 @@
         }
         else if (statement is LabeledStatement)
         {
-            LabeledStatement labSt = statement as LabeledStatement;
+            // LabeledStatement labSt = statement as LabeledStatement;
 
             Debug.Log("Nottorus: LabeledStatement parsing is not implemented in code.");
         }
@@ -2604,7 +2442,6 @@
             NextNodeConnId = 0;
             LastNode = throwNode;
 
-
             var refData = ParseExpression(thNode.ThrowExpression, spawnPosX, throwNode.NodeID, 0);
 
             if (!refData.IsRef)
@@ -2621,7 +2458,6 @@
             NextNodeConnId = 0;
             LastNode = lockNode;
 
-
             var refData = ParseExpression(lockSt.Target, spawnPosX, lockNode.NodeID, 0);
 
             if (!refData.IsRef)
@@ -2629,7 +2465,6 @@
                 lockNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = refData.PrimitiveData;
             }
 
-
             foreach (var ifStatement in lockSt.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -2655,8 +2490,6 @@
                 whileNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = whileExprTest.PrimitiveData;
             }
 
-
-
             foreach (var ifStatement in DoSt.Statements.Statements)
             {
                 defSpawnPosY++;
@@ -2711,7 +2544,6 @@
                     }
                 }
                 yieldNode.ReinitMathPins(true);
-
             }
             else if (YSt.IsBreak)
             {
@@ -2725,9 +2557,6 @@
 
                 Linking.AddLinksDirectly(ReturnNode.NodeID, retNodeInId, yieldNode.NodeID, 0);
             }
-
-
-
         }
         else if (statement is StatementNode)
         {
@@ -2741,7 +2570,6 @@
 
         if (CommentsToAdd.Count > 0 && LastNode != null && LastNodeForCommentary != null && LastNodeForCommentary != LastNode)
         {
-
             //CommentForNextNode = true;
             float offsetUp = 0;
             foreach (var comment in CommentsToAdd)
@@ -2751,7 +2579,7 @@
                 comment.Width = 300;
                 comment.Height = 200 + offsetUp * 2;
 
-                //comment.SetRect(CreateRect(LastNode.NodeRect.position - Vector2.one * 50, LastNode.NodeRect.size + Vector2.one * 100));
+                //comment.SetRect(new Rect(LastNode.NodeRect.position - Vector2.one * 50, LastNode.NodeRect.size + Vector2.one * 100));
 
                 OwnerDrawer.Commentary.Add(comment);
                 offsetUp += 30;
@@ -2760,8 +2588,8 @@
             LastNodeForCommentary = null;
         }
     }
-    private Node LastNodeForCommentary = null;
 
+    private Node LastNodeForCommentary = null;
 
     private Node ParseInvokationExpression(int spawnPosX, int Connector_LinkWithNode_Id, int Connector_LinkWithNode_PinId, InvocationExpression invEx)
     {
@@ -2770,7 +2598,6 @@
         var findMethod_Arguments = new List<MethodArgumentType>();
         List<NodeObject_Data> InvokeArgsList = new List<NodeObject_Data>();
 
-
         for (int i = 0; i < invEx.ArgumentList.Count; i++)
         {
             var argument = invEx.ArgumentList[i];
@@ -2790,9 +2617,8 @@
                 if (outPin == null && refData.refNode.Config.OutPins.Count > 0)
                     outPin = refData.refNode.Config.OutPins[0];
 
-
                 if (outPin != null && outPin.type != null)
-                    findMethod_Arguments.Add(new MethodArgumentType(outPin.type.PType));       
+                    findMethod_Arguments.Add(new MethodArgumentType(outPin.type.PType));
                 else
                     findMethod_Arguments.Add(new MethodArgumentType(typeof(UndefinedType)));
             }
@@ -2812,7 +2638,7 @@
                     invokRefData.refNode.ReinitMathPins(true);
                     invokRefData.refNode.UpdateConfig(true);
 
-                    if(invokRefData.refNode.b_AllowDelegNode_Invoke)
+                    if (invokRefData.refNode.b_AllowDelegNode_Invoke)
                     {
                         invokRefData.refNode.DelegNode_Invoke = true;
                         invokRefData.refNode.ReinitMathPins(true);
@@ -2828,9 +2654,9 @@
                     }
 
                     int pinsOffset = 0;
-                    if(invokRefData.refNode.Config.InPins.Count != InvokeArgsList.Count)
+                    if (invokRefData.refNode.Config.InPins.Count != InvokeArgsList.Count)
                     {
-                        if(invokRefData.refNode.Config.InPins.Count > InvokeArgsList.Count)
+                        if (invokRefData.refNode.Config.InPins.Count > InvokeArgsList.Count)
                         {
                             if (invokRefData.refNode.Config.InPins.Count == InvokeArgsList.Count + 1)
                             {
@@ -2842,17 +2668,17 @@
                                 else
                                 {
                                     pinsOffset = 0;
-                                    if (Options.b_ShowDebug)Debug.Log("NOT Ok: Non static method. InPins.Count+1 == Args.Count");
+                                    if (Options.b_ShowDebug) Debug.Log("NOT Ok: Non static method. InPins.Count+1 == Args.Count");
                                 }
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("WTF? : InPins.Count: " + invokRefData.refNode.Config.InPins.Count + " Args.Count: " + InvokeArgsList.Count);
+                                if (Options.b_ShowDebug) Debug.Log("WTF? : InPins.Count: " + invokRefData.refNode.Config.InPins.Count + " Args.Count: " + InvokeArgsList.Count);
                             }
                         }
                         else
                         {
-                            if(Options.b_ShowDebug)Debug.Log("WTF? : InPins.Count < Args.Count");
+                            if (Options.b_ShowDebug) Debug.Log("WTF? : InPins.Count < Args.Count");
                         }
                     }
                     else
@@ -2860,7 +2686,6 @@
                         //if(Options.b_ShowDebug)Debug.Log("Ok: Args.Count == InPins.Count");
                     }
 
-
                     for (int i = 0; i < InvokeArgsList.Count; i++)
                     {
                         var argParam = InvokeArgsList[i];
@@ -2888,11 +2713,9 @@
                                 }
                             }
 
-
                             int inPinNum = invokRefData.GetInRefPinId(i + pinsOffset);
                             int outPinNum = argParam.GetOutRefPinId(outNodeId);
 
-
                             Linking.AddLinksDirectly(invokRefData.refNode.NodeID, inPinNum, argParam.refNode.NodeID, outPinNum);
                             argParam.refNode.ReinitMathPins(true);
                         }
@@ -2900,17 +2723,17 @@
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Define: what a hell to do in this case. #1");
+                    if (Options.b_ShowDebug) Debug.Log("Define: what a hell to do in this case. #1");
                 }
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Define: what a hell to do in this case. #2");
+                if (Options.b_ShowDebug) Debug.Log("Define: what a hell to do in this case. #2");
             }
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Define: what a hell to do in this case. #3");
+            if (Options.b_ShowDebug) Debug.Log("Define: what a hell to do in this case. #3");
         }
 
         return rezNode;
@@ -2942,20 +2765,17 @@
 
             mathNode.Operation = BinaryExpression.stringMap[bexpr.Op];
 
-
             var leftData = ParseExpression(bexpr.Left, spawnPosX - 1, mathNode.NodeID, 0);
 
             if (!leftData.IsRef)
             {
                 mathNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = leftData.PrimitiveData;
 
-                if(leftData.PrimitiveData != null)
+                if (leftData.PrimitiveData != null)
                 {
                     var type = leftData.PrimitiveData.GetType();
                     mathNode.Config.InPins[0].SetVarType(type);
                 }
-     
-              
             }
             else if (leftData.refNode != null)
             {
@@ -2963,11 +2783,9 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("BinaryExpression node is null");
+                if (Options.b_ShowDebug) Debug.Log("BinaryExpression node is null");
             }
 
-
-
             defSpawnPosY++;
 
             var rightData = ParseExpression(bexpr.Right, spawnPosX - 1, mathNode.NodeID, 1);
@@ -2977,21 +2795,22 @@
                 if (rightData.RefType != null && bexpr.Op == TokenID.As)
                 {
                     mathNode.Config.NodeRefType.SetVarType(rightData.RefType);
-                    mathNode.As_TypesVariants = new List<Type>();
-                    mathNode.As_TypesVariants.Add(typeof(As_Out_Pin));
-                    mathNode.As_TypesVariants.Add(rightData.RefType);
+                    mathNode.As_TypesVariants = new List<Type>
+                    {
+                        typeof(As_Out_Pin),
+                        rightData.RefType
+                    };
                 }
             }
             else if (!rightData.IsRef)
             {
-                if(rightData.PrimitiveData != null)
+                if (rightData.PrimitiveData != null)
                     mathNode.Config.InPins[1].SetVarType(rightData.PrimitiveData.GetType());
 
                 if (mathNode.Config.InPins.Count > 1)
                     mathNode.Config.InPins[1].TempVar_TempVarHolder.TempVarPrimitive = rightData.PrimitiveData;
             }
 
-
             var pin_link0 = Linking.SourcePinLinkExite(mathNode.NodeID, 0);
             var pin_link1 = Linking.SourcePinLinkExite(mathNode.NodeID, 1);
 
@@ -3010,7 +2829,7 @@
                         {
                             var dType = pins[pin_link0.LNodeConPinID].type.PType;
 
-                            if(dType != typeof(AnyType))
+                            if (dType != typeof(AnyType))
                                 mathNode.Config.InPins[1].SetVarType(dType);
                             else
                                 mathNode.Config.InPins[1].SetVarType(mathNode.Config.InPins[0].type.PType);
@@ -3026,8 +2845,7 @@
 
             mathNode.ReinitMathPins(true);
 
-
-            if(pin_link0 != null && pin_link1 != null && mathNode.Config.InPins.Count > 1)
+            if (pin_link0 != null && pin_link1 != null && mathNode.Config.InPins.Count > 1)
             {
                 if (mathNode.Config.InPins[1].type.PType == typeof(AnyType))
                 {
@@ -3052,10 +2870,9 @@
             }
 
             return new NodeObject_Data(mathNode);
-
         }
         else if (expression is ParenthesizedExpression)//Math node
-        {     
+        {
             var pexpr = expression as ParenthesizedExpression;
             return ParseExpression(pexpr.Expression, spawnPosX, LinkWithNode_Id, LinkWithNode_PinId);
         }
@@ -3071,14 +2888,11 @@
 
                 if (nodeResult == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't parse MemberAccessExpression");
+                    if (Options.b_ShowDebug) Debug.Log("Can't parse MemberAccessExpression");
                     return new NodeObject_Data(null, -1, -1);
                 }
 
-
-
-
-                if(nodeResult.Node == null)
+                if (nodeResult.Node == null)
                 {
                     if (Options.b_ShowDebug) Debug.Log("Can't get node in MemberAccessExpression");
                 }
@@ -3086,7 +2900,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("MA_expr: Not identified qualifier: " + MA_expr.QualifierKind);
+                if (Options.b_ShowDebug) Debug.Log("MA_expr: Not identified qualifier: " + MA_expr.QualifierKind);
             }
         }
         else if (expression is IdentifierExpression)
@@ -3102,7 +2916,7 @@
             IdentifierObject refIdentNode = GetIdentifiedObjectByName(identifierName, findMethod_Arguments, true);
 
             if (identifierName != "this")
-            {      
+            {
                 if (refIdentNode != null)
                 {
                     if (refIdentNode.ScriptObjectData is Node)
@@ -3121,7 +2935,6 @@
                     {
                         RefNode.UpdateConfig(true);
                     }
-
                 }
                 else
                 {
@@ -3151,10 +2964,10 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find identifier: " + IE_expr.Identifier);
+                if (Options.b_ShowDebug) Debug.Log("Can't find identifier: " + IE_expr.Identifier);
             }
 
-            if(refIdentNode == null)
+            if (refIdentNode == null)
                 return new NodeObject_Data(RefNode, -1, -1);
             else
                 return new NodeObject_Data(RefNode, -1, refIdentNode.PinRef);
@@ -3163,27 +2976,26 @@
         {
             var OC_expr = expression as ObjectCreationExpression;
 
-
             return ParseObjectCreation(spawnPosX, LinkWithNode_Id, LinkWithNode_PinId, OC_expr);
         }
         else if (expression is NullPrimitive)
         {
             if (OwnerDrawer == null || CurDrawable == null)
             {
-                var data = new NodeObject_Data(null);
-                data.IsRef = false;
+                var data = new NodeObject_Data(null)
+                {
+                    IsRef = false
+                };
                 return data;
             }
 
-            var IE_expr = expression as NullPrimitive;
+            // var IE_expr = expression as NullPrimitive;
 
             Node exprNode = SpawnNodeByType(DefNodeType.Null, spawnPosX - 1);
 
-
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, exprNode.NodeID, exprNode.Config.OutPinsNoDeleg[0].PinID);
 
-
             return new NodeObject_Data(exprNode);
         }
         else if (expression is UnaryCastExpression)
@@ -3199,9 +3011,10 @@
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, asNode.NodeID, asNode.Config.OutPins[0].PinID);
 
-           // ExpressionNode exprNode = UCE.Type as ExpressionNode;
+            // ExpressionNode exprNode = UCE.Type as ExpressionNode;
 
-            var childExpr = ParseExpression(UCE.Child, spawnPosX - 1, asNode.NodeID, 0);
+            /*var childExpr =*/
+            ParseExpression(UCE.Child, spawnPosX - 1, asNode.NodeID, 0);
             asNode.ReinitMathPins(true);
             IdentifierExpression iExpr = UCE.Type as IdentifierExpression;
             if (iExpr != null)
@@ -3210,9 +3023,11 @@
                 var asType = GetTypeByEnds(iExpr.Identifier);
                 asNode.Config.OutPins[0].SetVarType(asType);
                 asNode.Config.NodeRefType.SetVarType(asType);
-                asNode.As_TypesVariants = new List<Type>();
-                asNode.As_TypesVariants.Add(typeof(As_Out_Pin));
-                asNode.As_TypesVariants.Add(asType);
+                asNode.As_TypesVariants = new List<Type>
+                {
+                    typeof(As_Out_Pin),
+                    asType
+                };
             }
             /*
             if (childExpr.refNode != null && childExpr.refNode.Config.OutPins.Count > 0)
@@ -3226,26 +3041,19 @@
 
                 if (pin != null)
                 {
-            
-                 
                 }
             }
             */
 
-           
-
             return new NodeObject_Data(asNode);
         }
         else if (expression is UnaryExpression)
         {
             var UE_expr = expression as UnaryExpression;
 
-
-
             Node exprNode;
-            
 
-            if(UE_expr.Op == TokenID.Not)
+            if (UE_expr.Op == TokenID.Not)
             {
                 exprNode = SpawnNodeByType(DefNodeType.NOT, spawnPosX - 1);
             }
@@ -3257,13 +3065,10 @@
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, exprNode.NodeID, exprNode.Config.OutPinsNoDeleg[0].PinID);
 
-
             exprNode.ReinitMathPins(true);
 
-
             var childExpr = ParseExpression(UE_expr.Child, spawnPosX - 2, exprNode.NodeID, 0);
 
-
             if (!childExpr.IsRef)
             {
                 //return new NodeObject_Data(childExpr.PrimitiveData);
@@ -3289,7 +3094,7 @@
         }
         else if (expression is VoidPrimitive)
         {
-            if(Options.b_ShowDebug)Debug.Log("Parse exception: 'VoidPrimitive' thing is undefined. Skipping..");
+            if (Options.b_ShowDebug) Debug.Log("Parse exception: 'VoidPrimitive' thing is undefined. Skipping..");
             return new NodeObject_Data(null);
         }
         else if (expression is PostIncrementExpression)
@@ -3298,10 +3103,8 @@
 
             Node pIncNode = SpawnNodeByType(DefNodeType.IncDecrement, spawnPosX);
 
-
             var refs = ParseExpression(exPI.Expression, spawnPosX - 1, pIncNode.NodeID, 0);
 
-
             if (refs.IsRef)
             {
                 if (refs.refNode != null)
@@ -3321,7 +3124,6 @@
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, resultExpr.NodeID, resultExpr.Config.OutPinsNoDeleg[0].PinID);
 
             return new NodeObject_Data(resultExpr);
-
         }
         else if (expression is TypeOfExpression)
         {
@@ -3331,24 +3133,19 @@
 
             Type typType = GetTypeFromIType(typExpr.Expression as TypeNode);
 
-
             typeofNode.Config.InPins[0].TempVar_TempVarHolder.TempVar_TypeType.SetVarType(typType);
 
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, typeofNode.NodeID, typeofNode.Config.OutPinsNoDeleg[0].PinID);
 
-
             return new NodeObject_Data(typeofNode);
-
         }
         else if (expression is AnonymousMethodNode)
         {
             AnonymousMethodNode anMath = expression as AnonymousMethodNode;
 
-
             Node delegNode = SpawnNodeByType(DefNodeType.MakeDelegate, spawnPosX - 1);
 
-
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, delegNode.NodeID, 0);
 
@@ -3357,7 +3154,6 @@
             NextNodeConnId = 0;
             LastNode = delegNode;
 
-
             if (anMath.Parameters != null)
             {
                 int pinId = 1;
@@ -3367,7 +3163,7 @@
 
                     if (paramType == null)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't define parameter type of delegate. Set default type 'int'.");
+                        if (Options.b_ShowDebug) Debug.Log("Can't define parameter type of delegate. Set default type 'int'.");
                         paramType = typeof(int);
                     }
                     LocalIdentifiedObjects.Add(new IdentifierObject(parm.Name, delegNode, paramType, pinId));
@@ -3395,8 +3191,10 @@
 
             NextNodeConnId = 0;
             LastNode = backLastNode;
-            var data = new NodeObject_Data(delegNode);
-            data.OutPinRefId = 0;
+            var data = new NodeObject_Data(delegNode)
+            {
+                OutPinRefId = 0
+            };
             return data;
         }
         else if (expression is ElementAccessExpression)
@@ -3417,20 +3215,17 @@
             }
             getElemNode.ReinitMathPins(true);
 
-
-
             int nodePin = 1;
             foreach (var expr in eaExpr.Expressions)
             {
-
                 int realPinId = nodePin;
 
-                if(nodePin < getElemNode.Config.InPins.Count)
+                if (nodePin < getElemNode.Config.InPins.Count)
                     realPinId = getElemNode.Config.InPins[nodePin].PinID;
                 else
                 {
-                    if(Options.b_ShowDebug)
-                    Debug.Log("Array pin out of range, wanted pin: " + nodePin + " pin count: " + getElemNode.Config.InPins.Count + " nodeId: " + getElemNode.NodeID);
+                    if (Options.b_ShowDebug)
+                        Debug.Log("Array pin out of range, wanted pin: " + nodePin + " pin count: " + getElemNode.Config.InPins.Count + " nodeId: " + getElemNode.NodeID);
                 }
 
                 var exprParam = ParseExpression(expr, spawnPosX - 1, getElemNode.NodeID, realPinId);
@@ -3447,7 +3242,7 @@
                 {
                     var pin = getElemNode.Config.InPins.Find(x => x.PinID == realPinId);
 
-                    if(pin != null)
+                    if (pin != null)
                         pin.TempVar_TempVarHolder.TempVarPrimitive = exprParam.PrimitiveData;
                     else
                     {
@@ -3461,10 +3256,11 @@
             //getElemNode.InPin_RefIdLinkIdentObject = 2;
             //getElemNode.OutPin_RefIdLinkIdentObject = 0;
 
-
-            var data = new NodeObject_Data(getElemNode);
-            data.InPinRefId = getElemNode.Config.InPins.Last().PinID;
-            data.OutPinRefId = 0;
+            var data = new NodeObject_Data(getElemNode)
+            {
+                InPinRefId = getElemNode.Config.InPins.Last().PinID,
+                OutPinRefId = 0
+            };
             return data;
 
             //return new NodeObject_Data(getElemNode);
@@ -3475,7 +3271,6 @@
 
             Node condExprNode = SpawnNodeByType(DefNodeType.ConditionalExpr, spawnPosX - 1);
 
-
             var exprParam_Test = ParseExpression(condExpr.Test, spawnPosX - 1, condExprNode.NodeID, 0);
             if (exprParam_Test.IsRef)
             {
@@ -3494,8 +3289,6 @@
 
             var exprParam_OnTrue = ParseExpression(condExpr.Left, spawnPosX - 1, condExprNode.NodeID, 1);
 
-           
-
             if (exprParam_OnTrue.IsRef)
             {
                 if (exprParam_OnTrue.refNode != null)
@@ -3514,12 +3307,8 @@
             if (exprParam_OnTrue.refNode != null)
                 exprParam_OnTrue.refNode.ReinitMathPins(true);
 
-         
-
             var exprParamOnFalse = ParseExpression(condExpr.Right, spawnPosX - 1, condExprNode.NodeID, 2);
 
-         
-
             if (exprParamOnFalse.IsRef)
             {
                 if (exprParamOnFalse.refNode != null)
@@ -3535,7 +3324,6 @@
 
             condExprNode.ReinitMathPins(true);
 
-
             if (exprParamOnFalse.refNode != null)
                 exprParamOnFalse.refNode.ReinitMathPins(true);
 
@@ -3552,19 +3340,17 @@
             }
             */
 
-
             var lineExpressions = new List<IdentExpressionPart>() { new IdentExpressionPart(tNode) };
 
             //FindMethodByArguments = true;
             //FindMethod_Arguments = new List<MethodArgumentType>();
-            //!!!! 
+            //!!!!
             var parseResult = ParseMemberAccess_ByExpressions(lineExpressions, spawnPosX, LinkWithNode_Id, LinkWithNode_PinId, findMethod_Arguments);
 
             if (parseResult == null)
             {
                 //if(Options.b_ShowDebug)Debug.Log("Can't parse 'expression is TypeNode' (mb generic method)");
 
-
                 return new NodeObject_Data(GetTypeFromIType(tNode), true);
             }
 
@@ -3576,7 +3362,6 @@
 
             Node lambDelegNode = SpawnNodeByType(DefNodeType.DelegLambda, spawnPosX - 1);
 
-
             if (LinkWithNode_Id != -1)
                 Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, lambDelegNode.NodeID, 0);
 
@@ -3585,7 +3370,7 @@
             var Left = lExpr.Left;
             var Right = lExpr.Right;
 
-            if(Left is IdentifierExpression)
+            if (Left is IdentifierExpression)
             {
                 var identExpr = Left as IdentifierExpression;
 
@@ -3600,10 +3385,9 @@
                 {
                     if (LinkWithNode_Id != -1)
                         Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, lambDelegNode.NodeID, 0);
-              
                 }
             }
-            else if(lambDelegNode.Config.InPins.Count > 0)
+            else if (lambDelegNode.Config.InPins.Count > 0)
             {
                 lambDelegNode.Config.InPins[0].TempVar_TempVarHolder.TempVarPrimitive = result.PrimitiveData;
             }
@@ -3616,7 +3400,6 @@
         else if (expression is ArrayCreationExpression)
         {
             var ACE = expression as ArrayCreationExpression;
- 
 
             if (ACE.Initializer != null)
             {
@@ -3647,9 +3430,7 @@
                     {
                         ArrayConstr.Config.InPins[i].TempVar_TempVarHolder.TempVarPrimitive = elemExpr.PrimitiveData;
                     }
-
                 }
-         
 
                 return new NodeObject_Data(ArrayConstr);
             }
@@ -3696,7 +3477,7 @@
                         if (Options.b_ShowDebug) Debug.Log("Array RankSpecifier rank is not integral primitive! Type: " + rank.GetType());
                     }
                     */
-                        index ++;
+                        index++;
                     }
 
                     return new NodeObject_Data(cfg, true);
@@ -3707,7 +3488,7 @@
         }
         else if (expression == null)
         {
-            if(Options.b_ShowDebug)Debug.Log("Null expression?");
+            if (Options.b_ShowDebug) Debug.Log("Null expression?");
         }
         else if (expression is BaseAccessExpression)
         {
@@ -3722,12 +3503,8 @@
             /*
             var OCExprResulr = ParseExpression(intializer.LeftSide, spawnPosX - 1, -1, 0);
 
-         
- 
             if (OCExprResulr.refNode != null)
             {
-
-
             }
             */
 
@@ -3773,7 +3550,7 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Expression type is not defined in code: " + expression.GetType());
+            if (Options.b_ShowDebug) Debug.Log("Expression type is not defined in code: " + expression.GetType());
         }
         return null;
     }
@@ -3796,13 +3573,12 @@
                 var args = new List<MethodArgumentType>();
                 List<NodeObject_Data> InvokeArgsList = new List<NodeObject_Data>();
 
-
                 for (int i = 0; i < OC_expr.ArgumentList.Count; i++)
                 {
                     var argument = OC_expr.ArgumentList[i];
 
                     NodeObject_Data refData = ParseExpression(argument.Expression, spawnPosX - 1, -1, -1);
-                        //invokRefData.refNode.NodeID, i
+                    //invokRefData.refNode.NodeID, i
 
                     InvokeArgsList.Add(refData);
 
@@ -3817,23 +3593,19 @@
                         if (outPin == null && refData.refNode.Config.OutPins.Count > 0)
                             outPin = refData.refNode.Config.OutPins[0];
 
-
                         if (outPin != null && outPin.type != null)
                             args.Add(new MethodArgumentType(outPin.type.PType));
                         else
-                            args.Add(new MethodArgumentType(typeof (UndefinedType)));
+                            args.Add(new MethodArgumentType(typeof(UndefinedType)));
                     }
                 }
 
-
                 ConstructorInfo testConstr = null;
 
-
                 int wantedConstrlength = args.Count;
 
-
                 var allConstrMachCase =
-                    defType.GetConstructors().ToList().FindAll(x => x.GetParameters().Length == wantedConstrlength);
+                    defType.GetConstructors().Where(x => x.GetParameters().Length == wantedConstrlength).ToList();
 
                 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                 if (allConstrMachCase.Count == 1)
@@ -3871,7 +3643,7 @@
                 {
                     if (Options.b_ShowDebug) Debug.Log("Can't find mach contructor for a type: " + defType);
 
-                    if(allConstrMachCase.Count > 0)
+                    if (allConstrMachCase.Count > 0)
                         testConstr = allConstrMachCase[0];
                     else
                     {
@@ -3885,10 +3657,8 @@
                     }
                 }
 
-
                 cNode = SpawnObjNodeByData(testConstr, spawnPosX - 1);
 
-
                 for (int i = 0; i < InvokeArgsList.Count; i++)
                 {
                     var argParam = InvokeArgsList[i];
@@ -3917,6 +3687,7 @@
     private Node MakeDelegNode = null;
 
     private object PrimitiveConv = null;
+
     private bool GetPrimitiveFromExpr(ExpressionNode expression, bool allowNode, int spawnPosX)
     {
         PrimitiveConv = null;
@@ -3935,7 +3706,7 @@
         else if (expression is IntegralPrimitive)
         {
             PrimitiveConv = (expression as IntegralPrimitive).Value;
-        }       
+        }
         else if (expression is RealPrimitive)
         {
             PrimitiveConv = (expression as RealPrimitive).Value;
@@ -3943,7 +3714,6 @@
         else if (expression is StringPrimitive)
         {
             PrimitiveConv = (expression as StringPrimitive).Value;
-            
 
             if (allowNode)
             {
@@ -3967,7 +3737,7 @@
             }
             catch
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't cut literal string: " + sb.ToString());
+                if (Options.b_ShowDebug) Debug.Log("Can't cut literal string: " + sb.ToString());
             }
             PrimitiveConv = StrLine;
 
@@ -4034,20 +3804,18 @@
                 else
                 {
                     if (Options.b_ShowDebug) Debug.Log("1. Can't get node from ParseExpression in ParseMAExpression. Type: " + expression.Left.GetType());
-                }       
+                }
             }
             else
             {
                 if (Options.b_ShowDebug) Debug.Log("2. Can't get node from ParseExpression in ParseMAExpression. Type: " + expression.Left.GetType());
             }
-          
         }
 
         /*
         ////////
         var OC_expr = expression as ObjectCreationExpression;
 
-
         return ParseObjectCreation(spawnPosX, LinkWithNode_Id, LinkWithNode_PinId, OC_expr);
         */
         /////////
@@ -4066,9 +3834,8 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Expression is undefined in code: " + expression.Right.GetType());
+            if (Options.b_ShowDebug) Debug.Log("Expression is undefined in code: " + expression.Right.GetType());
         }
-
     }
 
     public class IdentExpressionPart
@@ -4110,7 +3877,6 @@
         }
     }
 
-
     //TODO: Linking
     private RefNodeResult ParseMemberAccess(MemberAccessExpression expression, int spawnPosX, int LinkWithNode_Id, int LinkWithNode_PinId, List<MethodArgumentType> FindByArgs)
     {
@@ -4138,23 +3904,22 @@
                     }
                     else if (expr.node.GenPinsSelector.GenList.Count > 1)
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Must have generic param, but GenPinsSelector count more than 1. Try to use first param. Node: " + expr.node.Config.Name);
+                        if (Options.b_ShowDebug) Debug.Log("Must have generic param, but GenPinsSelector count more than 1. Try to use first param. Node: " + expr.node.Config.Name);
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Must have generic param, but GenPinsSelector count is 0. Node: " + expr.node.Config.Name);
+                        if (Options.b_ShowDebug) Debug.Log("Must have generic param, but GenPinsSelector count is 0. Node: " + expr.node.Config.Name);
                     }
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Must have generic param, but it's null. Node: " + expr.node.Config.Name);
+                    if (Options.b_ShowDebug) Debug.Log("Must have generic param, but it's null. Node: " + expr.node.Config.Name);
                 }
             }
         }
 
         RefNodeResult lastNode = null;
 
-
         if (ProcessedNodes.Count > 0)
             lastNode = ProcessedNodes.Last();
 
@@ -4163,16 +3928,9 @@
             Linking.AddLinksDirectly(LinkWithNode_Id, LinkWithNode_PinId, lastNode.Node.NodeID, lastNode.Node.Config.OutPinsNoDeleg[0].PinID);
         }
 
-
         return lastNode;
     }
 
-
-
-
-
-
-
     private const float PosStepX = 400;
     private const float PosStepY = 150;
 
@@ -4188,13 +3946,12 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Can't find default node with type: " + nodeType);
+            if (Options.b_ShowDebug) Debug.Log("Can't find default node with type: " + nodeType);
             return null;
         }
     }
 
-   // private string lastSpawnedNodeName = "";
-
+    // private string lastSpawnedNodeName = "";
 
     public Node SpawnObjNodeByData(object nodeData, int spawnPosX)
     {
@@ -4208,18 +3965,29 @@
         if (OwnerDrawer != null)
             OwnerDrawer.Nodes.Add(exprNode);
         else
-            if(Options.b_ShowDebug)Debug.Log("OwnerDrawer == null!");
+            if (Options.b_ShowDebug) Debug.Log("OwnerDrawer == null!");
 
         exprNode.UpdateConfig(true);
         return exprNode;
     }
 
-
     private class NodeObject_Data
     {
-        public NodeObject_Data(Node refNode) { this.refNode = refNode; IsRef = true; }
-        public NodeObject_Data(Node refNode, int inPinId, int outPinId) { this.refNode = refNode; IsRef = true; this.InPinRefId = inPinId; this.OutPinRefId = outPinId; }
-        public NodeObject_Data(object PrimitiveData) { this.PrimitiveData = PrimitiveData; IsRef = false; }
+        public NodeObject_Data(Node refNode)
+        {
+            this.refNode = refNode; IsRef = true;
+        }
+
+        public NodeObject_Data(Node refNode, int inPinId, int outPinId)
+        {
+            this.refNode = refNode; IsRef = true; this.InPinRefId = inPinId; this.OutPinRefId = outPinId;
+        }
+
+        public NodeObject_Data(object PrimitiveData)
+        {
+            this.PrimitiveData = PrimitiveData; IsRef = false;
+        }
+
         public Node refNode;
         public object PrimitiveData;
         public bool IsRef = false;
@@ -4229,9 +3997,15 @@
         public bool IsRefType = false;
         public Type RefType;
 
-        public NodeObject_Data(Type RefType, bool isType) { this.RefType = RefType; IsRefType = true; }
+        public NodeObject_Data(Type RefType, bool isType)
+        {
+            this.RefType = RefType; IsRefType = true;
+        }
 
-        public NodeObject_Data(List<ConstructorInitializerConfig> contructorConfig, bool initByConstr) { ContructorConfig = contructorConfig; InitByTempContructor = true; }
+        public NodeObject_Data(List<ConstructorInitializerConfig> contructorConfig, bool initByConstr)
+        {
+            ContructorConfig = contructorConfig; InitByTempContructor = true;
+        }
 
         public bool InitByTempContructor = false;
         public List<ConstructorInitializerConfig> ContructorConfig = new List<ConstructorInitializerConfig>();
@@ -4277,8 +4051,6 @@
             }
         }
 
-
-
         public bool bLinkConnPin = false;
         public int LinkWith_NodeId = -2;
         public int LinkWith_PinId = -3;
@@ -4302,16 +4074,13 @@
         }
     }
 
-
-
-
     public static Type TryGetTypeByName(string name)
     {
         Type thisClassType = null;
 
         foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())
         {
-            if(Options.b_ShowDebug)Debug.Log(asm.GetName().Name);
+            if (Options.b_ShowDebug) Debug.Log(asm.GetName().Name);
             thisClassType = asm.GetType(name, false, true);
 
             if (thisClassType != null)
@@ -4320,20 +4089,15 @@
         return null;
     }
 
-
-
-
     private static CompilationUnitNode ParseUnit(string fileName)
     {
         //FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
         //StreamReader sr = new StreamReader(fs, true);
 
-
         string lines = System.IO.File.ReadAllText(fileName);
 
         byte[] byteArray = Encoding.UTF8.GetBytes(lines);
         MemoryStream stream = new MemoryStream(byteArray);
-        
 
         // convert stream to string
         StreamReader reader = new StreamReader(stream);
@@ -4361,11 +4125,11 @@
         {
             if (error.Token.ID == TokenID.Eof && error.Line == -1)
             {
-                if(Options.b_ShowDebug)Debug.Log(error.Message + "\nFile: " + error.FileName + "\n");
+                if (Options.b_ShowDebug) Debug.Log(error.Message + "\nFile: " + error.FileName + "\n");
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log(error.Message + " in token " + error.Token.ID + "\nline: " + error.Line + ", column: " + error.Column + "\nin file: " + error.FileName + "\n");
+                if (Options.b_ShowDebug) Debug.Log(error.Message + " in token " + error.Token.ID + "\nline: " + error.Line + ", column: " + error.Column + "\nin file: " + error.FileName + "\n");
             }
         }
     }
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Parser_Refs.cs Editor/m_Parser_Refs.cs
--- .Editor/m_Parser_Refs.cs	2018-06-30 08:59:18.702666900 +0700
+++ Editor/m_Parser_Refs.cs	2018-06-30 09:02:03.864523200 +0700
@@ -1,16 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
-using System.Xml.Serialization;
-using Nottorus_Debug;
-using Addon_CSP;
-using Addon_CSP.Collections;
-using System.Text;
+using System.Reflection;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -33,7 +26,6 @@
         }
     }
 
-
     public Dictionary<string, IdentifierObject> AssembliesTypeRefs = new Dictionary<string, IdentifierObject>();
 
     private void AddAsmTypeRef(string fullPath, Type data)
@@ -50,7 +42,7 @@
         for (int i = 1; i < PartialName.Length; i++)
         {
             foundRef = GetAdd_AsmRef(PartialName[i], foundRef.SubAssemblies);
-            if(i == PartialName.Length - 2)
+            if (i == PartialName.Length - 2)
             {
                 foundRef.Asbm = data.Assembly;
             }
@@ -111,7 +103,7 @@
         {
             if (Options.b_ShowDebug) Debug.Log("PartialName[0].PartNameSearch is null");
         }
-  
+
         if (FullNameAssemblyFind_Ident != null)
         {
             FullNameAssemblyFind_Obj = GetNextIdent_InRefs(PartialName, FullNameAssemblyFind_Ident, spawnPosX, FindByArgs);
@@ -120,7 +112,6 @@
         return FullNameAssemblyFind_Obj;
     }
 
-
     private object TryFindBy_LocalReferences(List<IdentExpressionPart> PartialName, int spawnPosX, List<MethodArgumentType> FindByArgs)
     {
         ProcessedNodes = new List<RefNodeResult>();
@@ -128,11 +119,9 @@
         object foundRef = null;
         IdentifierObject LocalIdentifierFound_Ident = GetIdentifiedObjectByName(PartialName[0].PartNameSearch, FindByArgs, false);
 
-
         if (LocalIdentifierFound_Ident == null)
             return null;
 
-
         if (PartialName.Count > 1)
         {
             foundRef = GetNextIdent_InRefs(PartialName, LocalIdentifierFound_Ident, spawnPosX, FindByArgs);
@@ -148,7 +137,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't spawn node by ScriptObjectData. It's null");
+                if (Options.b_ShowDebug) Debug.Log("Can't spawn node by ScriptObjectData. It's null");
             }
         }
 
@@ -185,12 +174,12 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Can't find last node to connect 'this' node.");
+                        if (Options.b_ShowDebug) Debug.Log("Can't find last node to connect 'this' node.");
                     }
                 }
                 else
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find script property/field for 'this' node.");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find script property/field for 'this' node.");
                 }
             }
         }
@@ -200,8 +189,6 @@
 
     //////////////////////////////////////////////////////////////////////////////
 
-
-
     private void Get__Nodes__AllRefs(List<IdentExpressionPart> PartialName, int spawnPosX, List<MethodArgumentType> FindByArgs)
     {
         ProcessedNodes = new List<RefNodeResult>();
@@ -238,7 +225,7 @@
                         ProcessedNodes = new List<RefNodeResult>();
                         foundResult = GetTypeByEnds(PartialName[0].PartNameSearch);
 
-                        if(foundResult == null)
+                        if (foundResult == null)
                             foundResult = GetTypeByEnds(RenameNameStringToType(PartialName[0].PartNameSearch));
 
                         if (foundResult == null)
@@ -273,7 +260,6 @@
                                 if (foundResult != null)
                                     return;
                             }
-
                         }
                     }
                 }
@@ -287,14 +273,12 @@
         }
         else
         {
-            if(Options.b_ShowDebug)Debug.Log("Can't find object in all: " + string.Join(".", PartialName.Select(x => x.PartNameSearch).ToArray()));
+            if (Options.b_ShowDebug) Debug.Log("Can't find object in all: " + string.Join(".", PartialName.Select(x => x.PartNameSearch).ToArray()));
         }
     }
 
- 
     private void AddLinkProcessedNodes()
     {
-
         for (int i = 0; i < ProcessedNodes.Count; i++)
         {
             var node = ProcessedNodes[i];
@@ -318,10 +302,10 @@
                 Linking.LinkPins(node2.Node.NodeID, node2.GetRefPinId(0), node1.Node.NodeID, node1.GetRefPinId(0));
             }
         }
-        
     }
 
     private static List<RefNodeResult> ProcessedNodes = new List<RefNodeResult>();
+
     private object GetNextIdent_InRefs(List<IdentExpressionPart> PartialName, object identObj, int spawnPosX, List<MethodArgumentType> FindByArgs)
     {
         for (int i = 1; i < PartialName.Count; i++)
@@ -344,14 +328,16 @@
             }
         }
 
-
         return identObj;
     }
 
-
     private class RefNodeResult
     {
-        public RefNodeResult(Node Node, int LinkPinId) { this.Node = Node; this.LinkPinId = LinkPinId; }
+        public RefNodeResult(Node Node, int LinkPinId)
+        {
+            this.Node = Node; this.LinkPinId = LinkPinId;
+        }
+
         public Node Node;
         public int LinkPinId = -1;
 
@@ -364,13 +350,10 @@
         }
     }
 
-
-
-
     //////////////////////////////////////////////////////////////////////////////
     private List<IdentifierObject> IdentifiedObjects = new List<IdentifierObject>();
-    private List<IdentifierObject> LocalIdentifiedObjects = new List<IdentifierObject>();
 
+    private List<IdentifierObject> LocalIdentifiedObjects = new List<IdentifierObject>();
 
     private IdentifierObject GetIdentifiedObjectByName(string name, List<MethodArgumentType> FindByArgs, bool logIfNotFount)
     {
@@ -383,14 +366,13 @@
         {
             var results = IdentifiedObjects.FindAll(t => t.IdentifierName == name);
 
-
             if (results.Count == 1)
                 return results[0];
             else if (results.Count > 1)
             {
                 foreach (var meth in results)
                 {
-                    if(meth.ScriptObjectData is ScriptFunction)
+                    if (meth.ScriptObjectData is ScriptFunction)
                     {
                         ScriptFunction func = meth.ScriptObjectData as ScriptFunction;
 
@@ -399,7 +381,6 @@
                         if (FindByArgs.Count != MethodArgsTypeList.Count)
                             continue;
 
-
                         if (CheckMethodArguments(MethodArgsTypeList, FindByArgs, true))
                         {
                             return meth;
@@ -409,18 +390,18 @@
                         {
                             return meth;
                         }
-                    } 
+                    }
                 }
             }
 
-            if(results.Count > 1)
+            if (results.Count > 1)
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find mach ScriptFunction  for: " + name + "Selecting first..");
+                if (Options.b_ShowDebug) Debug.Log("Can't find mach ScriptFunction  for: " + name + "Selecting first..");
                 return results[0];
             }
             else
             {
-                if(logIfNotFount)
+                if (logIfNotFount)
                     if (Options.b_ShowDebug) Debug.Log("Can't find mach identifier for querry: " + name);
                 return null;
             }
@@ -433,7 +414,6 @@
             if (result.Count == 1)
                 return result[0];
         }
-     
 
         if (result.Count > 0)
             return result[0];
@@ -448,14 +428,20 @@
 
     public class MethodArgumentType
     {
-        public MethodArgumentType(bool IsPrimitive) { this.IsPrimitive = IsPrimitive; }
-        public MethodArgumentType(Type ParamType) { this.ParamType = ParamType; }
+        public MethodArgumentType(bool IsPrimitive)
+        {
+            this.IsPrimitive = IsPrimitive;
+        }
+
+        public MethodArgumentType(Type ParamType)
+        {
+            this.ParamType = ParamType;
+        }
 
         public Type ParamType;
         public bool IsPrimitive = false;
     }
 
-    
     public class IdentifierObject
     {
         public IdentifierObject(string IdentifierName)
@@ -463,7 +449,6 @@
             this.IdentifierName = IdentifierName;
         }
 
-
         public IdentifierObject(string IdentifierName, object ObjRefData, Type ObjType, int PinRef)
         {
             this.IdentifierName = IdentifierName;
@@ -479,10 +464,6 @@
             */
         }
 
-
-
-
-
         public Assembly Asbm = null;
         public string IdentifierName;
         public Type ObjType = null;
@@ -491,16 +472,15 @@
 
         public Dictionary<string, IdentifierObject> SubAssemblies = new Dictionary<string, IdentifierObject>();
 
-
         private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
 
         public object GetNextIdentifier(IdentExpressionPart identifier, int spawnPosX, List<MethodArgumentType> FindByArgs)
         {
             object result = null;
-        
+
             if (ScriptObjectData != null)
             {
-                if(ScriptObjectData is Node)
+                if (ScriptObjectData is Node)
                 {
                     identifier.node = ScriptObjectData as Node;
                     ProcessedNodes.Add(new RefNodeResult(identifier.node, PinRef));
@@ -510,7 +490,7 @@
                     identifier.node = BPE.SpawnObjNodeByData(ScriptObjectData, spawnPosX);
                     ProcessedNodes.Add(new RefNodeResult(identifier.node, PinRef));
                     spawnPosX++;
-                }   
+                }
             }
 
             if (ObjType != null)
@@ -529,15 +509,15 @@
 
         public static Type GetNextIdentType(Type objType, IdentExpressionPart identifier, int spawnPosX, List<MethodArgumentType> FindByArgs)
         {
-            if(objType == null)
+            if (objType == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("objType == null in GetNextIdentType. Identifier: " + identifier.PartNameSearch);
+                if (Options.b_ShowDebug) Debug.Log("objType == null in GetNextIdentType. Identifier: " + identifier.PartNameSearch);
                 return null;
             }
             string identifierName = identifier.PartNameSearch;
             Type resultType = null;
-            //Prop 
-            var testProperty = objType.GetProperties(flags).ToList().Find(x => x.Name == identifierName);
+            //Prop
+            var testProperty = objType.GetProperties(flags).FirstOrDefault(x => x.Name == identifierName);
             if (testProperty != null)
             {
                 identifier.node = BPE.SpawnObjNodeByData(testProperty, spawnPosX);
@@ -548,7 +528,7 @@
             //Field
             if (resultType == null)
             {
-                var testField = objType.GetFields(flags).ToList().Find(x => x.Name == identifierName);
+                var testField = objType.GetFields(flags).FirstOrDefault(x => x.Name == identifierName);
                 if (testField != null)
                 {
                     identifier.node = BPE.SpawnObjNodeByData(testField, spawnPosX);
@@ -560,7 +540,7 @@
             //Event
             if (resultType == null)
             {
-                var testEvent = objType.GetEvents(flags).ToList().Find(x => x.Name == identifierName);
+                var testEvent = objType.GetEvents(flags).FirstOrDefault(x => x.Name == identifierName);
                 if (testEvent != null)
                 {
                     identifier.node = BPE.SpawnObjNodeByData(testEvent, spawnPosX);
@@ -572,30 +552,26 @@
             //Method
             if (resultType == null)
             {
-                
-                var allMethods = objType.GetMethods(flags).ToList();
+                var allMethods = objType.GetMethods(flags);
 
                 MethodInfo testMeth = null;
 
                 if (FindByArgs != null)
                 {
-                    var allmethods = allMethods.FindAll(x => x.Name == identifierName && x.GetParameters().Length >= FindByArgs.Count);
-
+                    var allmethods = allMethods.Where(x => x.Name == identifierName && x.GetParameters().Length >= FindByArgs.Count).ToList();
 
-
-
-                    foreach(var method in allmethods.ToList())
+                    for (int i = allmethods.Count; i --> 0;)
                     {
-                        var Params = method.GetParameters();
-                        for (int i = FindByArgs.Count; i < Params.Length; i++)
+                        var Params = allmethods[i].GetParameters();
+                        for (int j = FindByArgs.Count; j < Params.Length; j++)
                         {
-                            if(!IsParams(Params[i]))
+                            if (!IsParams(Params[j]))
                             {
-                                allmethods.Remove(method);
+                                allmethods.Remove(allmethods[i]);
+                                break;
                             }
                         }
                     }
-                   
 
                     if (allmethods.Count == 1)
                         testMeth = allmethods[0];
@@ -626,11 +602,10 @@
                             }
                         }
                     }
-                    
                 }
                 else
                 {
-                    testMeth = allMethods.Find(x => x.Name == identifierName);
+                    testMeth = allMethods.FirstOrDefault(x => x.Name == identifierName);
                 }
 
                 if (testMeth != null)
@@ -642,7 +617,7 @@
             }
 
             return resultType;
-        } 
+        }
     }
 
     public static bool CheckMethodArguments(List<Type> MethodArgsTypeList, List<MethodArgumentType> FindByArgs, bool dirTypeLink)
@@ -650,7 +625,6 @@
         bool allPass = true;
         for (int i = 0; i < MethodArgsTypeList.Count; i++)
         {
-
             //if(i > FindByArgs.Count - 1)
             {
                 //if(Options.b_ShowDebug)Debug.Log("i > FindMethod_Arguments.Count");
@@ -658,21 +632,20 @@
             }
             MethodArgumentType wantedArg = FindByArgs[Mathf.Min(i, FindByArgs.Count - 1)];
             var param = MethodArgsTypeList[i];
-            if(i >= FindByArgs.Count)
+            if (i >= FindByArgs.Count)
             {
                 //optional
             }
-            else if(!wantedArg.IsPrimitive && wantedArg.ParamType == typeof(AnyDelegateType) && IsDeleg(param))
+            else if (!wantedArg.IsPrimitive && wantedArg.ParamType == typeof(AnyDelegateType) && IsDeleg(param))
             {
                 //allow
             }
             else if (!wantedArg.IsPrimitive && wantedArg.ParamType != typeof(UndefinedType))
             {
-                allPass = MathFreeConnType.CanConnect(wantedArg.ParamType, param, dirTypeLink);              
+                allPass = MathFreeConnType.CanConnect(wantedArg.ParamType, param, dirTypeLink);
             }
             else
             {
-
             }
 
             if (!allPass)
@@ -681,4 +654,4 @@
 
         return allPass;
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ReferencesWindow.cs Editor/m_ReferencesWindow.cs
--- .Editor/m_ReferencesWindow.cs	2018-06-30 08:59:18.719669900 +0700
+++ Editor/m_ReferencesWindow.cs	2018-06-30 09:02:03.866523400 +0700
@@ -1,20 +1,18 @@
-using UnityEditor;
-using System;
-using UnityEngine;
 using System.Collections.Generic;
+using UnityEngine;
 
 public partial class Nottorus : UnityEditor.EditorWindow
 {
-	public static readonly ReferenceViewerWindow ReferenceWindow = new ReferenceViewerWindow();
+    public static readonly ReferenceViewerWindow ReferenceWindow = new ReferenceViewerWindow();
 
-
-	public class ReferenceViewerWindow
-	{
-		public float Width = 300f;
-		public Rect DrawRect;
+    public class ReferenceViewerWindow
+    {
+        public float Width = 300f;
+        public Rect DrawRect;
         public bool b_Active = false;
         private List<RefNodeSearchResult> SearchResults = new List<RefNodeSearchResult>();
         private BaseScriptObject Drawbl;
+
         private void Close()
         {
             b_Active = false;
@@ -33,7 +31,6 @@
             int refId = -1;
             NodeTypeE nodeType = NodeTypeE.Undefined;
 
-
             if (refObject is ScriptProperty)
             {
                 var prop = refObject as ScriptProperty;
@@ -43,7 +40,6 @@
                 /*
                 if (prop.OwnerProperty != null)
                 {
-                    
                 }
                 else
                 {
@@ -81,10 +77,9 @@
                     {
                         ScriptProperty curProp = drawbl.OwnerProperty as ScriptProperty;
 
-
                         DrawblName = drawbl.OwnerProperty.Config.Name + " . ";
 
-                        if(curProp.Drawable_Set == drawbl)
+                        if (curProp.Drawable_Set == drawbl)
                         {
                             DrawblName += "Set";
                         }
@@ -92,8 +87,6 @@
                         {
                             DrawblName += "Get";
                         }
-
-
                     }
                     else
                     {
@@ -113,19 +106,15 @@
                         }
                         SearchResults.Add(newAdd);
                     }
-
                 }
-
             }
             else
                 Debug.Log("The type of searching object is not defined in code.");
         }
 
-
-
         public void Draw()
         {
-            if(b_Active)
+            if (b_Active)
             {
                 if (DrawRect.Contains(Event.current.mousePosition))
                 {
@@ -133,47 +122,46 @@
                     {
                         LMB_Down_Deleg = delegate
                         {
-
                         };
                     }
                     if (_RMB_Up)
                     {
                         RMB_Up_Deleg = delegate
                         {
-
                         };
                     }
                 }
 
                 DrawRect = GUI.Window(18, DrawRect, DrawWindow, "", Res.EmptyStyle);
-            }     
+            }
         }
 
         private float DrawPosY = 0;
         private Vector2 v_Scroll = Vector2.zero;
+
         private void DrawWindow(int windowId)
         {
             GUI.BringWindowToFront(windowId);
             var dRect = DrawRect;
             dRect.position = Vector2.zero;
-            Graphics.DrawTexture(dRect, Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(dRect, Res.BaseWindow, 25, 25, 25, 25);
 
-            if (GUI.Button(CreateRect(DrawRect.width - 25, 5, 20, 20), "X", Res.ButtonSimple))
+            if (GUI.Button(new Rect(DrawRect.width - 25, 5, 20, 20), "X", Res.ButtonSimple))
             {
                 Close();
             }
 
-            GUI.Label(CreateRect(20, 10, 500, 30), Drawbl.Config.Name, Res.BigWindowLabel);
+            GUI.Label(new Rect(20, 10, 500, 30), Drawbl.Config.Name, Res.BigWindowLabel);
 
-            GUI.Box(CreateRect(5, 30, Width - 10, DrawRect.height - 35), "", Res.Box);
+            GUI.Box(new Rect(5, 30, Width - 10, DrawRect.height - 35), "", Res.Box);
 
-            Rect scrollRect = CreateRect(10, 35, DrawRect.width - 20, DrawRect.height - 10);
-            v_Scroll = GUI.BeginScrollView(scrollRect, v_Scroll, CreateRect(0, 0, 10, DrawPosY));
+            Rect scrollRect = new Rect(10, 35, DrawRect.width - 20, DrawRect.height - 10);
+            v_Scroll = GUI.BeginScrollView(scrollRect, v_Scroll, new Rect(0, 0, 10, DrawPosY));
             DrawPosY = 0;
 
             foreach (var result in SearchResults)
             {
-                var drawRect = CreateRect(0, DrawPosY, DrawRect.width - 20, 14);
+                var drawRect = new Rect(0, DrawPosY, DrawRect.width - 20, 14);
                 if (GUI.Button(drawRect, result.DrawblName + " (" + result.NodesList.Count + "):", Res.ListButton))
                 {
                     result.Opened = !result.Opened;
@@ -189,7 +177,7 @@
                 {
                     foreach (var node in result.NodesList)
                     {
-                        drawRect = CreateRect(10, DrawPosY, DrawRect.width - 30, 14);
+                        drawRect = new Rect(10, DrawPosY, DrawRect.width - 30, 14);
                         if (GUI.Button(drawRect, node.Config.Name, Res.ListButton))
                         {
                             CurDrawable = result.Drawbl;
@@ -201,31 +189,28 @@
                     }
                     DrawPosY += 5;
                 }
-              
             }
 
-
-            
-
             if (DrawPosY < 30)
                 DrawPosY = 30;
 
             GUI.EndScrollView();
 
-
             DrawRect.height = DrawPosY + 45;
-            GUI.DragWindow(CreateRect(0, 0, 1000, 30));
+            GUI.DragWindow(new Rect(0, 0, 1000, 30));
         }
     }
+
     public class RefNodeSearchResult
-	{
-        public RefNodeSearchResult(BaseScriptObject Drawbl, List<Node> NodesList, string DrawblName) { this.Drawbl = Drawbl; this.NodesList = NodesList;this.DrawblName = DrawblName; }
+    {
+        public RefNodeSearchResult(BaseScriptObject Drawbl, List<Node> NodesList, string DrawblName)
+        {
+            this.Drawbl = Drawbl; this.NodesList = NodesList; this.DrawblName = DrawblName;
+        }
 
         public readonly List<Node> NodesList;
-		public BaseScriptObject Drawbl = null;
+        public BaseScriptObject Drawbl = null;
         public bool Opened = true;
         public string DrawblName;
-	}
+    }
 }
-
-
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_RenameField.cs Editor/m_RenameField.cs
--- .Editor/m_RenameField.cs	2018-06-30 08:59:18.722670800 +0700
+++ Editor/m_RenameField.cs	2018-06-30 09:02:03.867523300 +0700
@@ -1,20 +1,14 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public delegate void DelegVoid();
-    public delegate void DelegRString(string newName);
-    public delegate void DelegRObj(string newName, object retObj);
 
+    public delegate void DelegRString(string newName);
 
+    public delegate void DelegRObj(string newName, object retObj);
 
     public class RenameField
     {
@@ -23,7 +17,6 @@
         public string TempName = "";
         private float TimeClick_ChangeName = 0;
 
-
         public DelegVoid OpenDeleg;
         public DelegRString EndChangeDeleg;
         public DelegRObj EndChangeDelegObj;
@@ -44,6 +37,7 @@
 
         private object retObj;
         private bool b_ObjInvoke = false;
+
         public RenameField(DelegRObj EndChangeDelegObj, object retObj)
         {
             b_ObjInvoke = true;
@@ -75,7 +69,6 @@
 
         public void Draw(Rect FuncVarDrawRect, string origName, bool allowChangeName, GUIStyle normalStyle, GUIStyle editStyle, bool noDelayEdit)
         {
-
             if (b_ForceStopEditRenameField)
             {
                 if (LastRename == this)
@@ -97,9 +90,9 @@
 
                 TempName = EditorGUI.TextField(FuncVarDrawRect, TempName, editStyle);
 
-                if(_LMB_Down || _RMB_Down)
+                if (_LMB_Down || _RMB_Down)
                 {
-                    if(!FuncVarDrawRect.Contains(Event.current.mousePosition))
+                    if (!FuncVarDrawRect.Contains(Event.current.mousePosition))
                     {
                         ForceStopEdit();
                     }
@@ -122,7 +115,7 @@
 
                 //if (GUI.Button(FuncVarDrawRect, origName, normalStyle))
 
-                if(_LMB_Up && FuncVarDrawRect.Contains(Event.current.mousePosition))
+                if (_LMB_Up && FuncVarDrawRect.Contains(Event.current.mousePosition))
                 {
                     LMB_Up_Deleg = delegate
                     {
@@ -141,7 +134,6 @@
                             TimeClick_ChangeName = TImeTime;
                     };
                 }
-
             }
         }
 
@@ -150,7 +142,6 @@
             b_ChangeName = true;
             LastRename = this;
             b_ForceStopEditRenameField = false;
-            
         }
 
         public static RenameField LastRename = null;
@@ -166,4 +157,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ResourcesC.cs Editor/m_ResourcesC.cs
--- .Editor/m_ResourcesC.cs	2018-06-30 08:59:18.728671800 +0700
+++ Editor/m_ResourcesC.cs	2018-06-30 09:02:03.868523300 +0700
@@ -1,16 +1,11 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static ResourcesC Res = new ResourcesC();
+
     public class ResourcesC
     {
         public Texture2D ListVar_Norm;
@@ -20,18 +15,15 @@
         public Texture2D ListVar_PasSelHover;
         public Texture2D ListVar_SelHover;
 
-
-
         public Texture IconMethod;
         public Texture IconProperty;
         public Texture IconIndexer;
 
-
-
-
         public Texture IconConstructor;
+
         //public Texture IconEvent;
         public Texture IconClass;
+
         public Texture IconField;
         public Texture icon_default_Node;
         public Texture IconEnum;
@@ -42,15 +34,8 @@
 
         //public Texture OpenDoc;
 
-
-
-
-
         public Texture new_Add;
 
-
-
-
         public Texture Pin_Connected;
         public Texture Pin_Disconnected;
         public Texture PinArray_Connected;
@@ -65,13 +50,9 @@
         public Texture Pin_Deleg_connected;
         public Texture Pin_Deleg_disconnected;
 
-
-
         public Texture ExecPin_Connected;
         public Texture ExecPin_Disconnected;
 
-
-
         public Texture BGTexture;
         public Texture EditGraphOverlay;
 
@@ -80,21 +61,13 @@
 
         public Texture Icon_Csh;
 
-
         public Texture Warning_yellow_Icon;
         public Texture2D SelectionRect;
 
-
         public Texture CommentaryNode_Normal;
         public Texture CommentaryNode_Selected;
         public Texture Commentary_Label_BG;
 
-
-
-
-
-
-
         public Texture Arrow_Up;
         public Texture Arrow_Down;
 
@@ -105,8 +78,6 @@
         public Texture ClassMoveNestRect;
         public Texture ClassInheritRect;
 
-
-
         public Texture Node_Error_Selected;
         public Texture Node_Selected;
         public Texture Node_Normal;
@@ -139,36 +110,29 @@
         public GUIStyle AddButton;
         public GUIStyle ButtonSimple;
 
-
         public GUIStyle EmptyStyle = new GUIStyle();//
         public GUIStyle CommentaryEditField_Edit;
         public GUIStyle CommentaryEditField_Normal;
 
-
         public GUIStyle BottonMsdSwitch;
 
-
         public GUIStyle RadioButton;
         public GUIStyle CheckBoxButton;
         public GUIStyle Box;
         public GUIStyle Box_Borders;
         public GUIStyle StateLabel;
 
-
         public Texture Progressbar;
 
-
         public Texture Tab;
         public Texture TabActive;
         public Texture TabBackground;
         public Texture WindowTitle;
 
-
         public Texture TabClose;
         public Texture TabClose_Hovered;
         public Texture TabClose_Pressed;
 
-
         public Texture Window_BG;
         public Texture Window;
         public Texture Foldout_BG;
@@ -185,9 +149,6 @@
         public Texture MenuButton_Pressed;
         public Texture MenuButton_Hovered;
 
-
-
-
         public Texture Button_Save;
         public Texture Button_SaveAs;
         public Texture Button_Options;
@@ -199,8 +160,6 @@
         public Texture Button_ExecuteApp;
         public Texture Button_Fit;
 
-
-
         public Texture Button_AddObj;
         public Texture Button_DelObj;
         public Texture Button_AddObj_Alone;
@@ -212,23 +171,17 @@
         public Texture BreakPoint;
         public Texture BreakPoint_Off;
 
-
         public Texture DebugPlayOverlay;
 
-
         public Texture Debug_Link_Point;
         public Texture EditGraph_LabelTab;
 
         public Texture error_node_icon;
 
-
-
-
         public Texture InfoWindow;
         public Texture ClassNestedLine_Hor;
         public Texture ClassNestedLine_Vert;
 
-
         public Texture Comment_Bubble;
         public Texture Error_Bubble;
         public Texture Error_Bubble_In_Pin;
@@ -245,33 +198,25 @@
         public Texture2D ControlBarButton_Hovered;
         public Texture2D ControlBarButton_Pressed;
 
-
         public Texture2D DropDownButton;
         public Texture2D ButtonReorder;
 
         public Texture2D ButtonSeqDiag;
         public Texture2D Button_WindowClose;
 
-
         public Texture2D SeqNodeConnector;
         public Texture2D SeqNodeConnector_disconnected;
         public Texture2D SeqNodeConnector_Dn;
         public Texture2D ResizeCorner;
 
-
-
         public Texture2D SeqIcon_Ok;
         public Texture2D SeqIcon_Warning;
         public Texture2D SeqIcon_Error;
         public Texture2D SeqIcon_Question;
 
-
-
         public Texture2D NodeSwitchButton_Lt;
         public Texture2D NodeSwitchButton_Rt;
 
-
-
         public Texture2D BaseWindow;
         public Texture2D Small_Window_BG;
 
@@ -280,12 +225,11 @@
         public Texture2D ConsoleIcon_Error;
         public Texture2D Debug_Box;
 
-
         public Texture2D PlaceFitBox;
 
-
         //NSM
         public Texture2D NSM_Window_BG;
+
         public Texture2D NSM_Window_Grid;
 
         public Texture2D NSM_Seq_Entry;
@@ -293,8 +237,7 @@
         public Texture2D NSM_Seq_Normal;
         public Texture2D NSM_Seq_Normal_Selected;
         public Texture2D NSM_TransitionArrow;
-        ///// 
-
+        /////
 
         public Texture CP_Gradient;
         public Texture2D CP_ColorGrad;
@@ -304,7 +247,6 @@
         public Texture CP_ColorPointPick;
         public Texture2D CP_ColorHor;
 
-        
         public Texture2D Math_Plus;
         public Texture2D Math_Minus;
         public Texture2D Math_Divide;
@@ -363,12 +305,8 @@
                 }
             }
 
-
-
             TextureRes = new Dictionary<string, Texture2D>();
 
-
-
             Math_Plus = GetTexture("Icons/Logic/math_plus");
             Math_Minus = GetTexture("Icons/Logic/math_minus");
             Math_Divide = GetTexture("Icons/Logic/math_divide");
@@ -404,7 +342,6 @@
             CP_ColorHor = GetTexture("ColorPicker/ColorHor");
             WhiteEmpty = GetTexture("ColorPicker/WhiteEmpty");
 
-
             ConsoleIcon_Info = GetTexture("Icons/ConsoleIcons/Icon_Info");
             ConsoleIcon_Warning = GetTexture("Icons/ConsoleIcons/Icon_Warning");
             ConsoleIcon_Error = GetTexture("Icons/ConsoleIcons/Icon_Error");
@@ -412,7 +349,6 @@
             BaseWindow = GetTexture("Windows/Open_Window_BG");
             Small_Window_BG = GetTexture("Windows/Small_Window_BG");
 
-
             NSM_Window_BG = GetTexture("StateMachine/Window_BG");
             NSM_Window_Grid = GetTexture("StateMachine/Window_Grid");
 
@@ -445,8 +381,6 @@
 
             Button_Scriptable = GetTexture("Buttons/Button_Scriptable");
 
-
-
             DropDownButton = GetTexture("Buttons/DropDownButton");
             ButtonReorder = GetTexture("Buttons/Button_Reorder");
 
@@ -457,10 +391,6 @@
             ControlBarButton_Hovered = GetTexture("Buttons/ControlBarButton_Hovered");
             ControlBarButton_Pressed = GetTexture("Buttons/ControlBarButton_Pressed");
 
-
-
-
-
             Comment_Bubble = GetTexture("InterfaceElements/Comment_Bubble");
             Error_Bubble = GetTexture("InterfaceElements/Error_Bubble");
             Error_Bubble_In_Pin = GetTexture("InterfaceElements/Error_Bubble_In_Pin");
@@ -470,7 +400,6 @@
 
             TabBackground = GetTexture("InterfaceElements/TabBackground");
 
-
             WindowTitle = GetTexture("InterfaceElements/WindowTitle");
 
             ToolBar = GetTexture("InterfaceElements/ToolBar");
@@ -507,7 +436,6 @@
             BreakPoint = GetTexture("InterfaceElements/BreakPoint");
             BreakPoint_Off = GetTexture("InterfaceElements/BreakPoint_Off");
 
-
             Debug_Link_Point = GetTexture("InterfaceElements/Debug_Link_Point");
 
             Progressbar = GetTexture("InterfaceElements/ProgressBar");
@@ -538,7 +466,6 @@
 
             ToolBar_Divider = GetTexture("InterfaceElements/ToolBar_Divider");
 
-
             SortLine = GetTexture("InterfaceElements/Sort_Divider");
             ClassMoveNestRect = GetTexture("InterfaceElements/MoveNestClass");
             ClassInheritRect = GetTexture("InterfaceElements/MoveInheritClass");
@@ -556,8 +483,6 @@
             IconStateMachine = GetTexture("Icons/Types/Icon_StateMachine");
             IconSMEvent = GetTexture("Icons/Types/Icon_SMEvent");
 
-
-
             //OpenDoc = GetTexture("Buttons/DocOpen");
 
             Beta_Label = GetTexture("Icons/Beta_Label");
@@ -567,23 +492,14 @@
             VarIcon = GetTexture("InterfaceElements/Var");
             VarIconArray = GetTexture("InterfaceElements/VarArray");
 
-
-
             EditGraphOverlay = GetTexture("Windows/EditGraphOverlay");
 
-
-
-
             Warning_yellow_Icon = GetTexture("Icons/Icon_WarningYellow");
 
             SelectionRect = GetTexture("InterfaceElements/SelectionRect");
 
-
-
             BGTexture = GetTexture("Windows/EditGraphBackground");
 
-
-
             ///////////////////////////////// NODE //////////////////////////////////
             CommentaryNode_Normal = GetTexture("NodeElements/CommentaryNode_Normal");
             CommentaryNode_Selected = GetTexture("NodeElements/CommentaryNode_Selected");
@@ -593,7 +509,6 @@
             Node_Selected = GetTexture("NodeElements/Node_selected");
             Node_Normal = GetTexture("NodeElements/Node_normal");
 
-
             Node_Math_Selected = GetTexture("NodeElements/MathNode");
             Node_Math_Normal = GetTexture("NodeElements/MathNode_selected");
 
@@ -616,7 +531,6 @@
             Pin_Deleg_connected = GetTexture("NodeElements/Pins/DelegPin_connected");
             Pin_Deleg_disconnected = GetTexture("NodeElements/Pins/DelegPin_disconnected");
 
-
             ExecPin_Connected = GetTexture("NodeElements/Pins/ExecPin_Сonnected");
             ExecPin_Disconnected = GetTexture("NodeElements/Pins/ExecPin_Disconnected");
             //////////////////////////////////////////////////////////////////
@@ -629,10 +543,8 @@
             Button_DelObj = GetTexture("Buttons/Button_DelObj");
             //////////////////////// Styles //////////////////////////////////////////
 
-
             CustomStylesGenerate();
 
-
             //GenerateStyleCode();
         }
 
@@ -996,8 +908,6 @@
             if (Options.b_ShowDebug) Debug.Log(StyleCode);
         }
 
-
-
         private static string GetBorderCode(string PrefixName, RectOffset offset, string styleName)
         {
             string result = "";
@@ -1010,7 +920,6 @@
             return result;
         }
 
-
         private static string GetColorCode(string PrefixName, Color32 color, string styleName)
         {
             string result = "";
@@ -1032,7 +941,6 @@
                 path = path.Replace("Assets/Plugins/Nottorus/Editor/Resources/", "");
                 path = path.Substring(0, path.Length - 4);
 
-
                 result = styleName + "." + PrefixName + " = GetTexture(\"" + path + "\");\r\n";
             }
 
@@ -1042,7 +950,6 @@
 
     private static Dictionary<string, Texture2D> TextureRes = new Dictionary<string, Texture2D>();
 
-
     private static Texture2D GetTexture(string TexName, bool fromDef = false, bool errorLog = true)
     {
         string loadTexName = "";
@@ -1083,5 +990,4 @@
             }
         }
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ReturnChecker.cs Editor/m_ReturnChecker.cs
--- .Editor/m_ReturnChecker.cs	2018-06-30 08:59:18.732672900 +0700
+++ Editor/m_ReturnChecker.cs	2018-06-30 09:02:03.870525200 +0700
@@ -1,16 +1,16 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public static m_ReturnChecker RetCheck = new m_ReturnChecker();
 
-
     public class m_ReturnChecker
     {
         private BaseScriptObject curDrawbl;
         private CR_Node StartNode = null;
+
         public bool CheckReturn(BaseScriptObject drawbl)
         {
             ClearAll();
@@ -42,6 +42,7 @@
 
             return result;
         }
+
         /////////////////////////////////////////////////////////
         private void ClearAll()
         {
@@ -50,6 +51,7 @@
             UnrechableCodeDetected = false;
             ClosedCycleDetected = false;
         }
+
         private List<CR_Node> AllNodes = new List<CR_Node>();
         public static bool UnrechableCodeDetected = false;
         public static bool ClosedCycleDetected = false;
@@ -63,7 +65,6 @@
         public static float MaxDrawY = 0;
         /////////////////////////////////////////////////////////
 
-
         public void Draw()
         {
             MaxDrawX = 0;
@@ -75,22 +76,17 @@
                 StartNode.Draw(Vector2.one * 10);
         }
 
-
         private CR_Node ProcessNodesRecursivelly(Node curNode)
         {
             CR_Node newNode = FindNodeInCR(curNode);
 
-
-
             if (newNode == null)
             {
-
-                newNode = new CR_Node();
-                newNode.NodeId = curNode.NodeID;
-                newNode.NodeName = curNode.Config.Name;
-
-
-
+                newNode = new CR_Node
+                {
+                    NodeId = curNode.NodeID,
+                    NodeName = curNode.Config.Name
+                };
 
                 AllNodes.Add(newNode);
 
@@ -102,14 +98,11 @@
                     newNode.NodeType = CR_NodeType.Return;
                     newNode.NodeName = "Return";
                 }
-
                 else if (curNode.DNodeType == DefNodeType.If || curNode.DNodeType == DefNodeType.Switch || curNode.DNodeType == DefNodeType.TryCatchFinally)
                     newNode.NodeType = CR_NodeType.LastOrOthers;
-
                 else if (curNode.DNodeType == DefNodeType.While || curNode.DNodeType == DefNodeType.For ||
                     curNode.DNodeType == DefNodeType.ForEachIndex || curNode.DNodeType == DefNodeType.DoWhile || curNode.DNodeType == DefNodeType.While)
                     newNode.NodeType = CR_NodeType.LastConn;
-
                 else if (curNode.DNodeType == DefNodeType.FlowControl || curNode.DNodeType == DefNodeType.Lock)
                     newNode.NodeType = CR_NodeType.AnyConn;
 
@@ -126,11 +119,12 @@
                         if (Options.b_ShowDebug) Debug.Log("Warning: More than one IN connector in node: " + curNode.Config.Name);
                 }
 
-
                 foreach (var connector in curNode.ConnectorsOut)
                 {
-                    var newConnector = new CR_Connector();
-                    newConnector.Name = connector.ConectorName;
+                    var newConnector = new CR_Connector
+                    {
+                        Name = connector.ConectorName
+                    };
                     //newConnector.Id = connector.ConnectorID;
                     newNode.ConnectorsOut.Add(newConnector);
 
@@ -170,7 +164,6 @@
             return AllNodes.Find(x => x.NodeId == curNode.NodeID);
         }
 
-
         public enum CR_NodeType
         {
             Default,
@@ -184,6 +177,7 @@
         {
             public string NodeName;
             public int NodeId;
+
             //public CR_Connector ConnectorIn = null;
             public List<CR_Connector> ConnectorsOut = new List<CR_Connector>();
 
@@ -257,8 +251,6 @@
                     }
                     if (ConnectorsOut.Count > 1)
                         if (Options.b_ShowDebug) Debug.Log("Node is not defined in CR checker! : " + NodeName);
-
-
                 }
 
                 //TODO: process other nodes types
@@ -279,13 +271,14 @@
             public bool FirstTimeDraw = false;
 
             public Vector2 InConnPos;
+
             public void Draw(Vector2 drawPos)
             {
                 if (FirstTimeDraw)
                     return;
                 FirstTimeDraw = true;
 
-                NodeRect = CreateRect(drawPos.x, drawPos.y, NodeWidth, NodeHeight);
+                NodeRect = new Rect(drawPos.x, drawPos.y, NodeWidth, NodeHeight);
 
                 float maxPosX = drawPos.x + NodeWidth;
                 float maxPosY = drawPos.y + NodeHeight;
@@ -301,9 +294,7 @@
 
                 if (UnrechableCode)
                     GUI.color = Color.yellow;
-                GUI.DrawTexture(CreateRect(NodeRect.position.x, NodeRect.position.y, NodeWidth, NodeHeight), Res.Node_Seq);
-
-
+                GUI.DrawTexture(new Rect(NodeRect.position.x, NodeRect.position.y, NodeWidth, NodeHeight), Res.Node_Seq);
 
                 var labelRect = NodeRect;
                 labelRect.x += 10;
@@ -311,7 +302,6 @@
                 GUI.Label(labelRect, NodeName, Res.MiddleBoldNameLabel);
                 GUI.color = Color.white;
 
-
                 InConnPos = new Vector2(NodeRect.x, NodeRect.y + 10);
 
                 bool offsetNode = false;
@@ -320,7 +310,6 @@
                 {
                     var currConn = ConnectorsOut[i];
 
-
                     if (currConn.LinkedWithNode != null)
                     {
                         if (offsetNode)
@@ -332,16 +321,13 @@
                             offsetNode = true;
                         }
                     }
-                  
-
 
                     float connPosY = 5 + i * 10;
-                    var inConnRect = CreateRect(NodeRect.x + NodeRect.width, NodeRect.y + connPosY, 8, 8);
+                    var inConnRect = new Rect(NodeRect.x + NodeRect.width, NodeRect.y + connPosY, 8, 8);
                     currConn.DrawConnector(inConnRect, new Vector2(NodeRect.position.x + NodeWidth + 30, DrawMaxPosY));
 
                     if (NodeHeight < connPosY + 15)
                         NodeHeight = connPosY + 15;
-
                 }
             }
         }
@@ -349,8 +335,10 @@
         private class CR_Connector
         {
             public string Name;
+
             //public int Id = 0;
             public int OwnerNodeId;
+
             public int LinkedNodeId;
 
             public CR_Node LinkedWithNode = null;
@@ -364,27 +352,24 @@
                 LinkedWithNode = newNode;
             }
 
-      
-
             public Rect ConnRect;
+
             public void DrawConnector(Rect connRect, Vector2 nextNodePos)
             {
-                   ConnRect = connRect;
+                ConnRect = connRect;
                 if (LinkedWithNode == null)
                 {
-                        GUI.DrawTexture(ConnRect, Res.SeqNodeConnector_disconnected);
+                    GUI.DrawTexture(ConnRect, Res.SeqNodeConnector_disconnected);
                 }
                 else
                 {
-                        GUI.DrawTexture(ConnRect, Res.SeqNodeConnector);
+                    GUI.DrawTexture(ConnRect, Res.SeqNodeConnector);
 
-                
                     if (ClosedCycle)
                         Handles.color = Color.red;
                     else if (UnreachableCode)
                         Handles.color = Color.yellow;
 
-
                     Handles.DrawLine(ConnRect.center, LinkedWithNode.InConnPos);
                     if (ClosedCycle || UnreachableCode)
                     {
@@ -439,6 +424,4 @@
             }
         }
     }
-
-   
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_RMB_MenuWindow.cs Editor/m_RMB_MenuWindow.cs
--- .Editor/m_RMB_MenuWindow.cs	2018-06-30 08:59:18.706666000 +0700
+++ Editor/m_RMB_MenuWindow.cs	2018-06-30 09:02:03.865522800 +0700
@@ -1,16 +1,12 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static RMB_MenuWindow RMB_Window = new RMB_MenuWindow();
+
     public class RMB_MenuWindow
     {
         public bool b_Active = false;
@@ -19,10 +15,8 @@
 
         private Vector2 WindowPos;
 
-       
-
         // Flow control
-      
+
         //BaseScriptObject
 
         private void ClearOpen()
@@ -63,6 +57,7 @@
         }
 
         private bool SelectOp = false;
+
         public void ShowSelectOperation(Vector2 windowPos, Node node, float width, List<string> operations) // ObjMenu
         {
             if (!Global_MouseInEditGraph)
@@ -79,7 +74,6 @@
             b_Active = true;
         }
 
-
         public void Show(Vector2 windowPos, Node node, LinkInfo link) // ObjMenu
         {
             if (!Global_MouseInEditGraph)
@@ -95,7 +89,6 @@
             b_Active = true;
         }
 
-
         public void Show(Vector2 windowPos, BaseScriptObject drawable) // ObjMenu
         {
             ClearOpen();
@@ -105,8 +98,8 @@
             CurScript.SetSelectedObject = Drawable;
             //drawable.Renamer.b_ChangeName = true;
 
-            WindowPos = windowPos; 
-          
+            WindowPos = windowPos;
+
             b_Active = true;
         }
 
@@ -130,9 +123,6 @@
                 b_HasConnections = Linking.EndPinLinksExite(node.NodeID, EditPin.PinID).Count != 0;
             }
 
-       
-
-
             b_Active = true;
         }
 
@@ -144,7 +134,7 @@
             ClearOpen();
             this.Node = node;
 
-            if(editConnector.ConnectorType == ConnectorTypeE.ConnectorIn)
+            if (editConnector.ConnectorType == ConnectorTypeE.ConnectorIn)
             {
                 b_HasConnections = Linking.EndConnectorLinkExite(node.NodeID, editConnector.ConnectorID) != null;
             }
@@ -152,7 +142,6 @@
             {
                 b_HasConnections = Linking.SourceConnectorLinkExite(node.NodeID, editConnector.ConnectorID) != null;
             }
-     
 
             WindowPos = sindowPos;
             EditConnector = editConnector;
@@ -161,6 +150,7 @@
 
         private bool b_HasConnections = false;
         private bool b_HasConnectorConnections = false;
+
         public void Close(bool CheckPos)
         {
             if (!CheckPos || !DrawRect.Contains(Event.current.mousePosition))
@@ -171,13 +161,12 @@
         {
             if (b_Active)
             {
-                DrawRect = CreateRect(WindowPos.x - 5, WindowPos.y - 5, Width, Height);
+                DrawRect = new Rect(WindowPos.x - 5, WindowPos.y - 5, Width, Height);
 
                 if (_LMB_Down || _RMB_Down)
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(Event.current.mousePosition))
@@ -188,21 +177,22 @@
 
                 GUI.Window(70, DrawRect, PinCMenuWindow, "", Res.EmptyStyle);
 
-                if(WindowPos.y + Height > BPE.position.height)
+                if (WindowPos.y + Height > BPE.position.height)
                 {
                     WindowPos.y = BPE.position.height - Height;
                 }
             }
         }
+
         private float Width = 230;
         private float Height = 55;
+
         void PinCMenuWindow(int windowID)
         {
-
             GUI.BringWindowToFront(windowID);
             GUI.FocusWindow(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.Small_Window_BG, 15, 15, 15, 15);
             if (Width > 100)
                 Height = 20;
             else
@@ -230,23 +220,17 @@
             {
                 DrawableMenu();
             }
-              
-           
-      
-       
-
-          
 
             Height += 3;
 
             if (Height < 35)
             {
-                GUI.Label(CreateRect(7, -3, 100, 30), "No actions avalible", Res.Label);//, Res.VarDropSpawnWindowLabel
+                GUI.Label(new Rect(7, -3, 100, 30), "No actions avalible", Res.Label);//, Res.VarDropSpawnWindowLabel
             }
             else
             {
-                if(Width > 100)
-                    GUI.Label(CreateRect(7, -3, 100, 30), "Actions:", Res.Label);
+                if (Width > 100)
+                    GUI.Label(new Rect(7, -3, 100, 30), "Actions:", Res.Label);
             }
         }
 
@@ -290,7 +274,6 @@
                         CurDrawable.NodeConnectorsLinks.Remove(link);
                     }
                     Linking.StopLinking();
-
                 }
                 else if (CurDrawable.NodePinsLinks.Contains(link))//is pin
                 {
@@ -312,7 +295,6 @@
                     }
                     Linking.StopLinking();
                 }
-
             }
         }
 
@@ -329,7 +311,7 @@
             {
                 DeleteSelectedScriptObjs();
             }
-            if(Drawable is ScriptProperty ||
+            if (Drawable is ScriptProperty ||
                 Drawable is ScriptFunction ||
                 Drawable is ScriptClassVariable ||
                 Drawable is ScriptLocalVariable ||
@@ -390,7 +372,6 @@
                     Node.Config.InPins.Insert(index + 1, new Node_Pin("", PinTypeE.PinIn, Node.Config.UniqInPinID));
                     Node.ReinitMathPins();
                 }
-
             }
             if (
                 Node.NodeType == NodeTypeE.Custom ||
@@ -403,8 +384,10 @@
             {
                 if (Button("Add to favorite list"))
                 {
-                    FavoriteNode newFavNode = new FavoriteNode();
-                    newFavNode.Name = Node.Config.Name;
+                    FavoriteNode newFavNode = new FavoriteNode
+                    {
+                        Name = Node.Config.Name
+                    };
 
                     if (Node.NodeType == NodeTypeE.Custom)
                     {
@@ -444,13 +427,12 @@
                         newFavNode.NodeType = NodeTypeE.Method;
                         newFavNode.FullTypeName = mi.DeclaringType.FullName;
                         newFavNode.FullAssmbName = mi.DeclaringType.Assembly.FullName;
-
-                        var parms = mi.GetParameters().ToList();
+                        
                         newFavNode.FullMemberName = "(";
                         newFavNode.MemberName = mi.Name;
 
                         bool first = false;
-                        foreach (var param in parms)
+                        foreach (var param in mi.GetParameters())
                         {
                             if (!first)
                                 first = true;
@@ -521,13 +503,11 @@
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Error: Pin or connector is null");
+                        if (Options.b_ShowDebug) Debug.Log("Error: Pin or connector is null");
                     }
                 }
             }
 
-
-
             if (EditPin != null)
             {
                 if (CurrentDrawLocalVariables != null)
@@ -541,8 +521,6 @@
                         var typeName = EditPin.type.typeFullName.Replace("&", "");
                         var type = GetTypeByName(EditPin.type.assemblyName, ref typeName);
 
-
-
                         string varName = "_newPromotedVar";
 
                         if (Options.bCustomNamePromotedVars)
@@ -557,15 +535,11 @@
                             }
                         }
 
-
-
                         ScriptLocalVariable newVar = new ScriptLocalVariable(varName, type);
                         CurScript.SetSelectedObject = newVar;
 
-
                         CurrentDrawLocalVariables.Add(newVar);
 
-
                         float offset = EditPin.PinType == PinTypeE.PinIn ? -400 : 50;
 
                         Node addNode = new Node(newVar, CurDrawable.GetEditGraphRealMousePos_NoOffset.x + offset, CurDrawable.GetEditGraphRealMousePos_NoOffset.y);
@@ -601,7 +575,6 @@
                         ScriptClassVariable newVar = new ScriptClassVariable(varName, type, true);
                         CurScript.SetSelectedObject = newVar;
 
-
                         CurClass.ClassVariables.Add(newVar);
 
                         if ((CurDrawable as BaseScriptObject)._IsStatic)
@@ -613,8 +586,6 @@
 
                         CurDrawable.Nodes.Add(addNode);
 
-
-
                         addNode.UpdateConfig(newVar.Config);
 
                         Node_Pin pin = EditPin.PinType == PinTypeE.PinIn ? addNode.Config.OutPins[0] : addNode.Config.InPins[0];
@@ -676,7 +647,7 @@
                         Node.Config.InPins.Insert(index, new Node_Pin(typeof(bool), "", PinTypeE.PinIn, Node.Config.UniqInPinID));
                     }
                 }
-        
+
                 ////////////////////////////////
 
                 if (Node.DNodeType == DefNodeType.TryCatchFinally && EditPin.PinType == PinTypeE.PinOut && Node.Config.InPins.Count > 1)
@@ -694,7 +665,6 @@
                 }
                 if (Node.DNodeType == DefNodeType.Math)
                 {
-
                     GUI.Box(new Rect(5, Height, Width - 10, 28), "", Res.Box);
                     Height += 5;
                     VarTypeChanger.DrawVarSelectType(10, Height, 0, EditPin.type, EditPin);
@@ -710,8 +680,6 @@
                 }
             }
 
-
-
             if (EditConnector != null)
             {
                 if (Node.DNodeType == DefNodeType.FlowControl && EditConnector.ConnectorType == ConnectorTypeE.ConnectorOut && Node.ConnectorsOut.Count > 2)
@@ -723,6 +691,7 @@
                 }
             }
         }
+
         private ChangeVarType VarTypeChanger = new ChangeVarType();
 
         private void DebugPinMenu()
@@ -730,73 +699,63 @@
             if (EditPin == null)
                 return;
 
-           
-
             if (Button("Debug pin"))
             {
                 if (EditPin.PinType != PinTypeE.PinOut)
                 {
                     var link = Linking.SourcePinLinkExite(Node.NodeID, EditPin.PinID);
 
-                    if(link != null)
+                    if (link != null)
                     {
                         var connNode = CurDrawable.Nodes.Find(x => x.NodeID == link.LNodeID);
 
-                        if(connNode != null)
+                        if (connNode != null)
                         {
                             var pin = connNode.Config.OutPins.Find(x => x.PinID == link.LNodeConPinID);
-                            if(pin != null)
+                            if (pin != null)
                             {
                                 AddDebugPin(connNode.NodeID, pin.PinID, Node.Config.Name, EditPin.PinName, EditPin.type.PType);
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("Can't find pin of linked node");
+                                if (Options.b_ShowDebug) Debug.Log("Can't find pin of linked node");
                             }
                         }
                         else
                         {
-                            if(Options.b_ShowDebug)Debug.Log("Can't find linked node: " + link.LNodeID);
+                            if (Options.b_ShowDebug) Debug.Log("Can't find linked node: " + link.LNodeID);
                         }
                     }
                     else
                     {
-                        if(Options.b_ShowDebug)Debug.Log("Pin must be connected to debug value");
+                        if (Options.b_ShowDebug) Debug.Log("Pin must be connected to debug value");
                     }
                 }
                 else
                 {
                     AddDebugPin(Node.NodeID, EditPin.PinID, Node.Config.Name, EditPin.PinName, EditPin.type.PType);
                 }
-
-
-              
             }
         }
 
-
         private bool Button(string name)
         {
             Height += 20;
 
-            var buttonRect = CreateRect(3, Height - 20, Width - 6, 20);
+            var buttonRect = new Rect(3, Height - 20, Width - 6, 20);
 
             bool result = GUI.Button(buttonRect, name, Res.MenuButton);
-            if(_LMB_Down && buttonRect.Contains(Event.current.mousePosition))
+            if (_LMB_Down && buttonRect.Contains(Event.current.mousePosition))
             {
                 LMB_Down_Deleg = delegate { result = true; };
-                
             }
 
-            if(result)
+            if (result)
             {
                 Close(false);
                 return true;
             }
             return false;
-
         }
-
-    
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_SaveLoad.cs Editor/m_SaveLoad.cs
--- .Editor/m_SaveLoad.cs	2018-06-30 08:59:18.736673300 +0700
+++ Editor/m_SaveLoad.cs	2018-06-30 09:02:03.871524500 +0700
@@ -1,65 +1,50 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
 using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
 using System.Text;
-using System.Xml.Serialization;
 using System.Xml;
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     #region Serialization
 
+    static XmlSerializer serializer = new XmlSerializer(typeof(ScriptData));
+
     public static void Serialize_Script(ScriptData data, string path, bool applyAssemblyRenamer)
     {
-      //  var serializer = new XmlSerializer(typeof(ScriptData));
-
-        bool Save_NoError = true;
-
-        string stringDocData = "";
+        StringWriter textWriter = new StringWriter();
+        XmlWriterSettings settings = new XmlWriterSettings()
+        {
+            Encoding = Encoding.UTF8,
+            Indent = true,
+            OmitXmlDeclaration = false
+        };
         try
         {
-            XmlSerializer serializer = new XmlSerializer(typeof(ScriptData));
-
-            XmlWriterSettings settings = new XmlWriterSettings();
-            settings.Encoding = Encoding.UTF8;
-            settings.Indent = true;
-            settings.OmitXmlDeclaration = false;
-
-
-
-
             if (applyAssemblyRenamer && data._RenameInReflection.Count > 0)
             {
                 var allNodess = data.GetAllNodes();
 
                 var reflectionNodesRename =
-                    allNodess.FindAll(
-                        x =>
+                    allNodess.FindAll(x =>
                             x.NodeType == NodeTypeE.Constructor || x.NodeType == NodeTypeE.Field ||
                             x.NodeType == NodeTypeE.Property || x.NodeType == NodeTypeE.Method);
                 reflectionNodesRename.ForEach(x => data.RenameAsmNode(x));
             }
 
-
-
-
-            using (StringWriter textWriter = new StringWriter())
+            using (XmlWriter xmlWriter = XmlWriter.Create(textWriter, settings))
             {
-                using (XmlWriter xmlWriter = XmlWriter.Create(textWriter, settings))
-                {
-                    serializer.Serialize(xmlWriter, data);
-                }
-                stringDocData = textWriter.ToString();
+                serializer.Serialize(xmlWriter, data);
             }
 
             if (applyAssemblyRenamer && data._RenameInReflection.Count > 0)
             {
                 XmlDocument xmlDoc = new XmlDocument();
-                xmlDoc.LoadXml(stringDocData);
+                xmlDoc.LoadXml(textWriter.ToString());
                 var nodes = xmlDoc.GetElementsByTagName("typeFullName");
 
                 List<string> renamedTypes = new List<string>();
@@ -77,12 +62,10 @@
                         {
                             string curPartName = partialName[i];
 
-
                             string owner = "";
                             if (i > 0)
                                 owner = partialName[i - 1];
 
-
                             curPartName = data.TryRenameReflection(owner, partialName[i], 0);
 
                             if (!first)
@@ -90,12 +73,11 @@
                             else
                                 finallyRenamedName += ".";
 
-
                             finallyRenamedName += curPartName;
                         }
 
                         if (nodeXML.InnerText != finallyRenamedName)
-                        {    
+                        {
                             if (!renamedTypes.Contains(finallyRenamedName))
                             {
                                 BConsole.EditorLog(
@@ -106,80 +88,55 @@
                             }
                             nodeXML.InnerText = finallyRenamedName;
                         }
-
                     }
                 }
                 try
                 {
                     var renNode = xmlDoc.GetElementsByTagName("_RenameInReflection");
-                  
-                    for (int i=0;i< renNode.Count;i++)
+
+                    for (int i = 0; i < renNode.Count; i++)
                     {
                         var nodeXML = renNode[0] as XmlElement;
                         nodeXML.ParentNode.RemoveChild(nodeXML);
                     }
-                    /*//throw errors in net 4.6 that collection was changed
-                    foreach (var node in renNode)
-                    {
-                        var nodeXML = node as XmlElement;
-                        if (nodeXML != null && nodeXML.ParentNode != null)
-                            nodeXML.ParentNode.RemoveChild(nodeXML);
-                    }
-                    */
                 }
                 catch
                 {
                     if (Options.b_ShowDebug) Debug.Log("Error while saving .nts file (but saved anyway). This can happen on unsuccessfull clearing rename cache in file after renaming some script member.");
                 }
 
-
-                using (var stringWriter = new StringWriter())
-                using (var xmlTextWriter = XmlWriter.Create(stringWriter, settings))
+                using (var xmlTextWriter = XmlWriter.Create(textWriter, settings))
                 {
                     xmlDoc.WriteTo(xmlTextWriter);
-                    xmlTextWriter.Flush();
-                    stringDocData = stringWriter.GetStringBuilder().ToString();
                 }
             }
-
+            using (StreamWriter sw = new StreamWriter(File.Open(path, FileMode.Create), Encoding.UTF8))
+            {
+                sw.WriteLine(textWriter);
+            }
         }
         catch (Exception e)
         {
             if (Options.b_ShowDebug) Debug.Log("Can't save! Exception: " + e);
-            Save_NoError = false;
         }
-
-
-        if(Save_NoError)
+        finally
         {
-            using (StreamWriter sw = new StreamWriter(File.Open(path, FileMode.Create), Encoding.UTF8))
-            {
-                sw.WriteLine(stringDocData);
-            }
-
-
-            /*
-            var writer = new StreamWriter(path);
-            serializer.Serialize(writer, data);
-            writer.Close();
-            */
-        } 
+            textWriter.Dispose();
+        }
     }
 
-
-    public static string ExtensionType = ".nts";
+    public const string ExtensionType = ".nts";
 
     public static void SaveScript(bool showMessage, bool renameTypes = false)
-    {     
+    {
         string path = CurScript.ScriptFileName;
         Options.AddLastScript(path);
         Serialize_Script(CurScript, path + ExtensionType, renameTypes);
         EditorOptions.Save();
-        if(showMessage)
+        if (showMessage)
             InfoMessages.ShowMessage("Saved");
     }
 
-
     public static ScriptData LoadScript(string filename)
     {
         string loadPath = filename + ExtensionType;
@@ -187,11 +144,9 @@
         {
             var lines = File.ReadAllLines(loadPath);
 
-            if(lines[0].Contains("encoding=\"utf-16\""))
+            if (lines.Length > 0 && lines[0].Contains("encoding=\"utf-16\""))
             {
-                var listLines = lines.ToList();
-                listLines.RemoveAt(0);
-                File.WriteAllLines(loadPath, listLines.ToArray());
+                File.WriteAllLines(loadPath, lines.Skip(1).ToArray());
             }
 
             var serializer = new XmlSerializer(typeof(ScriptData));
@@ -207,17 +162,15 @@
 
     #endregion
 
-
-
-
     public static void OpenAddScript(string file, bool initialise)
     {
-        ScriptData newScript = new ScriptData();
-        newScript.ScriptFileName = file;
+        ScriptData newScript = new ScriptData
+        {
+            ScriptFileName = file
+        };
         newScript = LoadScript(file);
-   
 
-        if (newScript != null) 
+        if (newScript != null)
         {
             CurrentScript = Scripts.Count;
             Scripts.Add(newScript);
@@ -231,7 +184,6 @@
         }
     }
 
-
     public static void OpenScriptFile()
     {
         string newScriptPath = EditorUtility.OpenFilePanel("Load script", Application.dataPath, ExtensionType.Replace(".", ""));
@@ -245,4 +197,4 @@
         newScriptPath = newScriptPath.Replace(Application.dataPath, "Assets");
         OpenAddScript(newScriptPath, true);
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptClassConstructor.cs Editor/m_ScriptClassConstructor.cs
--- .Editor/m_ScriptClassConstructor.cs	2018-06-30 08:59:18.741675400 +0700
+++ Editor/m_ScriptClassConstructor.cs	2018-06-30 09:02:03.873525000 +0700
@@ -1,12 +1,8 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Text.RegularExpressions;
-using System.Linq;using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -24,7 +20,9 @@
 
     public class ScriptClassConstructor : BaseScriptObject
     {
-        public ScriptClassConstructor() { }
+        public ScriptClassConstructor()
+        {
+        }
 
         public ScriptClassConstructor(string funcName)
         {
@@ -35,7 +33,6 @@
             //Config.LabelColor = new BPColor(new Color32(255, 0, 255, 255));
         }
 
-
         public ScriptClassConstructorControlNode GetEntryNodeConfig()
         {
             return new ScriptClassConstructorControlNode(this, NodeTypeE.ConstructorEntry);
@@ -45,7 +42,6 @@
         {
             return new ScriptClassConstructorControlNode(this, NodeTypeE.ConstructorExit);
         }
-        
 
         /////////////////////////////////////////////////////////////////
 
@@ -62,7 +58,6 @@
             return mods;
         }
 
-
         public string GetFuncArguments()
         {
             string args = "";
@@ -96,7 +91,6 @@
                 Properties.Remove(property);
             }
         }
-        
 
         public string GetModifiers()
         {
@@ -117,7 +111,6 @@
 
             if (m_ExecuteBase == 0)
             {
-               
             }
             else if (m_ExecuteBase == 1)
             {
@@ -125,7 +118,7 @@
                 result = new Node(NGP, 0, 0);
                 Nodes.Add(result);
             }
-            else if(m_ExecuteBase == 2)
+            else if (m_ExecuteBase == 2)
             {
                 var NGP = DefaultNodes_FlowControl.Find(x => x.DNodeType == DefNodeType.ExeThisBConstr);
                 result = new Node(NGP, 0, 0);
@@ -134,56 +127,52 @@
             return result;
         }
 
-
         public int m_AccessLevel = 2;
         public int m_ExecuteBase = 0;
 
         private M_Foldout ModifiersFold = new M_Foldout();
         private M_Foldout ExecFold = new M_Foldout();
+
         public override void DrawDetails()
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 150, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 150, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
-
-
             DrawDeleg modDraw = delegate
             {
                 FoldDrawPosY = 5;
-                
+
                 bool m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "None", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "None", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 150, 16), "public (by default)", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 150, 16), "public (by default)", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
                 FoldDrawPosY += 5;
 
                 FoldDrawPosY += 16;
                 bool m_Stat = m_AccessLevel == 3;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "static", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 3 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "static", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 3 : m_AccessLevel;
                 FoldDrawPosY += 5;
 
-
                 FoldDrawPosY += 16;
 
                 FoldDrawPosY += 5;
             };
             FoldDrawPosY += ModifiersFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Constructor Modifiers", modDraw, true);
-     
+
             DrawPins();
 
             FoldDrawPosY += 5;
@@ -195,20 +184,20 @@
                 EditorGUI.BeginChangeCheck();
 
                 bool m_Def = m_ExecuteBase == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "None", Res.Label);
-                m_ExecuteBase = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_ExecuteBase;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "None", Res.Label);
+                m_ExecuteBase = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_ExecuteBase;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_ExecuteBase == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "Execute 'base' constructor", Res.Label);
-                m_ExecuteBase = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_ExecuteBase;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "Execute 'base' constructor", Res.Label);
+                m_ExecuteBase = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_ExecuteBase;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_ExecuteBase == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 150, 16), "Execute 'this' constructor", Res.Label);
-                m_ExecuteBase = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_ExecuteBase;
+                GUI.Label(new Rect(30, FoldDrawPosY, 150, 16), "Execute 'this' constructor", Res.Label);
+                m_ExecuteBase = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_ExecuteBase;
 
-                if(EditorGUI.EndChangeCheck())
+                if (EditorGUI.EndChangeCheck())
                 {
                     ProcessExecBaseThis();
                 }
@@ -219,15 +208,10 @@
             };
             FoldDrawPosY += ExecFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Execute base/this constructor", modDraw, true);
 
-
-
-    
-
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Constructor);
         }
 
-
         private PinDrawRename[] InPinDrawer = new PinDrawRename[0];
         private M_Foldout InputsFold = new M_Foldout();
 
@@ -245,14 +229,13 @@
                 DrawInOutPins(Config.InPins, InPinDrawer);
 
                 FoldDrawPosY += 10;
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                 {
                     Config.InPins.Add(new Node_Pin(CurScript.DefaultSpawnType, CheckAvaliblePinName("NewInPin", Config.InPins, null), PinTypeE.PinIn, Config.UniqInPinID));
                 }
                 FoldDrawPosY += 30;
             };
 
-
             ///////////////////////////////////////
 
             FoldDrawPosY += InputsFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Constructor Arguments", inPinsDraw, true);
@@ -261,24 +244,24 @@
 
         private float maxWidth = 0;
         private float maxWidthFinal = 0;
+
         private void DrawInOutPins(List<Node_Pin> pinList, PinDrawRename[] pinDrawer)
         {
             maxWidth = 0;
             for (int i = 0; i < pinList.Count; i++)
             {
-
                 Node_Pin pin = pinList[i];
 
                 if (pinDrawer[i] == null)
                     pinDrawer[i] = new PinDrawRename(pin, pinList);
 
-                GUI.Box(CreateRect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
+                GUI.Box(new Rect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
 
                 FoldDrawPosY += 2;
 
                 float posX = 2;
 
-                if (GUI.Button(CreateRect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                if (GUI.Button(new Rect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                 {
                     pinList.Remove(pin);
                     return;
@@ -287,10 +270,8 @@
 
                 posX += 5;
 
-
-
                 ///////////////////// Shift ////////////////////////////
-                Rect ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                Rect ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                 GUI.enabled = i != 0;
                 if (GUI.Button(ButtonRect, "↑", Res.ButtonSimple))
                 {
@@ -301,7 +282,7 @@
                 posX += 16;
 
                 GUI.enabled = i < pinList.Count - 1;
-                ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                 if (GUI.Button(ButtonRect, "↓", Res.ButtonSimple))
                 {
                     int index = pinList.IndexOf(pin);
@@ -314,49 +295,36 @@
 
                 posX += 5;
 
-
-
-
-                pinDrawer[i].PinRenamer.Draw(CreateRect(posX, FoldDrawPosY, 100, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
+                pinDrawer[i].PinRenamer.Draw(new Rect(posX, FoldDrawPosY, 100, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
 
                 posX += 100;
 
                 posX += 5;
                 posX += 5;
 
-
                 //Type select
                 posX += pinDrawer[i].VarTypeChanger.DrawVarSelectType(posX, FoldDrawPosY, ToolbarRect.width - 40, pin.type, pin);
                 posX += 10;
 
                 float endOffset = 5;
 
-
                 endOffset += 5;
 
-
                 endOffset += 30;
-                GUI.Label(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "out", Res.Label);
+                GUI.Label(new Rect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "out", Res.Label);
 
                 endOffset += 16;
-                pin.IsOut = EditorGUI.Toggle(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsOut, Res.RadioButton);
-
+                pin.IsOut = EditorGUI.Toggle(new Rect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsOut, Res.RadioButton);
 
                 endOffset += 30;
-                GUI.Label(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "ref", Res.Label);
+                GUI.Label(new Rect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "ref", Res.Label);
 
                 endOffset += 16;
-                pin.IsRef = EditorGUI.Toggle(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsRef, Res.RadioButton);
-
-
-
-
-
+                pin.IsRef = EditorGUI.Toggle(new Rect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsRef, Res.RadioButton);
 
                 posX += endOffset;
                 pinDrawer[i].DrawWidth = posX;
 
-
                 if (maxWidth < posX)
                     maxWidth = posX;
 
@@ -366,7 +334,6 @@
             maxWidthFinal = maxWidth;
         }
 
-
         private void EndRenamePin(string newName, object retObj)
         {
             Node_Pin pin = retObj as Node_Pin;
@@ -374,7 +341,6 @@
             pin.PinName = CheckAvalibleInPinName(newName);
         }
 
-
         private string CheckAvalibleInPinName(string wantedName)
         {
             string newName = CheckCorrectStringName(wantedName, false);
@@ -419,12 +385,12 @@
         {
             return CurScript.isSelected(this);
         }
+
         public override bool b_IsPassiveSelected()
         {
             return CurClass.CurrentDrawable.DrawType == DrawableType.Constructor && CurClass.CurrentDrawable.ID == Obj_ID;
         }
 
-
         public override void Open()
         {
             CurScript.SetSelectedObject = this;
@@ -445,4 +411,4 @@
             return false;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptClass.cs Editor/m_ScriptClass.cs
--- .Editor/m_ScriptClass.cs	2018-06-30 08:59:18.739675200 +0700
+++ Editor/m_ScriptClass.cs	2018-06-30 09:02:03.872524000 +0700
@@ -1,13 +1,12 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
 using System.Text.RegularExpressions;
-
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -22,15 +21,17 @@
             Config.Name = CurScript.CheckFreeClassName(className, Obj_ID);
         }
 
-
         public bool StructType = false;
 
-        public ScriptClass() { }
+        public ScriptClass()
+        {
+        }
 
         public NSM_Editor.NSM_StateMachine_SaveData SMachineSaveData = null;
 
         /////////////////////////////////////
         public List<ScriptClassConstructor> ClassConstructors = new List<ScriptClassConstructor>();
+
         public List<ScriptClassVariable> ClassVariables = new List<ScriptClassVariable>();
         public List<ScriptClassEvent> ClassEvents = new List<ScriptClassEvent>();
 
@@ -44,18 +45,18 @@
         public int _drawId = -1;
 
         private ScriptClass parentClass = null;
+
         public ScriptClass GetParentClass()
         {
             if (NestedOwner == -1)
                 return null;
 
-            if(parentClass == null)
+            if (parentClass == null)
                 parentClass = CurScript.FindClassFromID(NestedOwner);
 
             return parentClass;
         }
-        
-       
+
         public void LoadInit()
         {
             //CheckInherit_Class();
@@ -65,10 +66,13 @@
         ///////////////////////////////////
         [XmlIgnore]
         public MethodInvokeInfo CurMethodInfokeInfo = null;
+
         [XmlIgnore]
         public List<MethodInvokeInfo> InvokeMethidsList = new List<MethodInvokeInfo>();
+
         [XmlIgnore]
         public int SelectedInvokeMethodIndex = -1;
+
         [XmlIgnore]
         public List<string> InvokeMethidsDisplayNameList = new List<string>();
 
@@ -86,18 +90,18 @@
                 return thisClassType;
             }
         }
+
         private Type thisClassType;
 
         public DrawableIdent CurrentDrawable = new DrawableIdent();
 
         public List<ClassInheritInterface> InheritedInterfaces = new List<ClassInheritInterface>();
 
-        
         public void InheritInterface(ClassInheritInterface newInterface)
         {
             if (InheritedInterfaces.Find(x => x.InterfaceType.PType == newInterface.InterfaceType.PType) != null)
             {
-                BConsole.EditorLog("Class '" + Config.Name + "' is allready has interface '" + newInterface.InterfDefineName + "'", 0);
+                BConsole.EditorLog("Class '" + Config.Name + "' is already has interface '" + newInterface.InterfDefineName + "'", 0);
                 return;
             }
 
@@ -107,26 +111,20 @@
             {
                 Type interfType = newInterface.GetInterfaceType();
 
-
                 if (!interfType.IsInterface)
                 {
-                    if(Options.b_ShowDebug)Debug.Log(interfType.Name + " is not a interface!");
+                    if (Options.b_ShowDebug) Debug.Log(interfType.Name + " is not a interface!");
                     return;
                 }
 
-                MethodInfo[] interfMethods = interfType.GetMethods().ToList().OrderBy(x => x.Name).ToArray();
-                foreach (MethodInfo intMInfo in interfMethods)
+                foreach (MethodInfo intMInfo in interfType.GetMethods())
                 {
-                    if (intMInfo.IsSpecialName)
-                    {
-                    }
-                    else
+                    if (!intMInfo.IsSpecialName)
                     {
                         CreateInherMethod(interfType, intMInfo);
                     }
                 }
-                PropertyInfo[] interfProperties = interfType.GetProperties().ToList().OrderBy(x => x.Name).ToArray();
-                foreach (PropertyInfo intMInfo in interfProperties)
+                foreach (PropertyInfo intMInfo in interfType.GetProperties())
                 {
                     CreateInherProperty(interfType, intMInfo);
                 }
@@ -136,6 +134,7 @@
                 //TODO: Inherit from custom interface
             }
         }
+
         public void UnInheritInterface(ClassInheritInterface delInterface)
         {
             if (InheritedInterfaces.Find(x => x.InterfDefineName == delInterface.InterfDefineName) != null)
@@ -153,7 +152,6 @@
             }
         }
 
-
         ///////////////////////////////////////////////
         private void CreateInherMethod(Type interfType, MethodInfo intMInfo)
         {
@@ -165,16 +163,17 @@
                 return;
             }
 
-            ScriptFunction newFunc = _CreateMethod(intMInfo.Name, false, intMInfo.IsVirtual, true, Functions);//Allow nodes: 
+            ScriptFunction newFunc = _CreateMethod(intMInfo.Name, false, intMInfo.IsVirtual, true, Functions);//Allow nodes:
             ResetupInheriteMethod(newFunc, interfType, intMInfo);
         }
+
         private void ResetupInheriteMethod(ScriptFunction newFunc, Type interfType, MethodInfo intMInfo)
         {
             newFunc.IsInherited = true;
             newFunc.IsInheritedFromInterface = intMInfo.DeclaringType.IsInterface;
 
             newFunc.InheritedName = RenameTypeVarName(interfType, true);
-         
+
             //////////////////
             newFunc.m_AccessLevel = 0;
             newFunc.AllowNodes_Inherited = intMInfo.DeclaringType.IsInterface;
@@ -208,7 +207,7 @@
             //////////////////
             newFunc.m_StaticVirtOvverAbstract = 0;
             if (!intMInfo.DeclaringType.IsInterface)
-            {     
+            {
                 if (intMInfo.IsVirtual)
                 {
                     newFunc.m_StaticVirtOvverAbstract = 3;
@@ -230,13 +229,11 @@
             else if (interfType.IsClass)
                 newFunc.InheritedType = "C";
 
-            if(newFunc.AllowNodes_Inherited)
+            if (newFunc.AllowNodes_Inherited)
                 newFunc.InheritedType += "o";
 
             NodeGenPins customNode = new NodeGenPins(intMInfo, false, true);
 
-
-
             for (int i = 0; i < customNode.InPins.Length; i++)
             {
                 newFunc.Config.InPins.Add(new Node_Pin(customNode.InPins[i], customNode.InPinsNames[i], PinTypeE.PinIn, newFunc.Config.UniqInPinID));
@@ -285,19 +282,16 @@
 
             newProp.Config.NodeRefType2_propOwner = new BType(intPInfo.ReflectedType);
 
-
             ParameterInfo[] pInf = intPInfo.GetIndexParameters();
             newProp.Config.NodeRefType3_Indexer = new List<BType>();
-            pInf.ToList().ForEach(x => newProp.Config.NodeRefType3_Indexer.Add(new BType(x.ParameterType)));
-
+            foreach (var x in pInf)
+                newProp.Config.NodeRefType3_Indexer.Add(new BType(x.ParameterType));
 
             //////////////////
             newProp.m_AccessLevel = 0;
             newProp.AllowNodes_Inherited = false;
 
-            
-
-            if(propMethod == null)
+            if (propMethod == null)
                 propMethod = intPInfo.GetSetMethod(true);
 
             if (propMethod.IsPrivate)
@@ -358,6 +352,7 @@
                 newProp._Get = false;
             }
         }
+
         ///////////////////////////////////////////////
 
         private void CreateInherField(Type interfType, FieldInfo inhFInfo)
@@ -377,7 +372,6 @@
             newVar.IsInherited = true;
             newVar.InheritedName = RenameTypeVarName(interfType, true);
 
-
             newVar.ChangeVarType(inhFInfo.FieldType);
 
             newVar.Config.NodeRefType2_propOwner = new BType(inhFInfo.ReflectedType);
@@ -386,7 +380,6 @@
             newVar.m_AccessLevel = 0;
             newVar.AllowNodes_Inherited = false;
 
-
             if (inhFInfo.IsPrivate)
             {
                 newVar.m_AccessLevel = 1;
@@ -408,7 +401,6 @@
                 newVar.m_AccessLevel = 5;
             }
 
-
             if (inhFInfo.IsStatic)
             {
                 newVar.m_StaticConst = 1;
@@ -419,15 +411,12 @@
                 newVar.m_StaticConst = 2;
             }
 
-
             if (inhFInfo.IsInitOnly)
             {
                 newVar.m_ReadOnly = true;
             }
         }
 
-
-
         ///////////////////////////////////////////////
 
         private void CreateInherEvent(Type eventType, EventInfo inhEInfo)
@@ -435,12 +424,12 @@
             ScriptClassEvent newEvent = _CreateEvent(inhEInfo.Name, ClassEvents, false);
             ResetupInheriteEvent(newEvent, eventType, inhEInfo);
         }
+
         private void ResetupInheriteEvent(ScriptClassEvent newVar, Type interfType, EventInfo intPInfo)
         {
             newVar.IsInherited = true;
             newVar.InheritedName = RenameTypeVarName(interfType, true);
 
-
             newVar.ChangeVarType(intPInfo.EventHandlerType);
 
             newVar.Config.NodeRefType2_propOwner = new BType(intPInfo.ReflectedType);
@@ -475,8 +464,6 @@
             }
         }
 
-
-
         ///////////////////////////////////////////////
 
         private List<string> GetInheritNameList(Type inheritType)
@@ -499,8 +486,6 @@
             return result;
         }
 
-
-
         public void TryInherit(Type inheritType)
         {
             UnInheritClass();
@@ -523,9 +508,9 @@
 
         private void UnInheritClass(bool dontAsk = false)
         {
-            if(InheritClassBType == null || InheritClassBType.PType == typeof(None))
+            if (InheritClassBType == null || InheritClassBType.PType == typeof(None))
             {
-                return; 
+                return;
             }
 
             if (dontAsk || EditorUtility.DisplayDialog("Clear inherit", "Do you really want to clear inheritance? It will delete all inherited functions, variables and nodes.", "Clear inherit", "Cancel"))
@@ -590,7 +575,6 @@
         }
         */
 
-
         public void CheckInherit_Class()
         {
             //List<ScriptFunction> Inherited_Functions = Functions.FindAll(x => x.IsInherited);
@@ -610,53 +594,25 @@
                     inherType = InheritClassBType.PType;
                 }
 
-
                 if (inherType == null)
                     return;
 
                 BindingFlags flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy;
 
-                
-
-                MethodInfo[] interfMethods = inherType.GetMethods(flags).ToList().OrderBy(x => x.Name).ToArray();
-                foreach (MethodInfo intMInfo in interfMethods)
+                foreach (MethodInfo intMInfo in inherType.GetMethods(flags))
                 {
                     if (!intMInfo.IsSpecialName)//Ignore property methods
                     {
                         CreateInherMethod(inherType, intMInfo);
-                        /*
-                        var funcsMachName = Functions.FindAll(x => x.IsInherited && x.InheritedName == inherType.Name && x.Config.Name == intMInfo.Name);
-
-                        ScriptFunction checkFunction = funcsMachName.Find(x => CheckPins(intMInfo, x, false));
-
-                     
-                        if (checkFunction == null)
-                        {
-                            CreateInherMethod(inherType, intMInfo);
-                        }
-                        else
-                        {
-                            if (checkFunction.InheritedName == inherType.Name)
-                            {
-                                //if(Options.b_ShowDebug)Debug.Log("Allready inherited method " + intMInfo.Name + " in " + Config.Name + ". Ignoring..");
-                                continue;
-                            }
-
-                            ResetupInheriteMethod(checkFunction, inherType, intMInfo);
-                        }
-                        */
                     }
                 }
 
-                PropertyInfo[] interfProperties = inherType.GetProperties(flags).ToList().OrderBy(x => x.Name).ToArray();
-                foreach (PropertyInfo intMInfo in interfProperties)
+                foreach (PropertyInfo intMInfo in inherType.GetProperties(flags))
                 {
-                    string tempName = intMInfo.Name;//.Replace("get_", "").Replace("set_", "");
+                    string tempName = intMInfo.Name;
 
                     ScriptProperty checkProp = ScriptProperties.Find(x => x.IsInherited && x.InheritedName == inherType.Name && x.Config.Name == tempName);
 
-
-
                     if (checkProp == null)
                     {
                         CreateInherProperty(inherType, intMInfo);
@@ -673,17 +629,12 @@
                     }
                 }
 
-
-
-                FieldInfo[] interfFields = inherType.GetFields(flags).ToList().OrderBy(x => x.Name).ToArray();
-                foreach (FieldInfo fInfo in interfFields)
+                foreach (FieldInfo fInfo in inherType.GetFields(flags))
                 {
                     string tempName = fInfo.Name;//.Replace("get_", "").Replace("set_", "");
 
                     ScriptClassVariable checkVar = ClassVariables.Find(x => x.IsInherited && x.InheritedName == inherType.Name && x.Config.Name == tempName);
 
-
-
                     if (checkVar == null)
                     {
                         CreateInherField(inherType, fInfo);
@@ -700,8 +651,7 @@
                     }
                 }
 
-
-                EventInfo[] inherEvents = inherType.GetEvents(flags).ToList().OrderBy(x => x.Name).ToArray();
+                EventInfo[] inherEvents = inherType.GetEvents(flags).ToArray();
                 foreach (EventInfo eInfo in inherEvents)
                 {
                     string tempName = eInfo.Name;//.Replace("get_", "").Replace("set_", "");
@@ -728,14 +678,11 @@
             }
         }
 
-
-
         /*
         private bool CheckPins(MethodInfo intMInfo, ScriptFunction newFunc, bool showDebug)
         {
             NodeGenPins customNode = new NodeGenPins(intMInfo, false, true);
 
-
             if (newFunc.Config.InPins.Count != customNode.InPins.Length)
             {
                 if(showDebug)
@@ -774,7 +721,6 @@
         */
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-
         public void RemoveFunc(ScriptFunction Func)
         {
             DeleteFuncNodes(Func);
@@ -782,11 +728,13 @@
 
             CurScript.SelectedScriptObjects = new List<BaseScriptObject>();
         }
+
         public void RemoveClassContructor(ScriptClassConstructor Cons)
         {
             CurClass.ClassConstructors.Remove(Cons);
             CurScript.SelectedScriptObjects = new List<BaseScriptObject>();
         }
+
         public void RemoveClassVar(ScriptClassVariable Var)
         {
             DeleteClassVarNodes(Var.Obj_ID);
@@ -816,9 +764,6 @@
             CurScript.SelectedScriptObjects = new List<BaseScriptObject>();
         }
 
-
-
-
         /////////////////////////////////////////////////////////////////////
         private void DeletePropertyNodes(ScriptProperty Prop)
         {
@@ -836,12 +781,12 @@
             {
                 var delNodes = drawbl.Nodes.FindAll(x => x.ReferenceID == Func.Obj_ID && x.NodeType == NodeTypeE.ClassFunction);
 
-                foreach(var node in delNodes)
+                foreach (var node in delNodes)
                 {
                     drawbl.NodeConnectorsLinks.RemoveAll(x => x.NodeID == node.NodeID || x.LNodeID == node.NodeID);
                     drawbl.NodePinsLinks.RemoveAll(x => x.NodeID == node.NodeID || x.LNodeID == node.NodeID);
                 }
-             
+
                 drawbl.Nodes.RemoveAll(x => delNodes.Contains(x));
             }
         }
@@ -902,7 +847,6 @@
 
         /////////////////////////////////////////////////////////////////////////////////////////
 
-
         public string CheckFreeFunctionName(string wantedName, int functionID)
         {
             List<ScriptFunction> FunctionsToTest = CurClass.Functions;
@@ -915,7 +859,6 @@
                 return testName;
             }
 
-
             ScriptFunction testVar = FunctionsToTest.Find(x => x.Config.Name == testName && x.Obj_ID != functionID);
 
             if (testVar == null && testName != CurClass.Config.Name)
@@ -923,9 +866,6 @@
                 return testName;
             }
 
-
-
-
             string endNums = Regex.Match(testName, @"[0-9]+$").Value;
 
             if (endNums.Length > 0)
@@ -933,9 +873,6 @@
 
             string genName = testName;
 
-
-
-
             int nameAppend = 0;
             while (nameAppend < 1000)
             {
@@ -950,13 +887,11 @@
                 }
             }
 
-            if(Options.b_ShowDebug)Debug.Log("Can't find free name for this variable!");
+            if (Options.b_ShowDebug) Debug.Log("Can't find free name for this variable!");
 
             return "NULL";
         }
 
-
-
         public string CheckFreeVariableName(string wantedName, int VarID)
         {
             string rezName = CheckFreeClassVariableName(wantedName, VarID);
@@ -965,6 +900,7 @@
             rezName = CheckFreeEventName(rezName, VarID);
             return rezName;
         }
+
         private string CheckFreeClassVariableName(string wantedName, int VarID)
         {
             List<ScriptClassVariable> VarsToTest = ClassVariables;
@@ -982,16 +918,8 @@
             if (testVar == null)
                 return testName;
 
-
-
-
-
-
             string genName = RegEx(testName);
 
-
-
-
             int nameAppend = 0;
 
             while (nameAppend < 1000)
@@ -1007,10 +935,11 @@
                 }
             }
 
-            if(Options.b_ShowDebug)Debug.Log("Can't find free name for this variable!");
+            if (Options.b_ShowDebug) Debug.Log("Can't find free name for this variable!");
 
             return "NULL";
         }
+
         private string CheckFreeLocalVariableName(string wantedName, int VarID)
         {
             List<ScriptLocalVariable> VarsToTest = new List<ScriptLocalVariable>();
@@ -1031,11 +960,8 @@
             if (testVar == null)
                 return testName;
 
-
-
             string genName = RegEx(testName);
 
-
             int nameAppend = 0;
 
             while (nameAppend < 1000)
@@ -1051,10 +977,11 @@
                 }
             }
 
-            if(Options.b_ShowDebug)Debug.Log("Can't find free name for this variable!");
+            if (Options.b_ShowDebug) Debug.Log("Can't find free name for this variable!");
 
             return "NULL";
         }
+
         private string CheckFreePropertyVariableName(string wantedName, int VarID)
         {
             List<ScriptProperty> VarsToTest = CurClass.ScriptProperties;
@@ -1072,11 +999,8 @@
             if (testVar == null)
                 return testName;
 
-
-
             string genName = RegEx(testName);
 
-
             int nameAppend = 0;
 
             while (nameAppend < 1000)
@@ -1092,10 +1016,11 @@
                 }
             }
 
-            if(Options.b_ShowDebug)Debug.Log("Can't find free name for this variable!");
+            if (Options.b_ShowDebug) Debug.Log("Can't find free name for this variable!");
 
             return "NULL";
         }
+
         private string CheckFreeEventName(string wantedName, int VarID)
         {
             List<ScriptClassEvent> VarsToTest = CurClass.ClassEvents;
@@ -1113,11 +1038,8 @@
             if (testVar == null)
                 return testName;
 
-
-
             string genName = RegEx(testName);
 
-
             int nameAppend = 0;
 
             while (nameAppend < 1000)
@@ -1138,7 +1060,6 @@
             return "NULL";
         }
 
-
         public static string RegEx(string testName)
         {
             string Rez = testName;
@@ -1151,16 +1072,14 @@
             return Rez;
         }
 
-
         public List<BaseScriptObject> GetAllDrawableObjects()
         {
             List<BaseScriptObject> result = new List<BaseScriptObject>();
             //
-            //result.AddRange(ClassEvents.Select(x => x as BaseScriptObject).ToList());
-            result.AddRange(Functions.Select(x => x as BaseScriptObject).ToList());
-            result.AddRange(ScriptProperties.Select(x => x.Drawable_Get).ToList());
-            result.AddRange(ScriptProperties.Select(x => x.Drawable_Set).ToList());
-            result.AddRange(ClassConstructors.Select(x => x as BaseScriptObject).ToList());
+            result.AddRange(Functions.Select(x => x as BaseScriptObject));
+            result.AddRange(ScriptProperties.Select(x => x.Drawable_Get));
+            result.AddRange(ScriptProperties.Select(x => x.Drawable_Set));
+            result.AddRange(ClassConstructors.Select(x => x as BaseScriptObject));
 
             if (SMachineSaveData != null)
             {
@@ -1170,33 +1089,17 @@
             return result;
         }
 
-
-
         public List<Node> GetAllNodes()
         {
             List<BaseScriptObject> Drawbls = GetAllDrawableObjects();
             return Drawbls.SelectMany(x => x.Nodes).ToList();
         }
 
-        /*
-        public int UsedVarNodesCount(ScriptClassVariable Var)
-        {
-            List<Node> NodesToUpdate = new List<Node>();
-
-            foreach (ScriptFunction func in CurClass.Functions)
-                NodesToUpdate.AddRange(func.Nodes);
-
-            return NodesToUpdate.FindAll(x => x.ReferenceID == Var.Obj_ID && x.NodeType == NodeTypeE.ClassVariable).Count;
-        }
-        */
-
         public int UsedVarNodesCount(ScriptLocalVariable Var)
         {
             return GetAllNodes().FindAll(x => x.ReferenceID == Var.Obj_ID && x.NodeType == NodeTypeE.LocalVariable).Count;
         }
 
-
-
         public bool IsMonobehaviour
         {
             get
@@ -1207,13 +1110,14 @@
 
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-            //0 - default, 1- private, 2- public
+        //0 - default, 1- private, 2- public
         public int m_AccessLevel = 2;
 
         public bool m_Sealed = false;
         public bool m_Partial = false;
         public bool m_Abstract = false;
         public bool m_Static = false;
+
         public string GetModifiers()
         {
             string mods = "";
@@ -1250,29 +1154,28 @@
                     BConsole.EditorLog("Class '" + Config.Name + "' can't be accessible less than class '" + InheritScriptClass.Config.Name + "'. Fixed to same modificators.", Color.yellow, 50);
                 }
             }
-            else 
+            else
             */
-            
+
             if (InheritClassBType != null)
             {
                 if (InheritClassBType.PType == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Error: Can't find/load inherit Type");
+                    if (Options.b_ShowDebug) Debug.Log("Error: Can't find/load inherit Type");
                     InheritClassBType = null;
                     return;
                 }
             }
 
-            if(NestedOwner == -1)
+            if (NestedOwner == -1)
             {
-                if(m_AccessLevel < 2)
+                if (m_AccessLevel < 2)
                 {
                     m_AccessLevel = 2;
                     BConsole.EditorLog("Namespace elements cannot be explicitly declared as private, protected or protected internal. Fixed to public", 1);
                 }
             }
 
-
             foreach (ScriptClass subClass in NestedClasses)
                 subClass.CheckModifiers();
         }
@@ -1304,11 +1207,11 @@
             {
                 if (InheritClassBType.PType == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Error: Can't find/load inherit Type. Last name: " + InheritClassBType.typeFullName);
+                    if (Options.b_ShowDebug) Debug.Log("Error: Can't find/load inherit Type. Last name: " + InheritClassBType.typeFullName);
                     InheritClassBType = null;
                     return "";
                 }
-                else if(InheritClassBType.PType == typeof(None))
+                else if (InheritClassBType.PType == typeof(None))
                 {
                     return "";
                 }
@@ -1335,7 +1238,7 @@
 
             if (IsMonobehaviour)
             {
-                Rect iconRect = CreateRect(0, offsetY, 16, 16);
+                Rect iconRect = new Rect(0, offsetY, 16, 16);
                 GUI.DrawTexture(iconRect, Res.Icon_Csh);
                 offsetX2 = 16;
                 if (_LMB_Down && iconRect.Contains(Event.current.mousePosition))
@@ -1362,10 +1265,10 @@
 
             if (!StructType)
             {
-                drawRect = CreateRect(posX - 5, offsetY, drawWidth, 16);
+                drawRect = new Rect(posX - 5, offsetY, drawWidth, 16);
                 /*
                 GUI.DrawTexture(drawRect, Res.ListVar_Norm);
-             
+
                 */
 
                 GUI.Label(drawRect, ":", Res.Label);
@@ -1380,28 +1283,21 @@
                     TypeSelectList.Show(new Vector2(drawRect.x + 9, drawRect.y + 90), TryInherit, TypeSelect_Type.Class);
                 }
            */
-
-
             }
 
             string classStructNamePref = StructType ? "S: " : "C: ";
-            drawRect = CreateRect(offsetX2, offsetY, 16, 16);
-
+            drawRect = new Rect(offsetX2, offsetY, 16, 16);
 
             if (drawRect.Contains(Event.current.mousePosition))
             {
                 GUIToolTipe = (StructType ? "Struct: " : "Class: ") + Config.Name;
             }
 
-
             GUI.Label(drawRect, classStructNamePref, Res.Label);
             offsetX2 += 10;
 
             Draw(Config.Name, ToolbarRect.width / 2 + offsetX2, offsetX + offsetX2, offsetY);
 
-        
-
-
             return posX + drawWidth + offsetX2;
         }
 
@@ -1426,23 +1322,23 @@
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 100, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-            GUI.Box(CreateRect(3, FoldDrawPosY- 3, DetailsRect.width - 6, 23), "", Res.Box);
+            GUI.Box(new Rect(3, FoldDrawPosY - 3, DetailsRect.width - 6, 23), "", Res.Box);
 
             EditorGUI.BeginChangeCheck();
-            StructType = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), StructType, Res.CheckBoxButton);
+            StructType = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), StructType, Res.CheckBoxButton);
 
             if (EditorGUI.EndChangeCheck())
             {
-                if(StructType)
+                if (StructType)
                 {
                     if (InheritClassBType != null && InheritClassBType.PType != typeof(None))
                     {
-                        if(EditorUtility.DisplayDialog("Delete inheritance", "Structs inheritance is not allowed in C# language. Clear inherit class? It will delete all inherited functions and variables.", "Clear inherit", "Cancel"))
+                        if (EditorUtility.DisplayDialog("Delete inheritance", "Structs inheritance is not allowed in C# language. Clear inherit class? It will delete all inherited functions and variables.", "Clear inherit", "Cancel"))
                         {
                             UnInheritClass(true);
                         }
@@ -1463,7 +1359,7 @@
                 m_Static = false;
             }
 
-            GUI.Label(CreateRect(35, FoldDrawPosY, 90, 16), "Struct", Res.Label);
+            GUI.Label(new Rect(35, FoldDrawPosY, 90, 16), "Struct", Res.Label);
 
             FoldDrawPosY += 20;
 
@@ -1472,56 +1368,50 @@
                 EditorGUI.BeginChangeCheck();
 
                 bool m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(35, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(35, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 if (StructType)
                     GUI.enabled = false;
 
-                GUI.Label(CreateRect(175, FoldDrawPosY, 90, 16), "'sealed'", Res.Label);
-                m_Sealed = EditorGUI.Toggle(CreateRect(150, FoldDrawPosY, 16, 16), m_Sealed, Res.CheckBoxButton);
+                GUI.Label(new Rect(175, FoldDrawPosY, 90, 16), "'sealed'", Res.Label);
+                m_Sealed = EditorGUI.Toggle(new Rect(150, FoldDrawPosY, 16, 16), m_Sealed, Res.CheckBoxButton);
 
                 if (m_Sealed)
                     m_Static = false;
 
                 GUI.enabled = true;
 
-
                 FoldDrawPosY += 16;
 
-          
-
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(35, FoldDrawPosY, 90, 16), "'private'", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
+                GUI.Label(new Rect(35, FoldDrawPosY, 90, 16), "'private'", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 if (StructType)
                     GUI.enabled = false;
 
-                GUI.Label(CreateRect(175, FoldDrawPosY, 90, 16), "'static'", Res.Label);
-                m_Static = EditorGUI.Toggle(CreateRect(150, FoldDrawPosY, 16, 16), m_Static, Res.CheckBoxButton);
+                GUI.Label(new Rect(175, FoldDrawPosY, 90, 16), "'static'", Res.Label);
+                m_Static = EditorGUI.Toggle(new Rect(150, FoldDrawPosY, 16, 16), m_Static, Res.CheckBoxButton);
 
                 if (m_Static)
                     m_Sealed = false;
 
-          
-
                 GUI.enabled = true;
 
                 FoldDrawPosY += 16;
 
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(35, FoldDrawPosY, 90, 16), "'public'", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(35, FoldDrawPosY, 90, 16), "'public'", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
 
-
-                GUI.Label(CreateRect(175, FoldDrawPosY, 90, 16), "'partial'", Res.Label);
-                m_Partial = EditorGUI.Toggle(CreateRect(150, FoldDrawPosY, 16, 16), m_Partial, Res.CheckBoxButton);
+                GUI.Label(new Rect(175, FoldDrawPosY, 90, 16), "'partial'", Res.Label);
+                m_Partial = EditorGUI.Toggle(new Rect(150, FoldDrawPosY, 16, 16), m_Partial, Res.CheckBoxButton);
 
                 FoldDrawPosY += 16;
 
-                GUI.Label(CreateRect(175, FoldDrawPosY, 90, 16), "'abstract'", Res.Label);
-                m_Abstract = EditorGUI.Toggle(CreateRect(150, FoldDrawPosY, 16, 16), m_Abstract, Res.CheckBoxButton);
+                GUI.Label(new Rect(175, FoldDrawPosY, 90, 16), "'abstract'", Res.Label);
+                m_Abstract = EditorGUI.Toggle(new Rect(150, FoldDrawPosY, 16, 16), m_Abstract, Res.CheckBoxButton);
 
                 if (m_Abstract)
                 {
@@ -1531,35 +1421,29 @@
 
                 FoldDrawPosY += 20;
 
-
                 if (EditorGUI.EndChangeCheck())
                 {
                     //CheckInherit_Class();
 
                     CheckModifiers();
                 }
-
             };
             ///////////////////////////////////////
 
             FoldDrawPosY += ModifiersFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Modifiers", inPinsDraw, true);
             //////////////////////////////////////
 
-
             FoldDrawPosY += 5;
 
-
             inPinsDraw = delegate
             {
-
                 Rect drawRect;
                 foreach (ClassInheritInterface interf in InheritedInterfaces)
                 {
-                    drawRect = CreateRect(0, FoldDrawPosY, ToolbarRect.width - 40, 16);
-                    //Graphics.DrawTexture(drawRect, Res.ListVar_Norm);
+                    drawRect = new Rect(0, FoldDrawPosY, ToolbarRect.width - 40, 16);
+                    //DrawTexture(drawRect, Res.ListVar_Norm);
                     //GUI.Label(drawRect, interf.InterfDefineName);
 
-
                     interf.VarTypeDrawer.DrawVarSelectType(0, FoldDrawPosY, 0, interf.InterfaceType, interf);
 
                     if (GUI.Button(drawRect, "", Res.EmptyStyle))
@@ -1567,7 +1451,7 @@
                         TypeSelectList.Show(new Vector2(drawRect.x + 9, drawRect.y + 90), interf.SetInheriteInterface, TypeSelect_Type.Interface);
                     }
 
-                    drawRect = CreateRect(ToolbarRect.width - 40, FoldDrawPosY, 20, 16);
+                    drawRect = new Rect(ToolbarRect.width - 40, FoldDrawPosY, 20, 16);
                     if (GUI.Button(drawRect, "X", Res.ButtonSimple))
                     {
                         UnInheritInterface(interf);
@@ -1577,33 +1461,26 @@
                     FoldDrawPosY += 20;
                 }
 
-
-
                 FoldDrawPosY += 5;
-
             };
             ///////////////////////////////////////
 
-            FoldDrawPosY += InterfacesFold.DrawWithAddButton(0, FoldDrawPosY, DetailsRect.width, "Interfaces", 
+            FoldDrawPosY += InterfacesFold.DrawWithAddButton(0, FoldDrawPosY, DetailsRect.width, "Interfaces",
                 inPinsDraw, GetType_InterfCallback, null, TypeSelect_Type.Interface, "Interface", true);
 
-
-
-
             FoldDrawPosY += 5;
 
-
             inPinsDraw = delegate
             {
                 FoldDrawPosY += 5;
 
-                foreach(var arg in GenericClassArguments)
+                foreach (var arg in GenericClassArguments)
                 {
-                    GUI.Box(CreateRect(0, FoldDrawPosY, 45, 20), "", Res.Box);
+                    GUI.Box(new Rect(0, FoldDrawPosY, 45, 20), "", Res.Box);
 
-                    GUI.Label(CreateRect(5, FoldDrawPosY, 30, 16), RenameTypeVarName(arg.PType, true), Res.Label);
+                    GUI.Label(new Rect(5, FoldDrawPosY, 30, 16), RenameTypeVarName(arg.PType, true), Res.Label);
 
-                    Rect drawRect = CreateRect(20, FoldDrawPosY + 2, 20, 16);
+                    Rect drawRect = new Rect(20, FoldDrawPosY + 2, 20, 16);
                     if (GUI.Button(drawRect, "X", Res.ButtonSimple))
                     {
                         GenericClassArguments.Remove(arg);
@@ -1614,29 +1491,25 @@
 
                 if (GenericClassArguments.Count < GenericClassTypes.Length)
                 {
-                    if (GUI.Button(CreateRect(CreateRect(0, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                    if (GUI.Button(new Rect(new Rect(0, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                     {
-                        Type newType = GenericClassTypes.ToList().Find(x => !GenericClassArguments.Select(y => y.PType).Contains(x));
+                        Type newType = GenericClassTypes.FirstOrDefault(x => !GenericClassArguments.Select(y => y.PType).Contains(x));
 
                         GenericClassArguments.Add(new BType(newType));
                     }
                     FoldDrawPosY += 20;
                 }
                 FoldDrawPosY += 10;
-                // 
+                //
             };
 
             FoldDrawPosY += GenericClassFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Generic " + (StructType ? "Struct" : "Class"), inPinsDraw, true);
 
-
             FoldDrawPosY += 5;
-            if(StructType)
+            if (StructType)
                 DrawAttributes(AttributeTargets.Struct);
             else
                 DrawAttributes(AttributeTargets.Class);
-
-
-
         }
 
         public void GetType_InterfCallback(Type newInterfType)
@@ -1648,7 +1521,6 @@
             //InheritInterface(interf);
         }
 
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -1685,10 +1557,9 @@
 
             if (checkName != newName)
             {
-                if(Options.b_ShowDebug)Debug.Log("Class name " + newName + " is not allowed. Name changed to: " + checkName);
+                if (Options.b_ShowDebug) Debug.Log("Class name " + newName + " is not allowed. Name changed to: " + checkName);
             }
 
-
             Config.Name = CurScript.TryRenameAsmObject("", Config.Name, checkName, 0);
         }
 
@@ -1699,6 +1570,7 @@
     }
 
     public class ScriptStruct { }
+
     public class ScriptIndexer { }
 
     public class ClassInheritInterface
@@ -1725,14 +1597,12 @@
             }
         }
 
-
         public void SetInheriteInterface(Type interf)
         {
             CurClass.UnInheritInterface(this);
 
             if (interf == null)
             {
-             
             }
             else
             {
@@ -1743,4 +1613,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptClassEvent.cs Editor/m_ScriptClassEvent.cs
--- .Editor/m_ScriptClassEvent.cs	2018-06-30 08:59:18.748678300 +0700
+++ Editor/m_ScriptClassEvent.cs	2018-06-30 09:02:03.874525600 +0700
@@ -1,25 +1,20 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
+﻿using System;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
-
     public class ScriptClassEvent : ScriptClassVariable
     {
         public ScriptClassEvent()
         { }
+
         public ScriptClassEvent(string name, bool checkFreeName)
         {
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType(typeof(EventHandler));
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType(typeof(EventHandler))
+            };
 
             if (Config.NodeRefType.PType == null)
                 Config.NodeRefType.SetVarType(CurScript.DefaultSpawnType);
@@ -31,29 +26,26 @@
             else
                 Config.Name = name;
 
-
-
             ReinitConfig_Var();
         }
+
         public override bool DragObject()
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptClassEvent)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
-
                             ScriptClassEvent thatVar = CurScript.SelectedScriptObjects[0] as ScriptClassEvent;
 
                             if (CurClass.ClassEvents.Contains(this) && CurClass.ClassEvents.Contains(thatVar))
@@ -77,7 +69,6 @@
             return false;
         }
 
-
         public override string GetVarModifiers()
         {
             string mods = "";
@@ -97,35 +88,32 @@
             return mods;
         }
 
-
         public override void DrawModifiers()
         {
             GUI.enabled = !IsInherited;
             DrawDeleg modifiersDraDeleg = delegate
             {
-
                 EditorGUI.BeginChangeCheck();
 
                 bool m_Def = m_StaticConst == 0;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticConst;
                 FoldDrawPosY += 16;
 
-
                 bool m_Stat = m_StaticConst == 1;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticConst;
                 FoldDrawPosY += 16;
 
                 m_Stat = m_StaticConst == 2;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 2 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 2 : m_StaticConst;
                 FoldDrawPosY += 16;
 
                 GUI.enabled = false;
                 m_Stat = m_StaticConst == 3;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 3 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 3 : m_StaticConst;
                 FoldDrawPosY += 16;
 
                 GUI.enabled = m_StaticConst < 2 && !IsInherited;
@@ -133,18 +121,18 @@
                 FoldDrawPosY = 5;
 
                 m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
 
                 FoldDrawPosY += 15;
 
@@ -155,20 +143,16 @@
                     m_AccessLevel = 2;
                 }
 
-
-
                 if (EditorGUI.EndChangeCheck())
                 {
                     CheckCorrVariable();
                 }
 
-
                 FoldDrawPosY += 25;
             };
             ///////////////////////////////////////
 
             FoldDrawPosY += ValueModifiersFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Modifiers", modifiersDraDeleg, true);
-
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptClassInterface.cs Editor/m_ScriptClassInterface.cs
--- .Editor/m_ScriptClassInterface.cs	2018-06-30 08:59:18.765682400 +0700
+++ Editor/m_ScriptClassInterface.cs	2018-06-30 09:02:03.876527200 +0700
@@ -1,19 +1,17 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
 using System.Xml.Serialization;
-using System.Text.RegularExpressions;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public class ScriptClassInterface : BaseScriptObject
     {
-        public ScriptClassInterface() { }
+        public ScriptClassInterface()
+        {
+        }
+
         public ScriptClassInterface(string wantedName)
         {
             Obj_ID = CurScript.GetFreeInterfaceID();
@@ -23,7 +21,6 @@
         public List<SCInterface_Method> InterfMethods = new List<SCInterface_Method>();
         public List<SCInterface_Property> InterfProperties = new List<SCInterface_Property>();
 
-
         private M_Foldout MethodsFold = new M_Foldout(true);
         private M_Foldout PropertiesFold = new M_Foldout(true);
         private M_Foldout SelOptionsFold = new M_Foldout(true);
@@ -32,50 +29,47 @@
 
         private SCInterface_Method SelectedMethod = null;
         private SCInterface_Property SelectedProperty = null;
+
         public override void DrawDetails()
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 100, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
-
             DrawDeleg modDraw = delegate
-            {             
+            {
                 bool m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
                 FoldDrawPosY += 5;
 
                 FoldDrawPosY += 16;
                 bool m_Prot = m_AccessLevel == 3;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Intern = m_AccessLevel == 4;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_ProtIntern = m_AccessLevel == 5;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
                 FoldDrawPosY += 20;
             };
             FoldDrawPosY += ModifiersFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Interface Modifiers", modDraw, true);
@@ -88,19 +82,13 @@
             DrawInterfProperties();
             //////////////////////////////////////////////////////////////////////////////////
 
-
-
-
-
             DrawSelectedMethodOptions();
             DrawSelectedPropertyOptions();
 
-
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Method);
         }
 
-
         public string GetInterfaceCode()
         {
             string result = cg_GetSpacing() + GetInterfModifiers();
@@ -109,7 +97,7 @@
             result += "\r\n" + cg_GetSpacing() + "{";
             _cg_Spacing++;
 
-            foreach(var meth in InterfMethods)
+            foreach (var meth in InterfMethods)
             {
                 string returnType = "void";
 
@@ -119,7 +107,7 @@
                 result += "\r\n" + cg_GetSpacing() + returnType + " " + meth.MethName + "(";
 
                 bool first = true;
-                foreach(var methPin in meth.ArgumentPins)
+                foreach (var methPin in meth.ArgumentPins)
                 {
                     if (first)
                         first = false;
@@ -138,19 +126,11 @@
                 result += "\r\n" + cg_GetSpacing() + RenameType_ForCompilation(prop.PropType.PType) + " " + prop.PropName + "{ get; set; }";
             }
 
-
-
-
-
-
-
-
             _cg_Spacing--;
             result += "\r\n" + cg_GetSpacing() + "}";
             return result;
         }
 
-
         /////////////////////////////
         public int m_AccessLevel = 2;
 
@@ -169,13 +149,12 @@
             else if (m_AccessLevel == 5)
                 mods += "protected internal";
 
-
-
             if (mods.Length > 0)
                 return mods + " ";
             else
                 return mods;
         }
+
         ////////////////////
 
         private void DrawInterfProperties()
@@ -188,7 +167,7 @@
                     {
                         property.PropRenamer = new RenameField(EndRenameProperty, property);
                     }
-                    Rect methodRect = CreateRect(10, FoldDrawPosY, DetailsRect.width - 50, 16);
+                    Rect methodRect = new Rect(10, FoldDrawPosY, DetailsRect.width - 50, 16);
 
                     GUIStyle style = SelectedProperty == property ? Res.SelectedStyle : Res.NormalStyle;
 
@@ -204,7 +183,7 @@
                         };
                     }
 
-                    if (GUI.Button(CreateRect(DetailsRect.width - 35, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(DetailsRect.width - 35, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                     {
                         InterfProperties.Remove(property);
                         SelectedProperty = null;
@@ -215,7 +194,7 @@
                 }
                 FoldDrawPosY += 5;
 
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "Add", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "Add", Res.AddButton))
                 {
                     SelectedProperty = new SCInterface_Property("NewInterfaceProperty");
                     InterfProperties.Add(SelectedProperty);
@@ -224,7 +203,6 @@
                 FoldDrawPosY += 30;
             };
 
-
             FoldDrawPosY += PropertiesFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Interface Properties", DrawPropsDeleg, true);
 
             FoldDrawPosY += 5;
@@ -240,7 +218,7 @@
                     {
                         method.MethRenamer = new RenameField(EndRenameMethod, method);
                     }
-                    Rect methodRect = CreateRect(10, FoldDrawPosY, DetailsRect.width - 50, 16);
+                    Rect methodRect = new Rect(10, FoldDrawPosY, DetailsRect.width - 50, 16);
 
                     GUIStyle style = SelectedMethod == method ? Res.SelectedStyle : Res.NormalStyle;
 
@@ -256,7 +234,7 @@
                         };
                     }
 
-                    if (GUI.Button(CreateRect(DetailsRect.width - 35, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(DetailsRect.width - 35, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                     {
                         InterfMethods.Remove(method);
                         SelectedMethod = null;
@@ -267,7 +245,7 @@
                 }
                 FoldDrawPosY += 5;
 
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "Add", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "Add", Res.AddButton))
                 {
                     SelectedMethod = new SCInterface_Method("NewInterfaceFunction");
                     InterfMethods.Add(SelectedMethod);
@@ -276,7 +254,6 @@
                 FoldDrawPosY += 30;
             };
 
-
             FoldDrawPosY += MethodsFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Interface Functions", SelectMethDraw, true);
 
             FoldDrawPosY += 5;
@@ -312,22 +289,21 @@
             }
         }
 
-
         private float maxWidth = 0;
         private float maxWidthFinal = 0;
+
         private void DrawSelectedMethodOptions()
         {
             if (SelectedMethod != null)
             {
                 DrawDeleg outPinsDraw = delegate
                 {
-                    Rect labelRect = CreateRect(0, FoldDrawPosY, DetailsRect.width - 50, 16);
+                    Rect labelRect = new Rect(0, FoldDrawPosY, DetailsRect.width - 50, 16);
                     GUI.Label(labelRect, "Function arguments:");
 
                     FoldDrawPosY += 20;
 
-
-                    if(SelectedMethod.InPinDrawer.Length != SelectedMethod.ArgumentPins.Count)
+                    if (SelectedMethod.InPinDrawer.Length != SelectedMethod.ArgumentPins.Count)
                     {
                         SelectedMethod.InPinDrawer = new PinDrawRename[SelectedMethod.ArgumentPins.Count];
                     }
@@ -337,18 +313,17 @@
                         if (SelectedMethod.InPinDrawer[i] == null)
                             SelectedMethod.InPinDrawer[i] = new PinDrawRename(SelectedMethod.ArgumentPins[i], SelectedMethod.ArgumentPins);
 
-
                         var pin = SelectedMethod.ArgumentPins[i];
 
                         var pinList = SelectedMethod.ArgumentPins;
 
-                        GUI.Box(CreateRect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
+                        GUI.Box(new Rect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
 
                         FoldDrawPosY += 2;
 
                         float posX = 2;
 
-                        if (GUI.Button(CreateRect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                        if (GUI.Button(new Rect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                         {
                             pinList.Remove(pin);
                             return;
@@ -357,11 +332,8 @@
 
                         posX += 5;
 
-
-
-
                         ///////////////////// Shift ////////////////////////////
-                        Rect ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                        Rect ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                         if (!IsInherited)
                             GUI.enabled = i != 0;
                         if (GUI.Button(ButtonRect, "↑", Res.ButtonSimple))
@@ -375,7 +347,7 @@
                         if (!IsInherited)
                             GUI.enabled = i < pinList.Count - 1;
 
-                        ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                        ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                         if (GUI.Button(ButtonRect, "↓", Res.ButtonSimple))
                         {
                             int index = pinList.IndexOf(pin);
@@ -391,52 +363,41 @@
 
                         posX += 5;
 
-
-
-
-                        SelectedMethod.InPinDrawer[i].PinRenamer.Draw(CreateRect(posX, FoldDrawPosY, 150, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
+                        SelectedMethod.InPinDrawer[i].PinRenamer.Draw(new Rect(posX, FoldDrawPosY, 150, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
 
                         posX += 150;
 
                         posX += 5;
                         posX += 5;
 
-
                         //Type select
                         posX += SelectedMethod.InPinDrawer[i].VarTypeChanger.DrawVarSelectType(posX, FoldDrawPosY - 1, ToolbarRect.width - 40, pin.type, pin);
                         posX += 10;
 
                         SelectedMethod.InPinDrawer[i].DrawWidth = posX;
 
-
                         if (maxWidth < posX)
                             maxWidth = posX;
 
                         FoldDrawPosY += 22;
                     }
 
-
                     maxWidthFinal = maxWidth;
 
-
-
-
-                    if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 80, 22)), "New", Res.AddButton))
+                    if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 80, 22)), "New", Res.AddButton))
                     {
                         SelectedMethod.ArgumentPins.Add(new Node_Pin(typeof(int), CheckAvaliblePinName("NewArgument", SelectedMethod.ArgumentPins, null), PinTypeE.PinOut, 0));
                     }
                     FoldDrawPosY += 30;
 
-
-                    labelRect = CreateRect(0, FoldDrawPosY, 500, 16);
+                    labelRect = new Rect(0, FoldDrawPosY, 500, 16);
                     GUI.Label(labelRect, "Function return type:");
 
                     FoldDrawPosY += 20;
 
-
                     if (SelectedMethod.OutPinType != null)
                     {
-                        if (GUI.Button(CreateRect(0, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                        if (GUI.Button(new Rect(0, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                         {
                             SelectedMethod.OutPinType = null;
                             return;
@@ -446,13 +407,12 @@
                     }
                     else
                     {
-                        if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 80, 22)), "New", Res.AddButton))
+                        if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 80, 22)), "New", Res.AddButton))
                         {
                             SelectedMethod.OutPinType = new BType(typeof(int));
                         }
                         FoldDrawPosY += 25;
                     }
-
                 };
                 ///////////////////////////////////////
 
@@ -460,15 +420,13 @@
             }
         }
 
-
-
         private void DrawSelectedPropertyOptions()
         {
             if (SelectedProperty != null)
             {
                 DrawDeleg outPinsDraw = delegate
                 {
-                    Rect labelRect = CreateRect(0, FoldDrawPosY, DetailsRect.width - 50, 16);
+                    Rect labelRect = new Rect(0, FoldDrawPosY, DetailsRect.width - 50, 16);
                     GUI.Label(labelRect, "Property type: ");
                     FoldDrawPosY += 20;
 
@@ -479,18 +437,17 @@
             }
         }
 
-
-
-
-
-
         public class SCInterface_Method
         {
-            public SCInterface_Method() { }
+            public SCInterface_Method()
+            {
+            }
+
             public SCInterface_Method(string name)
             {
                 MethName = name;
             }
+
             public string MethName = "";
 
             [XmlIgnore]
@@ -501,18 +458,18 @@
             [XmlIgnore]
             public PinDrawRename[] InPinDrawer = new PinDrawRename[0];
 
-
-
             [XmlIgnore]
             public ChangeVarType OutPinTypeChanger = new ChangeVarType();
+
             public BType OutPinType = null;
         }
 
-
-
         public class SCInterface_Property
         {
-            public SCInterface_Property() { }
+            public SCInterface_Property()
+            {
+            }
+
             public SCInterface_Property(string name)
             {
                 PropName = name;
@@ -528,49 +485,8 @@
             public RenameField PropRenamer;
         }
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
         private float StartFuncVarsDrawPosY = 0;
+
         public bool DrawInterfaceToolbar()
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
@@ -584,20 +500,19 @@
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptClassInterface)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             ScriptClassInterface thatVar = CurScript.SelectedScriptObjects[0] as ScriptClassInterface;
 
                             if (CurScript.ScriptInterfaces.Contains(this) && CurScript.ScriptInterfaces.Contains(thatVar))
@@ -611,7 +526,7 @@
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                             }
                         }
                     }
@@ -623,9 +538,6 @@
 
         /////////////////////////////////////
 
-
-
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -646,7 +558,7 @@
 
             if (newName != checkName)
             {
-                BConsole.EditorLog("Script is allready contain interface with name '" + newName + "'. Name changed to " + checkName, 1);
+                BConsole.EditorLog("Script is already contain interface with name '" + newName + "'. Name changed to " + checkName, 1);
             }
             Config.Name = CurScript.TryRenameAsmObject("", Config.Name, checkName, 0);
         }
@@ -655,9 +567,5 @@
         {
             return true;
         }
-
-
-
-
     }
 }
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptClassVariable.cs Editor/m_ScriptClassVariable.cs
--- .Editor/m_ScriptClassVariable.cs	2018-06-30 08:59:18.768682500 +0700
+++ Editor/m_ScriptClassVariable.cs	2018-06-30 09:02:03.879525000 +0700
@@ -1,18 +1,12 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
-
-
-    public class ScriptClassVariable : BaseScriptObject 
+    public class ScriptClassVariable : BaseScriptObject
     {
         //[JsonConstructor]
         public ScriptClassVariable() { }
@@ -21,29 +15,29 @@
         {
             InitVar(name, newType, checkFreeName);
         }
+
         public ScriptClassVariable(string name, bool checkFreeName)
         {
             InitVar(name, CurScript.DefaultSpawnType, checkFreeName);
         }
 
-
         public void InitVar(string name, Type type, bool checkFreeName)
         {
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType(type);
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType(type)
+            };
 
             if (Config.NodeRefType.PType == null)
                 Config.NodeRefType.SetVarType(CurScript.DefaultSpawnType);
 
             Obj_ID = CurScript.GetFreeVariableID();
 
-            if(checkFreeName)
+            if (checkFreeName)
                 Config.Name = CurClass.CheckFreeVariableName(name, Obj_ID);
             else
                 Config.Name = name;
 
-
-
             ReinitConfig_Var();
         }
 
@@ -62,12 +56,13 @@
 
             if (!m_ReadOnly)
             {
-                Node_Pin newInPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinIn, 0);
-                newInPin.IsDelegate = IsDeleg(Config.NodeRefType.PType);
+                Node_Pin newInPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinIn, 0)
+                {
+                    IsDelegate = IsDeleg(Config.NodeRefType.PType)
+                };
                 Config.InPins.Add(newInPin);
             }
 
-
             Node_Pin newOutPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinOut, 0);
             Config.OutPins.Add(newOutPin);
 
@@ -86,11 +81,8 @@
             CurClass.ReinitAllNodes_MathPins();
         }
 
-
-
         public TempVarHolder TempVar = new TempVarHolder();
 
-
         //////////////////////////////////////////////////////////
         public int m_AccessLevel = 2;
 
@@ -126,26 +118,22 @@
 
         //////////////////////////////////////////////////////////
 
-
         //private RenameField RenamerDetails;
         private M_Foldout VariableFoldout = new M_Foldout();
+
         private M_Foldout DefaultValueFoldout = new M_Foldout();
 
         [XmlIgnore]
         public M_Foldout ValueModifiersFoldout = new M_Foldout();
 
         private ChangeVarType VarTypeChanger = new ChangeVarType();
+
         public override void DrawDetails()
         {
-          
             FoldDrawPosY = DetailsRect.y;
-     
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 150, 20);
-            GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
-
-
-
 
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 150, 20);
+            GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
@@ -162,7 +150,7 @@
 
             FoldDrawPosY += VariableFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Type", inPinsDraw, true);
 
-            if(backType != Config.NodeRefType.PType)
+            if (backType != Config.NodeRefType.PType)
             {
                 ReinitConfig_Var();
             }
@@ -185,7 +173,6 @@
 
             DrawModifiers();
 
-
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Field);
 
@@ -194,60 +181,56 @@
 
         public virtual void DrawModifiers()
         {
-
             DrawDeleg modifiersDraDeleg = delegate
             {
-
                 EditorGUI.BeginChangeCheck();
 
                 bool m_Def = m_StaticConst == 0;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticConst;
                 FoldDrawPosY += 16;
 
-
                 bool m_Stat = m_StaticConst == 1;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticConst;
                 FoldDrawPosY += 16;
 
                 bool m_Const = m_StaticConst == 2;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "const", Res.Label);
-                m_StaticConst = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Const, Res.RadioButton) ? 2 : m_StaticConst;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "const", Res.Label);
+                m_StaticConst = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Const, Res.RadioButton) ? 2 : m_StaticConst;
 
                 FoldDrawPosY = 5;
 
                 m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
 
                 FoldDrawPosY += 5;
 
                 FoldDrawPosY += 16;
                 bool m_Prot = m_AccessLevel == 3;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Intern = m_AccessLevel == 4;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_ProtIntern = m_AccessLevel == 5;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
                 FoldDrawPosY += 16;
 
                 if (EditorGUI.EndChangeCheck())
@@ -255,15 +238,13 @@
                     CheckCorrVariable();
                 }
 
-
                 FoldDrawPosY += 5;
 
                 if (m_Const)
                     GUI.enabled = false;
 
-
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "readonly", Res.Label);
-                bool readOnly = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_ReadOnly, Res.CheckBoxButton);
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "readonly", Res.Label);
+                bool readOnly = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_ReadOnly, Res.CheckBoxButton);
 
                 if (m_Const)
                     readOnly = false;
@@ -279,7 +260,6 @@
             ///////////////////////////////////////
 
             FoldDrawPosY += ValueModifiersFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Modifiers", modifiersDraDeleg, true);
-
         }
 
         public void CheckCorrVariable()
@@ -308,21 +288,22 @@
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
 
-            Rect iconRect = CreateRect(5, FoldDrawPosY + 1, 15, 13);
+            Rect iconRect = new Rect(5, FoldDrawPosY + 1, 15, 13);
 
             if (Config.NodeRefType == null || Config.NodeRefType.PType == null)
             {
-                string message = "Can't find Type for variable '" + Config.Name + "'. Set default Type: bool. Last var type name: '" + Config.NodeRefType.typeFullName + "'";             
+                string message = "Can't find Type for variable '" + Config.Name + "'. Set default Type: bool. Last var type name: '" + Config.NodeRefType.typeFullName + "'";
                 BConsole.EditorLog(message, 2);
-                if(Options.b_ShowDebug)Debug.Log(message);
+                if (Options.b_ShowDebug) Debug.Log(message);
 
                 Config.NodeRefType.PType = typeof(bool);
             }
-             
+
             float AddPosY = 0;
 
             DrawPosX_DebugField = 0;
-            if (1 == 2 && CurScript.b_DebugMode)
+            /*
+            if (CurScript.b_DebugMode)
             {
                 if (CurScript.SelectedDebugObject != null && CurScript.SelectedDebugObject.script != null && CurScript.SelectedDebugObject.script.GetType().Name == CurClass.Config.Name)
                 {
@@ -339,20 +320,17 @@
                         {
                             DrawPosX_DebugField = ToolbarRect.width - 190;/// 2 - 40
                             //FoldDrawPosY += 16;
-                            Rect propertyDrawRect = CreateRect(20, FoldDrawPosY, ToolbarRect.width - 44, 16);
+                            Rect propertyDrawRect = new Rect(20, FoldDrawPosY, ToolbarRect.width - 44, 16);
 
-                          
-                             
                             EditorGUI.BeginChangeCheck();
 
                             try
                             {
                                 EditorGUI.PropertyField(propertyDrawRect, serializedProperty, true);
-                                AddPosY = EditorGUI.GetPropertyHeight(serializedProperty);                          
+                                AddPosY = EditorGUI.GetPropertyHeight(serializedProperty);
                             }
                             catch
                             {
-
                             }
                             //FoldDrawPosY -= 20;
 
@@ -366,7 +344,7 @@
                     }
                 }
             }
-
+            */
 
             Draw(Config.NodeRefType.PType.IsArray ? Res.VarIconArray : Res.VarIcon, Config.Name, GetColorByType(Config.NodeRefType.PType), 20 + DrawPosX_DebugField, 0);
             if (CurScript.b_DebugMode)
@@ -374,8 +352,6 @@
             else
                 FoldDrawPosY += Mathf.Clamp(AddPosY - 16, 0, 400);
 
-
-
             Vector2 mousePos = Event.current.mousePosition;
             if (iconRect.Contains(mousePos))
             {
@@ -392,21 +368,19 @@
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptClassVariable)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
-
                             ScriptClassVariable thatVar = CurScript.SelectedScriptObjects[0] as ScriptClassVariable;
 
                             if (CurClass.ClassVariables.Contains(this) && CurClass.ClassVariables.Contains(thatVar))
@@ -420,7 +394,7 @@
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                             }
                         }
                     }
@@ -430,9 +404,6 @@
             return false;
         }
 
-
-
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -451,12 +422,11 @@
 
         public override void EndChangeName(string newName)
         {
-
             string checkName = CurClass.CheckFreeVariableName(newName, Obj_ID);
 
             if (checkName != newName && newName != "")
             {
-                if(Options.b_ShowDebug)Debug.Log("Variable name " + newName + " is not allowed. Name changed to: " + checkName);
+                if (Options.b_ShowDebug) Debug.Log("Variable name " + newName + " is not allowed. Name changed to: " + checkName);
             }
 
             Config.Name = CurScript.TryRenameAsmObject(CurClass.Config.Name, Config.Name, checkName, 2);
@@ -466,7 +436,5 @@
         {
             return true;
         }
-
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptData.cs Editor/m_ScriptData.cs
--- .Editor/m_ScriptData.cs	2018-06-30 08:59:18.776684800 +0700
+++ Editor/m_ScriptData.cs	2018-06-30 09:02:03.881528600 +0700
@@ -1,20 +1,19 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
 using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
-using System.Xml.Serialization;
 using System.Text.RegularExpressions;
-
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public class ScriptData
     {
         public string ScriptFileName = "NULL_FILE_NAME";
+        
+        public string LastSavedHash;
 
         public List<UsedAssembly> UsedAsseblies = new List<UsedAssembly>();
 
@@ -26,6 +25,7 @@
         public ScriptType ScriptType = ScriptType.Undefined;
 
         public string NamespaceName = "";
+
         /////////////////////////////////////////////////
         private bool isInitialised = false;
 
@@ -35,24 +35,19 @@
             Options.AddLastScript(ScriptFileName);
             EditorOptions.Save();
 
-
-
             if (initialise && !isInitialised)
             {
                 Classes.ForEach(x => x.LoadInit());
                 GetAllNodes().ForEach(x => x.InitConfig());
                 GetAllClasses().ForEach(x => x.ScriptProperties.ForEach(y => y.StartInitProp()));
 
-
-                isInitialised = true;    
+                isInitialised = true;
             }
             TypeDataBase.CancelAbort("openscript");
             NewNode_Window.CancelAbort();
             NewNode_Window.FilterBase();
         }
 
-
-
         public void CloseScript()
         {
             NewNode_Window.AbortThread();
@@ -65,7 +60,6 @@
 
         /////////////////////////////////////////////////
 
-
         /////////////////////////////////////////////////
         public List<NewNameReflection> _RenameInReflection = new List<NewNameReflection>();
 
@@ -77,7 +71,6 @@
                 _RenameInReflection.Find(x => (x.OwnerTypeName == ownerName || x.OriginalOwnerTypeName == ownerName) && x.MemberName == memberName && (x.oType == oType || x.oType == -1));
         }
 
-
         public void AddNameReflection(string ownerName, string memberName, string newMemberName, int oType)
         {
             var result = _RenameInReflection.Find(x => x.OwnerTypeName == ownerName && x.NewMemberName == memberName);
@@ -101,7 +94,6 @@
             renameOwners.ForEach(x => x.OwnerTypeName = newMemberName);
         }
 
-
         public string TryRenameReflection(string ownerName, string name, int oType)
         {
             if (oType != 0)
@@ -109,7 +101,6 @@
                 ownerName = TryRenameReflection("", ownerName, 0);
             }
 
-
             var renamer = CurScript.HasNameReflection(ownerName, name, oType);
 
             if (renamer != null)
@@ -130,7 +121,6 @@
             return newName;
         }
 
-
         public void RenameAsmNode(Node node)
         {
             string owner = ""; //node.GetNodeReflectionOwner();
@@ -140,7 +130,6 @@
             {
                 if (node.Config.NodeRefType.PType != null)
                     owner = node.Config.NodeRefType.PType.Name;
-
             }
             else if (node.NodeType == NodeTypeE.Property)
             {
@@ -172,14 +161,13 @@
                     node.Config.Name = TryRenameReflection(owner, node.Config.Name, 4);
                 }
 
-                if(node.Config.Name != startName)
-                BConsole.EditorLog(
-                     "Fixed assembly type member renaming, Old name: '" + startName + "', new name: '" +
-                     node.Config.Name, 0);
+                if (node.Config.Name != startName)
+                    BConsole.EditorLog(
+                         "Fixed assembly type member renaming, Old name: '" + startName + "', new name: '" +
+                         node.Config.Name, 0);
             }
         }
 
-
         /////////////////////////////////////////////////
 
         public string CheckFreeDelegateName(string wantedName, int VarID)
@@ -197,11 +185,8 @@
             if (testVar == null)
                 return testName;
 
-
-
             string genName = ScriptClass.RegEx(testName);
 
-
             int nameAppend = 0;
 
             while (nameAppend < 1000)
@@ -222,8 +207,7 @@
             return "NULL";
         }
 
-
-        [XmlIgnore] public readonly Type DefaultSpawnType = typeof (int);
+        [XmlIgnore] public readonly Type DefaultSpawnType = typeof(int);
 
         [XmlIgnore]
         public string ScriptName
@@ -233,7 +217,7 @@
 
         public int DebugObjectID = -1;
 
-        // [XmlIgnore] 
+        // [XmlIgnore]
         public int CompileStage = 0;
 
         public int CurrentClass { get; set; }
@@ -245,7 +229,7 @@
         [XmlIgnore] public SerializedObject CurScriptSerialized;
 
         [XmlIgnore] public VarsListWindow VarsWindow = new VarsListWindow();
-        [XmlIgnore] public HashSet<TypeBase_NameSpaceceTypes> NS_LoadedList = null;
+        [XmlIgnore] public List<TypeBase_NameSpaceceTypes> NS_LoadedList = null;
 
         public bool b_DebugMode = false;
 
@@ -256,14 +240,12 @@
 
         public bool Debug_AllowStatic = true;
 
-
         [XmlIgnore] public ScriptClass _curClass = null;
 
         [XmlIgnore] public int _curClassID = -1;
 
         [XmlIgnore] public BaseScriptObject _curDraw = null;
 
-
         [XmlIgnore]
         public BaseScriptObject SetSelectedObject
         {
@@ -285,14 +267,9 @@
             return SelectedScriptObjects.Contains(scriptObj);
         }
 
-
         //[XmlIgnore]
         public BConsole ConsoleWindow = new BConsole();
 
-
-
-
-
         public void ClearSelection()
         {
             if (CurScript != null)
@@ -309,11 +286,6 @@
             Linking.StopLinking();
         }
 
-
-
-
-
-
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         public void RemoveClass(ScriptClass delClas)
         {
@@ -334,14 +306,11 @@
                 RemoveClassRecurs(dclas, deleteClass);
         }
 
-
-
         private void DeleteClassNodesInClasses(ScriptClass Clas)
         {
             DeleteClassNodes(Clas);
         }
 
-
         public void DeleteClassNodes(ScriptClass Clas)
         {
             List<BaseScriptObject> draws = CurScript.GetAllDrawableObjects();
@@ -350,8 +319,6 @@
                 drawbl.Nodes.RemoveAll(x => x.ReferenceID == Clas.Obj_ID && x.NodeType == NodeTypeE.Class);
         }
 
-
-
         public int GetFreeClassID()
         {
             int testID = 0;
@@ -370,7 +337,6 @@
             return testID;
         }
 
-
         public int GetFreeInterfaceID()
         {
             int testID = 0;
@@ -389,7 +355,6 @@
             return testID;
         }
 
-
         public ScriptClassInterface FindInterfaceFromID(int interfaceID)
         {
             return ScriptInterfaces.Find(x => x.Obj_ID == interfaceID);
@@ -405,15 +370,12 @@
                 return testName;
             }
 
-
             ScriptClassInterface testVar =
                 ScriptInterfaces.Find(x => x.Config.Name == testName && x.Obj_ID != interfaceID);
 
             if (testVar == null)
                 return testName;
 
-
-
             string endNums = Regex.Match(testName, @"[0-9]+$").Value;
 
             if (endNums.Length > 0)
@@ -441,8 +403,6 @@
             return "NULL";
         }
 
-
-
         public string CheckFreeClassName(string wantedName, int classID)
         {
             string testName = CheckCorrectStringName(wantedName, false);
@@ -455,14 +415,11 @@
 
             List<ScriptClass> allClasses = GetAllClasses();
 
-
             ScriptClass testVar = allClasses.Find(x => x.Config.Name == testName && x.Obj_ID != classID);
 
             if (testVar == null)
                 return testName;
 
-
-
             string endNums = Regex.Match(testName, @"[0-9]+$").Value;
 
             if (endNums.Length > 0)
@@ -490,13 +447,10 @@
             return "NULL";
         }
 
-
-
         public List<BaseScriptObject> GetAllDrawableObjects()
         {
             List<BaseScriptObject> result = new List<BaseScriptObject>();
-                // Classes.Select(x => x as BaseScriptObject).ToList();
-
+            // Classes.Select(x => x as BaseScriptObject).ToList();
 
             foreach (ScriptClass clas in GetAllClasses())
             {
@@ -507,13 +461,11 @@
             return result.Distinct().ToList();
         }
 
-
         public List<Node> GetAllNodes()
         {
             return GetAllDrawableObjects().SelectMany(x => x.Nodes).Distinct().ToList();
         }
 
-
         public int UniqNodeId = 0;
 
         public int GetFreeNodeID()
@@ -545,7 +497,7 @@
             List<int> AllIDs = new List<int>();
             List<ScriptClass> allClasses = GetAllClasses();
 
-            allClasses.ForEach(x => AllIDs.AddRange(x.Functions.Select(y => y.Obj_ID).ToList()));
+            allClasses.ForEach(x => AllIDs.AddRange(x.Functions.Select(y => y.Obj_ID)));
 
             int testID = 1;
 
@@ -570,7 +522,7 @@
         public int GetFreeConstructorID()
         {
             List<int> AllIDs = new List<int>();
-            GetAllClasses().ForEach(x => AllIDs.AddRange(x.ClassConstructors.Select(y => y.Obj_ID).ToList()));
+            GetAllClasses().ForEach(x => AllIDs.AddRange(x.ClassConstructors.Select(y => y.Obj_ID)));
 
             int testID = 1;
 
@@ -640,7 +592,6 @@
             return testID;
         }
 
-
         public List<ScriptLocalVariable> GetAllLocalVariables()
         {
             List<ScriptLocalVariable> result = new List<ScriptLocalVariable>();
@@ -649,19 +600,15 @@
 
             foreach (ScriptClass clas in classes)
             {
-                result.AddRange(clas.Functions.SelectMany(x => x.LocalVariables).ToList());
-                result.AddRange(clas.ScriptProperties.SelectMany(x => x.Drawable_Get.LocalVariables).ToList());
-                result.AddRange(clas.ScriptProperties.SelectMany(x => x.Drawable_Set.LocalVariables).ToList());
-                result.AddRange(clas.ClassConstructors.SelectMany(x => x.LocalVariables).ToList());
+                result.AddRange(clas.Functions.SelectMany(x => x.LocalVariables));
+                result.AddRange(clas.ScriptProperties.SelectMany(x => x.Drawable_Get.LocalVariables));
+                result.AddRange(clas.ScriptProperties.SelectMany(x => x.Drawable_Set.LocalVariables));
+                result.AddRange(clas.ClassConstructors.SelectMany(x => x.LocalVariables));
             }
 
             return result = result.Distinct().ToList();
         }
 
-
-
-
-
         public ScriptFunction FindFunctionFromID(int id)
         {
             ScriptFunction rezFunc;
@@ -707,10 +654,8 @@
             return null;
         }
 
-
         public ScriptProperty FindClassPropertyFromID(int id)
         {
-
             foreach (ScriptClass clas in GetAllClasses())
             {
                 ScriptProperty testVar = clas.ScriptProperties.Find(x => x.PropertyID == id);
@@ -752,14 +697,8 @@
             }
         }
 
-
-
-
         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-
-
-
         public Node FindNodeFromID(int id)
         {
             foreach (BaseScriptObject drawbl in CurScript.GetAllDrawableObjects())
@@ -794,4 +733,4 @@
             return null;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptDelegate.cs Editor/m_ScriptDelegate.cs
--- .Editor/m_ScriptDelegate.cs	2018-06-30 08:59:18.779685900 +0700
+++ Editor/m_ScriptDelegate.cs	2018-06-30 09:02:03.882528200 +0700
@@ -1,16 +1,17 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
 using System.Text.RegularExpressions;
-using System.Linq;
 using System.Xml.Serialization;
-using System;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public class ScriptDelegate : BaseScriptObject
     {
-        public ScriptDelegate() { }
+        public ScriptDelegate()
+        {
+        }
 
         public ScriptDelegate(string name)
         {
@@ -19,26 +20,24 @@
 
         private void InitDeleg(string name)
         {
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType();
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType()
+            };
             Config.NodeRefType.SetVarType(typeof(EnumType));
             Obj_ID = CurScript.GetFreeDelegateID();
             Config.Name = CurScript.CheckFreeDelegateName(name, Obj_ID);
         }
 
-
-
         public override void ReinitConfig_Var()
         {
-
         }
 
-
         public string GetDelegCode()
         {
             string codeRet = "public delegate ";
 
-            if(DelegReturn)
+            if (DelegReturn)
             {
                 codeRet += RenameType_ForCompilation(DelegRetType.PType);
                 AddNewAssembly(DelegRetType.PType);
@@ -62,7 +61,6 @@
                 codeRet += RenameType_ForCompilation(arg.ArgType.PType) + " " + arg.ParamName;
             }
 
-
             codeRet += ");";
             return codeRet;
         }
@@ -80,13 +78,11 @@
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 150, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 150, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
-
             DrawDeleg DrawDelegate = delegate
             {
                 for (int i = 0; i < DelegateArguments.Count; i++)
@@ -98,19 +94,19 @@
 
                     float drawPosX = 0;
                     float renamerWidth = ToolbarRect.width / 2;
-                    curDrawArg.Renamer.Draw(CreateRect(drawPosX, FoldDrawPosY, renamerWidth, 17), curDrawArg.ParamName, true, Res.NormalStyle, Res.TextField, true);
+                    curDrawArg.Renamer.Draw(new Rect(drawPosX, FoldDrawPosY, renamerWidth, 17), curDrawArg.ParamName, true, Res.NormalStyle, Res.TextField, true);
                     drawPosX += renamerWidth + 5;
 
                     drawPosX += curDrawArg.VarTypeChanger.DrawVarSelectType(drawPosX, FoldDrawPosY, ToolbarRect.width - 40, curDrawArg.ArgType, curDrawArg.ArgType);
 
-                    if (GUI.Button(CreateRect(drawPosX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(drawPosX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                     {
                         DelegateArguments.Remove(curDrawArg);
                         break;
                     }
                     FoldDrawPosY += 20;
                 }
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                 {
                     DelegateArguments.Add(new ArgumentDrawer(CheckAvalibleDelegArgName("NewArgument", null)));
                 }
@@ -121,34 +117,26 @@
 
             FoldDrawPosY += DelegArgsFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Delegate Arguments", DrawDelegate, true);
 
-
             FoldDrawPosY += 5;
             DrawDelegate = delegate
             {
-
-                DelegReturn = EditorGUI.Toggle(CreateRect(0, FoldDrawPosY, 20, 20), DelegReturn, Res.CheckBoxButton);
-                GUI.Label(CreateRect(23, FoldDrawPosY, 200, 17), "Return value");
+                DelegReturn = EditorGUI.Toggle(new Rect(0, FoldDrawPosY, 20, 20), DelegReturn, Res.CheckBoxButton);
+                GUI.Label(new Rect(23, FoldDrawPosY, 200, 17), "Return value");
                 FoldDrawPosY += 20;
                 if (DelegReturn)
                 {
                     RetTypeChanger.DrawVarSelectType(0, FoldDrawPosY, ToolbarRect.width - 40, DelegRetType, DelegRetType);
                 }
 
-
                 FoldDrawPosY += 30;
             };
             ///////////////////////////////////////
 
             FoldDrawPosY += DelegRetValFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Delegate Return Value", DrawDelegate, true);
 
-
-
-            
-
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Delegate);
             GUI.enabled = true;
-
         }
 
         private ArgumentDrawer ignoreVal;
@@ -157,6 +145,7 @@
         {
             ignoreVal.ParamName = CheckAvalibleDelegArgName(wantedName, ignoreVal);
         }
+
         private string CheckAvalibleDelegArgName(string wantedName, ArgumentDrawer ignoreEnmVal)
         {
             string newName = CheckCorrectStringName(wantedName, false);
@@ -195,7 +184,6 @@
             }
         }
 
-
         private string CheckAvalibleDelegName(string wantedName, ScriptDelegate ignoreEnmVal)
         {
             string newName = CheckCorrectStringName(wantedName, false);
@@ -220,7 +208,6 @@
             int nameInc = 1;
             while (true)
             {
-       
                 foundVal = DelegList.Find(x => x.Config.Name == testName);
 
                 if (foundVal != null)
@@ -235,25 +222,6 @@
             }
         }
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
         private float StartFuncVarsDrawPosY = 0;
 
         public bool DrawVar()
@@ -269,20 +237,19 @@
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptLocalVariable)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             ScriptDelegate thatVar = CurScript.SelectedScriptObjects[0] as ScriptDelegate;
 
                             if (CurScript.ScriptDelegates.Contains(this) && CurScript.ScriptDelegates.Contains(thatVar))
@@ -296,7 +263,7 @@
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                             }
                         }
                     }
@@ -306,7 +273,6 @@
             return false;
         }
 
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -325,9 +291,9 @@
         {
             string checkName = CheckAvalibleDelegName(newName, this);
 
-            if(newName != checkName)
+            if (newName != checkName)
             {
-                BConsole.EditorLog("Script is allready contain delegate with name '" + newName + "'. name changed to " + checkName, 1);
+                BConsole.EditorLog("Script is already contain delegate with name '" + newName + "'. name changed to " + checkName, 1);
             }
             Config.Name = CurScript.TryRenameAsmObject("", Config.Name, checkName, 0);
         }
@@ -336,13 +302,13 @@
         {
             return true;
         }
-
-
-
     }
+
     public class ArgumentDrawer
     {
-        public ArgumentDrawer() { }
+        public ArgumentDrawer()
+        {
+        }
 
         public ArgumentDrawer(string name)
         {
@@ -360,8 +326,8 @@
 
         [XmlIgnore]
         public RenameField Renamer;
+
         [XmlIgnore]
         public ChangeVarType VarTypeChanger = new ChangeVarType();
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptEnum.cs Editor/m_ScriptEnum.cs
--- .Editor/m_ScriptEnum.cs	2018-06-30 08:59:18.781686100 +0700
+++ Editor/m_ScriptEnum.cs	2018-06-30 09:02:03.883527800 +0700
@@ -1,16 +1,19 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
 using System.Text.RegularExpressions;
-using System.Linq;
 using System.Xml.Serialization;
-using System;
+using UnityEditor;
+using UnityEngine;
+
 public partial class Nottorus : EditorWindow
 {
     private class EnumType { }
+
     public class ScriptEnum : BaseScriptObject
     {
-        public ScriptEnum() { }
+        public ScriptEnum()
+        {
+        }
 
         public ScriptEnum(string name)
         {
@@ -19,8 +22,10 @@
 
         private void InitVar(string name)
         {
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType();
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType()
+            };
             Config.NodeRefType.SetVarType(typeof(EnumType));
             Obj_ID = CurScript.GetFreeVariableID();
             Config.Name = CurClass.CheckFreeVariableName(name, Obj_ID);
@@ -28,7 +33,6 @@
 
         public override void ReinitConfig_Var()
         {
-
         }
 
         public List<EnumValue> EnumValues = new List<EnumValue>();
@@ -49,12 +53,11 @@
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 150, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 150, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
             DrawDeleg DrawDelegate = delegate
             {
                 StartDrawPos = FoldDrawPosY;
@@ -114,12 +117,8 @@
                         }
                     }
 
-
-
                     float drawPosX = 22;
 
-
-
                     if (_LMB_Down_L && DragEnum != -1)
                     {
                         if (DragEnum == i)
@@ -133,14 +132,8 @@
                         DragEnum = -1;
                     }
 
-
-
-
-
                     float realDrawPosY;
 
-
-
                     if (i != DragEnum)
                     {
                         realDrawPosY = ignoreVal.DrawPosY = Mathf.Lerp(ignoreVal.DrawPosY, TargetPosY, 0.06f);
@@ -151,13 +144,12 @@
                         ignoreVal.DrawPosY = realDrawPosY;
                     }
 
-                    Rect reordRect = CreateRect(drawPosX, realDrawPosY, 10, 17);
-                    Graphics.DrawTexture(reordRect, Res.ButtonReorder);
-
+                    Rect reordRect = new Rect(drawPosX, realDrawPosY, 10, 17);
+                    DrawTexture(reordRect, Res.ButtonReorder);
 
                     if (DragEnum == -1)
                     {
-                        if (GUI.Button(CreateRect(2, realDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                        if (GUI.Button(new Rect(2, realDrawPosY, 16, 16), "X", Res.ButtonSimple))
                         {
                             EnumValues.Remove(ignoreVal);
                             break;
@@ -174,42 +166,34 @@
                         }
                     }
 
-
-
-
-
-
                     drawPosX += 13;
 
-
-                    EnumValues[i].Renamer.Draw(CreateRect(drawPosX, realDrawPosY, ToolbarRect.width - (drawPosX + 150), 17), EnumValues[i].Value, true, Res.NormalStyle, Res.TextField, true);
+                    EnumValues[i].Renamer.Draw(new Rect(drawPosX, realDrawPosY, ToolbarRect.width - (drawPosX + 150), 17), EnumValues[i].Value, true, Res.NormalStyle, Res.TextField, true);
                     drawPosX += ToolbarRect.width - (drawPosX + 150);
 
                     if (EnumValues[i].b_CustomValue)
                     {
                         float widthOffset = ToolbarRect.width - (drawPosX + 40);
-                        EnumValues[i].CustomValue = EditorGUI.TextField(CreateRect(drawPosX, realDrawPosY, widthOffset, 15), EnumValues[i].CustomValue, Res.TextField);
+                        EnumValues[i].CustomValue = EditorGUI.TextField(new Rect(drawPosX, realDrawPosY, widthOffset, 15), EnumValues[i].CustomValue, Res.TextField);
                         drawPosX += widthOffset;
                     }
                     else
                     {
-                        GUI.Label(CreateRect(drawPosX + 5, realDrawPosY - 3, 15, 20), EnumValues[i].Num + "", Res.Label);
+                        GUI.Label(new Rect(drawPosX + 5, realDrawPosY - 3, 15, 20), EnumValues[i].Num + "", Res.Label);
                         drawPosX += 20;
                     }
 
-                    var CVRect = CreateRect(drawPosX, realDrawPosY - 3, 15, 20);
-                    DrawCheckBox(CVRect, "", ref EnumValues[i].b_CustomValue);
+                    var CVRect = new Rect(drawPosX, realDrawPosY - 3, 15, 20);
+                    EnumValues[i].b_CustomValue = DrawCheckBox(CVRect, "", EnumValues[i].b_CustomValue);
 
                     if (CVRect.Contains(Event.current.mousePosition))
                         GUIToolTipe = "Custom code";
 
-
                     FoldDrawPosY += 20;
                 }
 
-
                 FoldDrawPosY += 10;
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                 {
                     EnumValues.Add(new EnumValue(GetFreeEnumIndex, CheckAvalibleEnumValueName("EnumValue", null)));
                 }
@@ -219,11 +203,9 @@
 
             FoldDrawPosY += EnumFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Enum elements", DrawDelegate, true);
 
-
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Enum);
             GUI.enabled = true;
-
         }
 
         public int GetFreeEnumIndex
@@ -249,13 +231,12 @@
         {
             string newName = CheckAvalibleEnumValueName(wantedName, ignoreVal);
 
-
             if (ignoreVal.Value != newName)
             {
                 ignoreVal.Value = CurScript.TryRenameAsmObject(Config.Name, ignoreVal.Value, newName, -1);
             }
-           
         }
+
         private string CheckAvalibleEnumValueName(string wantedName, EnumValue ignoreEnmVal)
         {
             string newName = CheckCorrectStringName(wantedName, false);
@@ -296,12 +277,12 @@
 
         private float StartFuncVarsDrawPosY = 0;
 
-        public bool DrawVar() 
+        public bool DrawVar()
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
-           
+
             Draw(Res.IconEnum, Config.Name, Color.white, 20, 0);
-             
+
             return DragObject();
         }
 
@@ -309,20 +290,19 @@
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptLocalVariable)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             ScriptEnum thatVar = CurScript.SelectedScriptObjects[0] as ScriptEnum;
 
                             if (CurScript.ScriptEnums.Contains(this) && CurScript.ScriptEnums.Contains(thatVar))
@@ -336,7 +316,7 @@
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                             }
                         }
                     }
@@ -368,7 +348,6 @@
             return result;
         }
 
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -385,17 +364,15 @@
 
         public override void EndChangeName(string newName)
         {
-
             string checkName = CurClass.CheckFreeVariableName(newName, Obj_ID);
 
             if (checkName != newName)
             {
                 string message = "Variable name " + newName + " is not allowed. Name changed to: " + checkName;
-                if (Options.b_ShowDebug)Debug.Log(message);
+                if (Options.b_ShowDebug) Debug.Log(message);
                 BConsole.EditorLog(message, 0);
             }
 
-
             Config.Name = CurScript.TryRenameAsmObject("", Config.Name, checkName, 0);
         }
 
@@ -403,17 +380,20 @@
         {
             return true;
         }
-       
     }
 
     public class EnumValue
     {
-        public EnumValue() { }
+        public EnumValue()
+        {
+        }
+
         public EnumValue(int num, string value)
         {
             Num = num;
             Value = value;
         }
+
         public int Num = -1;
         public string Value = "EnumValue_";
 
@@ -425,4 +405,4 @@
         [XmlIgnore]
         public RenameField Renamer;
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptFunction.cs Editor/m_ScriptFunction.cs
--- .Editor/m_ScriptFunction.cs	2018-06-30 08:59:18.784687700 +0700
+++ Editor/m_ScriptFunction.cs	2018-06-30 09:02:03.884528100 +0700
@@ -1,10 +1,10 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System;
-using System.Xml.Serialization;
 using System.Linq;
 using System.Runtime.InteropServices;
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -24,7 +24,9 @@
 
     public class ScriptFunction : BaseScriptObject
     {
-        public ScriptFunction() { }
+        public ScriptFunction()
+        {
+        }
 
         public ScriptFunction(string funcName, bool DontCheckFreeName)
         {
@@ -38,10 +40,12 @@
             Config.Icon = "Icons/Types/Icon_Method";
             //Config.LabelColor = new BPColor(new Color32(255, 0, 255, 255));
 
-            Config.OutPins = new List<Node_Pin>(); 
+            Config.OutPins = new List<Node_Pin>();
 
-            Node_Pin delegPin = new Node_Pin(typeof(DelegatePin), "delegate", PinTypeE.PinOut, Config.UniqOutPinID);
-            delegPin.LinkDelegVoid = true;
+            Node_Pin delegPin = new Node_Pin(typeof(DelegatePin), "delegate", PinTypeE.PinOut, Config.UniqOutPinID)
+            {
+                LinkDelegVoid = true
+            };
             Config.OutPins.Add(delegPin);
         }
 
@@ -55,11 +59,6 @@
             return new ScriptFunctionControlNode(this, NodeTypeE.ClassFunctionExit);
         }
 
-        //public object FunctionReturnTempVar = null;
-         
-            
-
-
         /////////////////////////////////////////////////////////////////
 
         public override bool _IsStatic
@@ -70,7 +69,7 @@
             }
         }
 
-        public string GetCompileCode() 
+        public string GetCompileCode()
         {
             string funcCode = "";
             List<Node> Entry = Nodes.FindAll(x => x.NodeType == NodeTypeE.ClassFunctionEntry).ToList();
@@ -83,7 +82,7 @@
             }
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find one function entry node!");
+                if (Options.b_ShowDebug) Debug.Log("Can't find one function entry node!");
             }
 
             return funcCode;
@@ -105,7 +104,6 @@
             }
         }
 
-
         public bool FunctionReturn
         {
             get
@@ -115,7 +113,6 @@
             }
         }
 
-
         public List<BType> GenericFunctionArguments = new List<BType>();
 
         public string GetFuncArguments()
@@ -173,7 +170,7 @@
         {
             string mods = "";
 
-            if(bOverrideWithNew)
+            if (bOverrideWithNew)
                 mods += "new ";
 
             if (m_AccessLevel == 1)
@@ -204,13 +201,14 @@
             else
                 return mods;
         }
+
         ////////////////////
 
         public void SetOverrideWithNew(bool state, bool setDrawable)
         {
             bOverrideWithNew = state;
 
-            if(bOverrideWithNew)
+            if (bOverrideWithNew)
             {
                 AllowNodes_Inherited = true;
                 if (setDrawable)
@@ -222,12 +220,16 @@
 
                 if (Nodes.Count < 2)
                 {
-                    Node entry = new Node(GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y);
-                    entry.b_Inherited = false;
+                    Node entry = new Node(GetEntryNodeConfig(), DefaultSpawnNode1.x, DefaultSpawnNode1.y)
+                    {
+                        b_Inherited = false
+                    };
                     Nodes.Add(entry);
 
-                    Node exit = new Node(GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y);
-                    exit.b_Inherited = false;
+                    Node exit = new Node(GetExitNodeConfig(), DefaultSpawnNode2.x, DefaultSpawnNode2.y)
+                    {
+                        b_Inherited = false
+                    };
                     Nodes.Add(exit);
                 }
             }
@@ -243,32 +245,30 @@
         }
 
         public bool bOverrideWithNew = false;
+
         public override void DrawDetails()
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 100, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
-
-
             if (IsInherited)
             {
                 if (AllowNodes_Inherited)
                 {
-                    if (GUI.Button(CreateRect(5, FoldDrawPosY, 250, 16), "Disable override with 'new' keyword", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(5, FoldDrawPosY, 250, 16), "Disable override with 'new' keyword", Res.ButtonSimple))
                     {
                         SetOverrideWithNew(false, true);
                     }
                 }
                 else
                 {
-                    if (GUI.Button(CreateRect(5, FoldDrawPosY, 250, 16), "Override with 'new' keyword", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(5, FoldDrawPosY, 250, 16), "Override with 'new' keyword", Res.ButtonSimple))
                     {
-                        SetOverrideWithNew(true, true);       
+                        SetOverrideWithNew(true, true);
                     }
                 }
                 FoldDrawPosY += 20;
@@ -278,7 +278,7 @@
             //////////////////////////// Modifiers ////////////////////////////
             DrawDeleg modDraw = delegate
             {
-                if(m_Extern)
+                if (m_Extern)
                 {
                     GUI.enabled = false;
 
@@ -286,60 +286,54 @@
                     m_StaticVirtOvverAbstract = 1;
                 }
 
-
-
                 if (m_StaticVirtOvverAbstract == 3)
                 {
                     GUI.enabled = false;
 
-                    if(m_AccessLevel < 2)
-                    m_AccessLevel = 2;
+                    if (m_AccessLevel < 2)
+                        m_AccessLevel = 2;
                 }
 
-
                 FoldDrawPosY = 5;
 
                 EditorGUI.BeginChangeCheck();
 
                 bool m_Def = m_StaticVirtOvverAbstract == 0;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_StaticVirtOvverAbstract = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticVirtOvverAbstract;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_StaticVirtOvverAbstract = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticVirtOvverAbstract;
                 FoldDrawPosY += 16;
 
-                if(m_Extern)
+                if (m_Extern)
                     GUI.enabled = true;
 
                 bool m_Stat = m_StaticVirtOvverAbstract == 1;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
-                m_StaticVirtOvverAbstract = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticVirtOvverAbstract;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
+                m_StaticVirtOvverAbstract = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticVirtOvverAbstract;
                 FoldDrawPosY += 16;
 
                 if (m_Extern)
                     GUI.enabled = false;
 
                 bool m_Virt = m_StaticVirtOvverAbstract == 2;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
-                m_StaticVirtOvverAbstract = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Virt, Res.RadioButton) ? 2 : m_StaticVirtOvverAbstract;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
+                m_StaticVirtOvverAbstract = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Virt, Res.RadioButton) ? 2 : m_StaticVirtOvverAbstract;
                 FoldDrawPosY += 16;
 
                 GUI.enabled = false;
 
-
                 bool m_Over = m_StaticVirtOvverAbstract == 3;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
-                m_StaticVirtOvverAbstract = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Over, Res.RadioButton) ? 3 : m_StaticVirtOvverAbstract;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
+                m_StaticVirtOvverAbstract = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Over, Res.RadioButton) ? 3 : m_StaticVirtOvverAbstract;
                 FoldDrawPosY += 16;
 
                 if ((!IsInherited || bOverrideWithNew) && !m_Extern)
                     GUI.enabled = true;
 
-
-
                 //GUI.enabled = !IsInherited || bOverrideWithNew;
 
                 bool m_Abstr = m_StaticVirtOvverAbstract == 4;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "abstract", Res.Label);
-                m_StaticVirtOvverAbstract = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Abstr, Res.RadioButton) ? 4 : m_StaticVirtOvverAbstract;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "abstract", Res.Label);
+                m_StaticVirtOvverAbstract = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Abstr, Res.RadioButton) ? 4 : m_StaticVirtOvverAbstract;
                 FoldDrawPosY += 20;
 
                 if (EditorGUI.EndChangeCheck())
@@ -356,26 +350,24 @@
                     }
                 }
 
-
                 FoldDrawPosY = 5;
 
                 m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 if (m_Extern)
                     GUI.enabled = true;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
                 FoldDrawPosY += 5;
 
                 if (m_Extern)
@@ -383,42 +375,37 @@
 
                 FoldDrawPosY += 16;
                 bool m_Prot = m_AccessLevel == 3;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Intern = m_AccessLevel == 4;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_ProtIntern = m_AccessLevel == 5;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
                 FoldDrawPosY += 16;
 
-               // if (!IsInherited)
-               //     GUI.enabled = true;
+                // if (!IsInherited)
+                //     GUI.enabled = true;
 
                 GUI.enabled = !IsInherited;
 
                 FoldDrawPosY += 16;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "extern (from C++ DLL)", Res.Label);
-
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "extern (from C++ DLL)", Res.Label);
 
                 EditorGUI.BeginChangeCheck();
 
-                m_Extern = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Extern, Res.CheckBoxButton);
+                m_Extern = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Extern, Res.CheckBoxButton);
 
-                if(!IsInherited)
+                if (!IsInherited)
                     AllowNodes_Inherited = !m_Extern && !m_Abstr;
 
                 if (EditorGUI.EndChangeCheck())
                 {
-             
-
                     if (m_Extern)
                     {
                         CurClass.CurrentDrawable.ID = -1;
@@ -436,7 +423,7 @@
                             AttributeDrawer.SetAttribType(typeof(DllImportAttribute));
                         }
                         */
-                        if(AttributeDrawers.Find(x => x.AttribStyle != null && x.AttribStyle.PType == typeof(DllImportAttribute)) == null)
+                        if (AttributeDrawers.Find(x => x.AttribStyle != null && x.AttribStyle.PType == typeof(DllImportAttribute)) == null)
                         {
                             SetNewAttribType_Ret(typeof(DllImportAttribute));
                         }
@@ -473,22 +460,21 @@
                 GUI.enabled = true;
             */
 
-                DrawPins();
+            DrawPins();
 
             FoldDrawPosY += 5;
 
-
             DrawDeleg genDraw = delegate
             {
                 FoldDrawPosY += 5;
 
                 foreach (var arg in GenericFunctionArguments)
                 {
-                    GUI.Box(CreateRect(0, FoldDrawPosY, 45, 20), "", Res.Box);
+                    GUI.Box(new Rect(0, FoldDrawPosY, 45, 20), "", Res.Box);
 
-                    GUI.Label(CreateRect(5, FoldDrawPosY, 30, 16), RenameTypeVarName(arg.PType, true), Res.Label);
+                    GUI.Label(new Rect(5, FoldDrawPosY, 30, 16), RenameTypeVarName(arg.PType, true), Res.Label);
 
-                    Rect drawRect = CreateRect(20, FoldDrawPosY + 2, 20, 16);
+                    Rect drawRect = new Rect(20, FoldDrawPosY + 2, 20, 16);
                     if (GUI.Button(drawRect, "X", Res.ButtonSimple))
                     {
                         GenericFunctionArguments.Remove(arg);
@@ -499,7 +485,7 @@
 
                 //if (GenericFunctionArguments.Count < GenericClassTypes.Length)
                 {
-                    if (GUI.Button(CreateRect(CreateRect(0, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                    if (GUI.Button(new Rect(new Rect(0, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                     {
                         var usedArgs = CurClass.GetUsedClassGenericArguments();
                         var availableTypes = GenericClassTypes.ToList();
@@ -518,17 +504,15 @@
                     FoldDrawPosY += 20;
                 }
                 FoldDrawPosY += 10;
-                // 
+                //
             };
-            if(!m_Extern)
+            if (!m_Extern)
                 FoldDrawPosY += GenericFunctionFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Generic Function", genDraw, true);
 
             GUI.enabled = true;
 
             FoldDrawPosY += 5;
             DrawAttributes(AttributeTargets.Method);
-
-          
         }
 
         private M_Foldout ModifiersFold = new M_Foldout(true);
@@ -537,11 +521,10 @@
         private M_Foldout GenericFunctionFold = new M_Foldout(true);
 
         private PinDrawRename[] InPinDrawer = new PinDrawRename[0];
+
         [XmlIgnore]
         public ChangeVarType OutPinTypeChanger = new ChangeVarType();
 
-
-
         private void DrawPins()
         {
             if (InPinDrawer.Length != Config.InPins.Count)
@@ -556,14 +539,13 @@
                 DrawInOutPins(Config.InPins, InPinDrawer);
 
                 FoldDrawPosY += 10;
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                 {
                     Config.InPins.Add(new Node_Pin(CurScript.DefaultSpawnType, CheckAvaliblePinName("NewInPin", Config.InPins, null), PinTypeE.PinIn, Config.UniqInPinID));
                 }
                 FoldDrawPosY += 30;
             };
 
-
             ///////////////////////////////////////
 
             FoldDrawPosY += InputsFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Function Arguments", inPinsDraw, true);
@@ -574,15 +556,14 @@
             DrawDeleg outPinsDraw = delegate
             {
                 int realPinCount = 0;
-                foreach(Node_Pin outPin in Config.OutPins)
+                foreach (Node_Pin outPin in Config.OutPins)
                 {
                     if (outPin.LinkDelegVoid)
                         continue;
 
-
                     float drawWidth = OutPinTypeChanger.DrawVarSelectType(0, FoldDrawPosY, ToolbarRect.width - 40, outPin.type, outPin);
                     drawWidth += 5;
-                    if (GUI.Button(CreateRect(drawWidth, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                    if (GUI.Button(new Rect(drawWidth, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                     {
                         Config.OutPins.Remove(outPin);
                         break;
@@ -592,11 +573,10 @@
                     realPinCount++;
                 }
 
-
                 if (realPinCount == 0)
                 {
                     FoldDrawPosY += 10;
-                    if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                    if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                     {
                         Config.OutPins.Add(new Node_Pin(CurScript.DefaultSpawnType, "return", PinTypeE.PinOut, Config.UniqOutPinID));
                     }
@@ -604,33 +584,31 @@
                 }
             };
 
-         
             ///////////////////////////////////////
 
             FoldDrawPosY += OutputsFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Function Return Type", outPinsDraw, true);
         }
 
-      
         private float maxWidth = 0;
         private float maxWidthFinal = 0;
+
         private void DrawInOutPins(List<Node_Pin> pinList, PinDrawRename[] pinDrawer)
         {
             maxWidth = 0;
             for (int i = 0; i < pinList.Count; i++)
             {
-
                 Node_Pin pin = pinList[i];
 
                 if (pinDrawer[i] == null)
                     pinDrawer[i] = new PinDrawRename(pin, pinList);
 
-                GUI.Box(CreateRect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
+                GUI.Box(new Rect(0, FoldDrawPosY, maxWidthFinal, 20), "", Res.Box);
 
                 FoldDrawPosY += 2;
 
                 float posX = 2;
 
-                if (GUI.Button(CreateRect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                if (GUI.Button(new Rect(posX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                 {
                     pinList.Remove(pin);
                     return;
@@ -639,11 +617,8 @@
 
                 posX += 5;
 
-            
-               
-
                 ///////////////////// Shift ////////////////////////////
-                Rect ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                Rect ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                 if (!IsInherited)
                     GUI.enabled = i != 0;
                 if (GUI.Button(ButtonRect, "↑", Res.ButtonSimple))
@@ -657,7 +632,7 @@
                 if (!IsInherited)
                     GUI.enabled = i < pinList.Count - 1;
 
-                ButtonRect = CreateRect(posX, FoldDrawPosY, 16, 16);
+                ButtonRect = new Rect(posX, FoldDrawPosY, 16, 16);
                 if (GUI.Button(ButtonRect, "↓", Res.ButtonSimple))
                 {
                     int index = pinList.IndexOf(pin);
@@ -673,49 +648,36 @@
 
                 posX += 5;
 
-             
-
-          
-                pinDrawer[i].PinRenamer.Draw(CreateRect(posX, FoldDrawPosY, 100, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
+                pinDrawer[i].PinRenamer.Draw(new Rect(posX, FoldDrawPosY, 100, 16), pin.PinName, true, Res.TextField, Res.TextField, true);
 
                 posX += 100;
 
                 posX += 5;
                 posX += 5;
 
-
                 //Type select
                 posX += pinDrawer[i].VarTypeChanger.DrawVarSelectType(posX, FoldDrawPosY - 2, ToolbarRect.width - 40, pin.type, pin);
                 posX += 10;
 
                 float endOffset = 5;
 
-    
                 endOffset += 5;
 
-
                 endOffset += 30;
-                GUI.Label(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "out", Res.Label);
+                GUI.Label(new Rect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "out", Res.Label);
 
                 endOffset += 16;
-                pin.IsOut = EditorGUI.Toggle(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsOut, Res.RadioButton);
-
+                pin.IsOut = EditorGUI.Toggle(new Rect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsOut, Res.RadioButton);
 
                 endOffset += 30;
-                GUI.Label(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "ref", Res.Label);
+                GUI.Label(new Rect(maxWidthFinal - endOffset, FoldDrawPosY - 2, 30, 16), "ref", Res.Label);
 
                 endOffset += 16;
-                pin.IsRef = EditorGUI.Toggle(CreateRect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsRef, Res.RadioButton);
-
-
-
-
-
+                pin.IsRef = EditorGUI.Toggle(new Rect(maxWidthFinal - endOffset, FoldDrawPosY, 16, 16), pin.IsRef, Res.RadioButton);
 
                 posX += endOffset;
                 pinDrawer[i].DrawWidth = posX;
 
-
                 if (maxWidth < posX)
                     maxWidth = posX;
 
@@ -725,16 +687,13 @@
             maxWidthFinal = maxWidth;
         }
 
-
-     
-
         public bool DrawFunc()
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
-        
+
             if (IsInherited)
             {
-                Rect interfRect = CreateRect(0, FoldDrawPosY, 20, 20);
+                Rect interfRect = new Rect(0, FoldDrawPosY, 20, 20);
                 GUI.Label(interfRect, InheritedType, Res.Label);
 
                 Draw(Config.Name, 60, 20, FoldDrawPosY);
@@ -745,8 +704,8 @@
                     string displayLabel = "Inherited from: " + InheritedName + (AllowNodes_Inherited ? " (Can be overrided)" : "");
                     float labelPixelsSize = CalcStringPixelsX(displayLabel, Res.NodePinLabel);
 
-                    Rect dataDrawRect = CreateRect(mousePos.x, mousePos.y - 20, labelPixelsSize + 18, 20);
-                    Graphics.DrawTexture(dataDrawRect, Res.ListVar_Norm);
+                    Rect dataDrawRect = new Rect(mousePos.x, mousePos.y - 20, labelPixelsSize + 18, 20);
+                    DrawTexture(dataDrawRect, Res.ListVar_Norm);
 
                     dataDrawRect.x += 3;
                     dataDrawRect.y += 3;
@@ -756,9 +715,8 @@
             }
             else
             {
-              
                 Draw(Config.Name, 50, 0, FoldDrawPosY);
-                Rect drawRect = CreateRect(ToolbarRect.width - 55, FoldDrawPosY, 20, 16);
+                Rect drawRect = new Rect(ToolbarRect.width - 55, FoldDrawPosY, 20, 16);
                 if (GUI.Button(drawRect, Res.Arrow_Down, Res.ButtonSimple))
                 {
                     FunctionNamesList.Show(new Vector2(drawRect.x + 20, GlobalMousePos.y), this);
@@ -768,26 +726,25 @@
             return DragObject();
         }
 
-
         private float StartFuncVarsDrawPosY = 0;
+
         private bool DragObject()
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptFunction)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(0, StartFuncVarsDrawPosY - 4, ToolbarRect.width - 20, 9), Res.SortLine);
+                        DrawTexture(new Rect(0, StartFuncVarsDrawPosY - 4, ToolbarRect.width - 20, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             if (CurrentDrawLocalVariables != null)
                             {
                                 ScriptFunction thatVar = CurScript.SelectedScriptObjects[0] as ScriptFunction;
@@ -803,7 +760,7 @@
                                 }
                                 else
                                 {
-                                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                                 }
                             }
                             else
@@ -819,12 +776,11 @@
             return false;
         }
 
-
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
         }
+
         public override bool b_IsPassiveSelected()
         {
             return CurClass.CurrentDrawable.DrawType == DrawableType.Method && CurClass.CurrentDrawable.ID == Obj_ID;
@@ -835,7 +791,7 @@
             CurScript.SetSelectedObject = this;
 
             if (AllowNodes_Inherited && !Event.current.control)
-            {     
+            {
                 CurClass.CurrentDrawable.ID = Obj_ID;
                 CurClass.CurrentDrawable.DrawType = DrawableType.Method;
             }
@@ -852,7 +808,6 @@
         {
             UndoSystem.RegisterUndo("Function change name");
 
-
             if (newName == CurClass.Config.Name)
             {
                 string checkName = CurClass.CheckFreeFunctionName(newName, Obj_ID);
@@ -863,7 +818,6 @@
             Config.Name = CurScript.TryRenameAsmObject(CurClass.Config.Name, Config.Name, newName, 4);
             /*
             string checkName = CurClass.CheckFreeFunctionName(newName, Obj_ID);
-      
 
             if (checkName != newName)
             {
@@ -873,8 +827,6 @@
                     if(Options.b_ShowDebug)Debug.Log("Function name " + newName + " is not allowed. Name changed to: " + checkName);
             }
 
-          
-
             */
         }
 
@@ -883,4 +835,4 @@
             return CurClass.CurrentDrawable.DrawType == DrawableType.Method && CurClass.CurrentDrawable.ID == Obj_ID && !IsInherited;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptLocalVariable.cs Editor/m_ScriptLocalVariable.cs
--- .Editor/m_ScriptLocalVariable.cs	2018-06-30 08:59:18.787689500 +0700
+++ Editor/m_ScriptLocalVariable.cs	2018-06-30 09:02:03.885528000 +0700
@@ -1,12 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using System.Xml.Serialization;
+using UnityEditor;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
 public partial class Nottorus : EditorWindow
 {
     public class ScriptLocalVariable : BaseScriptObject
@@ -18,6 +15,7 @@
         {
             InitVar(name, newType);
         }
+
         public ScriptLocalVariable(string name)
         {
             InitVar(name, CurScript.DefaultSpawnType);
@@ -28,9 +26,10 @@
 
         public void InitVar(string name, Type newType)
         {
-            Config = new NodeConfig();
-            Config.NodeRefType = new BType(newType);
-            
+            Config = new NodeConfig
+            {
+                NodeRefType = new BType(newType)
+            };
 
             if (Config.NodeRefType.PType == null)
                 Config.NodeRefType.SetVarType(CurScript.DefaultSpawnType);
@@ -38,8 +37,6 @@
             Obj_ID = CurScript.GetFreeVariableID();
             Config.Name = CurClass.CheckFreeVariableName(name, Obj_ID);
 
-
-
             ReinitConfig_Var();
         }
 
@@ -59,13 +56,16 @@
             Config.InPins = new List<Node_Pin>();
             Config.OutPins = new List<Node_Pin>();
 
-            Node_Pin newInPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinIn, 0);
-            newInPin.IsDelegate = IsDeleg(Config.NodeRefType.PType);
+            Node_Pin newInPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinIn, 0)
+            {
+                IsDelegate = IsDeleg(Config.NodeRefType.PType)
+            };
             Config.InPins.Add(newInPin);
 
-
-            Node_Pin newOutPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinOut, 0);
-            newOutPin.IsDelegate = IsDeleg(Config.NodeRefType.PType);
+            Node_Pin newOutPin = new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinOut, 0)
+            {
+                IsDelegate = IsDeleg(Config.NodeRefType.PType)
+            };
             Config.OutPins.Add(newOutPin);
 
             Config.Icon = "Icons/Types/Icon_Field";
@@ -80,8 +80,6 @@
             CurClass.ReinitAllNodes_MathPins();
         }
 
-
-
         public TempVarHolder TempVar = new TempVarHolder();
 
         private M_Foldout VariableFoldout = new M_Foldout();
@@ -92,41 +90,32 @@
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 150, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 150, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
             var backType = Config.NodeRefType.PType;
 
-
-
             DrawDeleg DrawDeleg = delegate
             {
                 VarTypeChanger.DrawVarSelectType(0, FoldDrawPosY, ToolbarRect.width - 40, Config.NodeRefType, this);
                 FoldDrawPosY += 25;
             };
-            
 
             FoldDrawPosY += VariableFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Variable Type", DrawDeleg, true);
 
-
             if (backType != Config.NodeRefType.PType)
             {
                 ReinitConfig_Var();
             }
 
-
-
-
             //////////////////////////////////////
             FoldDrawPosY += 5;
 
-
             DrawDeleg = delegate
             {
-                //GUI.Label(CreateRect(0, FoldDrawPosY, 150, 20), Config.Name, Res.LabelStyle);
+                //GUI.Label(new Rect(0, FoldDrawPosY, 150, 20), Config.Name, Res.LabelStyle);
 
                 FoldDrawPosY += DrawTempVar(TempVar, Config.NodeRefType.PType, 0, FoldDrawPosY, Config.Name, null, 0).y;
                 FoldDrawPosY += 5;
@@ -136,27 +125,21 @@
             FoldDrawPosY += DefaultValueFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, "Default value", DrawDeleg, true);
         }
 
-
-
         private float StartFuncVarsDrawPosY = 0;
+
         public bool DrawVar()
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
 
-
             if (Config.NodeRefType == null || Config.NodeRefType.PType == null)
             {
                 Config.NodeRefType.SetVarType(CurScript.DefaultSpawnType);
-                if(Options.b_ShowDebug)Debug.Log("Can't find Type for variable '" + Config.Name + "'. Set default Type: " + CurScript.DefaultSpawnType.Name);
+                if (Options.b_ShowDebug) Debug.Log("Can't find Type for variable '" + Config.Name + "'. Set default Type: " + CurScript.DefaultSpawnType.Name);
             }
 
-
-
             Draw(Config.NodeRefType.PType.IsArray ? Res.VarIconArray : Res.VarIcon, Config.Name, GetColorByType(Config.NodeRefType.PType), 20, 0);
             DrawIconTypeToolTipe();
 
-
-
             return DragObject();
         }
 
@@ -164,20 +147,19 @@
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptLocalVariable)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             if (CurrentDrawLocalVariables != null)
                             {
                                 ScriptLocalVariable thatVar = CurScript.SelectedScriptObjects[0] as ScriptLocalVariable;
@@ -193,12 +175,12 @@
                                 }
                                 else
                                 {
-                                    if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                    if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                                 }
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #2");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #2");
                             }
                         }
                     }
@@ -211,7 +193,7 @@
         private void DrawIconTypeToolTipe()
         {
             Vector2 mousePos = Event.current.mousePosition;
-            if (CreateRect(5, StartFuncVarsDrawPosY + 1, 15, 13).Contains(mousePos))
+            if (new Rect(5, StartFuncVarsDrawPosY + 1, 15, 13).Contains(mousePos))
             {
                 GUIToolTipe = RenameType_ForCompilation(Config.NodeRefType.PType);
             }
@@ -230,18 +212,17 @@
         public override void StartDrag()
         {
             DragScriptObj = true;
-            if(!CurScript.isSelected(this))
+            if (!CurScript.isSelected(this))
                 CurScript.SetSelectedObject = this;
         }
 
         public override void EndChangeName(string newName)
         {
-
             string checkName = CurClass.CheckFreeVariableName(newName, Obj_ID);
 
             if (checkName != newName)
             {
-                if(Options.b_ShowDebug)Debug.Log("Variable name " + newName + " is not allowed. Name changed to: " + checkName);
+                if (Options.b_ShowDebug) Debug.Log("Variable name " + newName + " is not allowed. Name changed to: " + checkName);
             }
             Config.Name = checkName;
 
@@ -252,6 +233,5 @@
         {
             return true;
         }
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_ScriptPropetry.cs Editor/m_ScriptPropetry.cs
--- .Editor/m_ScriptPropetry.cs	2018-06-30 08:59:18.792689500 +0700
+++ Editor/m_ScriptPropetry.cs	2018-06-30 09:02:03.886528600 +0700
@@ -1,14 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using UnityEditorInternal;
-using System;
 using System.Linq;
-using System.Collections;
-
 using System.Text.RegularExpressions;
-using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -26,8 +21,9 @@
 
     public class ScriptProperty : BaseScriptObject
     {
-        public ScriptProperty() { }
-
+        public ScriptProperty()
+        {
+        }
 
         public ScriptProperty(string name, bool DontCheckFreeName)
         {
@@ -37,7 +33,6 @@
                 Config.Name = name;
             else
                 Config.Name = CurClass.CheckFreeVariableName(name, PropertyID);
-   
 
             Config.Icon = "Icons/Types/Icon_Property";
 
@@ -58,11 +53,11 @@
             List<Node> ExitProp = Drawable_Get.Nodes.FindAll(x => x.NodeType == NodeTypeE.ClassPropertyEntry_Get).ToList();
             if (ExitProp.Count == 0)
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find property get entry node!");
+                if (Options.b_ShowDebug) Debug.Log("Can't find property get entry node!");
             }
             else if (ExitProp.Count > 1)
             {
-                if(Options.b_ShowDebug)Debug.Log("Too much property return nodes: " + ExitProp.Count);
+                if (Options.b_ShowDebug) Debug.Log("Too much property return nodes: " + ExitProp.Count);
             }
             else if (ExitProp.Count == 1)
             {
@@ -73,15 +68,15 @@
 
         public string Get_Set_CompileCode()
         {
-            List<Node> EntryProp = Drawable_Set.Nodes.FindAll(x => x.NodeType == NodeTypeE.ClassPropertyEntry_Set).ToList();
+            List<Node> EntryProp = Drawable_Set.Nodes.FindAll(x => x.NodeType == NodeTypeE.ClassPropertyEntry_Set);
 
             if (EntryProp.Count == 0)
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't find property set entry node!");
+                if (Options.b_ShowDebug) Debug.Log("Can't find property set entry node!");
             }
             else if (EntryProp.Count > 1)
             {
-                if(Options.b_ShowDebug)Debug.Log("Too much property start nodes: " + EntryProp.Count);
+                if (Options.b_ShowDebug) Debug.Log("Too much property start nodes: " + EntryProp.Count);
             }
             else if (EntryProp.Count == 1)
             {
@@ -120,12 +115,9 @@
             return new ScriptPropertyControlNode(this, NodeTypeE.ClassPropertyExit_Set);
         }
 
-        
-        
         public BaseScriptObject Drawable_Get = new BaseScriptObject();
         public BaseScriptObject Drawable_Set = new BaseScriptObject();
 
-
         public BaseScriptObject CurDraw
         {
             get
@@ -134,7 +126,7 @@
                 Drawable_Set.OwnerProperty = this;
 
                 if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertyGet)
-                {        
+                {
                     return Drawable_Get;
                 }
                 else if (CurClass.CurrentDrawable.DrawType == DrawableType.PropertySet)
@@ -153,38 +145,35 @@
         {
             if (!m_Indexer)
             {
-                if(Config.Name.Contains("["))
+                if (Config.Name.Contains("["))
                     Config.Name = CurClass.CheckFreeVariableName("NewProperty", PropertyID);
             }
 
             Config.InPins = new List<Node_Pin>();
             Config.OutPins = new List<Node_Pin>();
 
-     
-
             if (_Set)
             {
                 Config.InPins.Add(new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinIn, 0));
             }
 
-            if(_Get)
+            if (_Get)
             {
                 Config.OutPins.Add(new Node_Pin(Config.NodeRefType.PType, "", PinTypeE.PinOut, 0));
-            } 
-
+            }
 
-            if(m_Indexer)
+            if (m_Indexer)
             {
-                foreach(var arg in PropertyIndexParameters)
+                foreach (var arg in PropertyIndexParameters)
                 {
-                    Node_Pin indxPin = new Node_Pin(arg.ArgType.PType, arg.ParamName, PinTypeE.PinIn, Config.UniqInPinID);
-                    indxPin.PropertyIndexerPin = true;
-                    Config.InPins.Add(indxPin);                    
+                    Node_Pin indxPin = new Node_Pin(arg.ArgType.PType, arg.ParamName, PinTypeE.PinIn, Config.UniqInPinID)
+                    {
+                        PropertyIndexerPin = true
+                    };
+                    Config.InPins.Add(indxPin);
                 }
             }
 
-
-
             /*
             if (Config.NodeRefType.PType.IsArray)
                 Config.Icon = "InterfaceElements/VarArray";
@@ -198,12 +187,10 @@
             //Config.LabelColor = new BPColor(new Color32(200, 50, 150, 200));
         }
 
-
         public int PropertyID = 0;
 
         /////////////////////////////
 
-
         public bool _Get
         {
             get
@@ -218,10 +205,11 @@
                         return;
 
                     _get = value;
-                    Reinit_GET(); 
+                    Reinit_GET();
                 }
             }
         }
+
         public bool _Set
         {
             get
@@ -232,7 +220,7 @@
             {
                 if (_set != value)
                 {
-                    if(!value && !_Get)
+                    if (!value && !_Get)
                         return;
 
                     _set = value;
@@ -247,7 +235,7 @@
         private void Reinit_SET()
         {
             UndoSystem.RegisterUndo("Property parameters changed");
-            ReinitConfig_Var(); 
+            ReinitConfig_Var();
         }
 
         private void Reinit_GET()
@@ -256,10 +244,10 @@
             ReinitConfig_Var();
         }
 
-
         public int m_AccessLevel = 2;
 
         public int m_StaticVirtOvver = 0;
+
         public string GetPropModifiers()
         {
             string mods = "";
@@ -284,8 +272,8 @@
 
             return mods;
         }
-        ////////////////////
 
+        ////////////////////
 
         private M_Foldout ModifiersFold = new M_Foldout();
         private M_Foldout PropertyFoldout = new M_Foldout();
@@ -309,12 +297,11 @@
             return codeRet;
         }
 
-
         public override void DrawDetails()
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 100, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
@@ -328,10 +315,9 @@
 
             var backType = Config.NodeRefType.PType;
 
-
             EditorGUI.BeginChangeCheck();
-            GUI.Label(CreateRect(25, FoldDrawPosY, 90, 16), "Indexer", Res.Label);
-            m_Indexer = EditorGUI.Toggle(CreateRect(5, FoldDrawPosY, 16, 16), m_Indexer, Res.CheckBoxButton);
+            GUI.Label(new Rect(25, FoldDrawPosY, 90, 16), "Indexer", Res.Label);
+            m_Indexer = EditorGUI.Toggle(new Rect(5, FoldDrawPosY, 16, 16), m_Indexer, Res.CheckBoxButton);
             FoldDrawPosY += 20;
 
             if (EditorGUI.EndChangeCheck())
@@ -345,7 +331,6 @@
 
             DrawDeleg DrawDeleg = delegate
             {
-
                 PropChangeVarType.DrawVarSelectType(0, FoldDrawPosY, DetailsRect.width, Config.NodeRefType, this);
 
                 FoldDrawPosY += 25;
@@ -354,16 +339,11 @@
 
             FoldDrawPosY += PropertyFoldout.Draw(0, FoldDrawPosY, DetailsRect.width, objectName + " Type", DrawDeleg, true);
 
-
             if (backType != Config.NodeRefType.PType)
             {
                 ReinitConfig_Var();
             }
 
-
-
-
-
             FoldDrawPosY += 5;
             //////////////////////////// Modifiers ////////////////////////////
             DrawDeleg modDraw = delegate
@@ -374,30 +354,27 @@
                     m_AccessLevel = 2;
                 }
 
-
                 FoldDrawPosY = 5;
 
-
                 bool m_Def = m_StaticVirtOvver == 0;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_StaticVirtOvver = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticVirtOvver;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_StaticVirtOvver = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_StaticVirtOvver;
                 FoldDrawPosY += 16;
 
-
                 bool m_Stat = m_StaticVirtOvver == 1;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
-                m_StaticVirtOvver = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticVirtOvver;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "static", Res.Label);
+                m_StaticVirtOvver = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Stat, Res.RadioButton) ? 1 : m_StaticVirtOvver;
                 FoldDrawPosY += 16;
 
                 bool m_Virt = m_StaticVirtOvver == 2;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
-                m_StaticVirtOvver = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Virt, Res.RadioButton) ? 2 : m_StaticVirtOvver;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "virtual", Res.Label);
+                m_StaticVirtOvver = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Virt, Res.RadioButton) ? 2 : m_StaticVirtOvver;
                 FoldDrawPosY += 16;
 
                 GUI.enabled = false;
                 bool m_Over = m_StaticVirtOvver == 3;
-                GUI.Label(CreateRect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
-                m_StaticVirtOvver = EditorGUI.Toggle(CreateRect(160, FoldDrawPosY, 16, 16), m_Over, Res.RadioButton) ? 3 : m_StaticVirtOvver;
+                GUI.Label(new Rect(180, FoldDrawPosY, 90, 16), "override", Res.Label);
+                m_StaticVirtOvver = EditorGUI.Toggle(new Rect(160, FoldDrawPosY, 16, 16), m_Over, Res.RadioButton) ? 3 : m_StaticVirtOvver;
                 FoldDrawPosY += 20;
 
                 if (!IsInherited)
@@ -406,36 +383,35 @@
                 FoldDrawPosY = 5;
 
                 m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton) ? 0 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton) ? 1 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton) ? 2 : m_AccessLevel;
 
                 FoldDrawPosY += 5;
 
                 FoldDrawPosY += 16;
                 bool m_Prot = m_AccessLevel == 3;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
-
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "protected", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Prot, Res.RadioButton) ? 3 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Intern = m_AccessLevel == 4;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Intern, Res.RadioButton) ? 4 : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_ProtIntern = m_AccessLevel == 5;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
+                GUI.Label(new Rect(30, FoldDrawPosY, 140, 16), "protected internal", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_ProtIntern, Res.RadioButton) ? 5 : m_AccessLevel;
                 FoldDrawPosY += 16;
 
                 FoldDrawPosY += 5;
@@ -443,23 +419,15 @@
             FoldDrawPosY += ModifiersFold.Draw(0, FoldDrawPosY, DetailsRect.width, objectName + " Modifiers", modDraw, true);
             /////////////////////////////////////////////////////////////////
 
-            if(m_Indexer)
+            if (m_Indexer)
             {
                 DrawIndexerArguments();
             }
 
-
-
-
             FoldDrawPosY += 5;
             if (!IsInherited)
                 DrawAttributes(AttributeTargets.Property);
             GUI.enabled = true;
-
-
-
-
-
         }
 
         public void CheckIndexersParamCount()
@@ -486,10 +454,9 @@
         public List<ArgumentDrawer> PropertyIndexParameters = new List<ArgumentDrawer>();
         private M_Foldout DelegArgsFoldout = new M_Foldout();
         private string paramTypesChecgeCheck = "";
+
         private void DrawIndexerArguments()
         {
-            
-
             DrawDeleg DrawDelegate = delegate
             {
                 for (int i = 0; i < PropertyIndexParameters.Count; i++)
@@ -501,15 +468,12 @@
 
                     float drawPosX = 0;
                     float renamerWidth = ToolbarRect.width / 2;
-                    curDrawArg.Renamer.Draw(CreateRect(drawPosX, FoldDrawPosY, renamerWidth, 17), curDrawArg.ParamName, true, Res.NormalStyle, Res.TextField, true);
+                    curDrawArg.Renamer.Draw(new Rect(drawPosX, FoldDrawPosY, renamerWidth, 17), curDrawArg.ParamName, true, Res.NormalStyle, Res.TextField, true);
                     drawPosX += renamerWidth + 5;
 
-
                     drawPosX += curDrawArg.VarTypeChanger.DrawVarSelectType(drawPosX, FoldDrawPosY, ToolbarRect.width - 40, curDrawArg.ArgType, curDrawArg.ArgType);
 
-
-
-                    if (PropertyIndexParameters.Count > 1 && GUI.Button(CreateRect(drawPosX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
+                    if (PropertyIndexParameters.Count > 1 && GUI.Button(new Rect(drawPosX, FoldDrawPosY, 16, 16), "X", Res.ButtonSimple))
                     {
                         PropertyIndexParameters.Remove(curDrawArg);
                         ReinitConfig_Var();
@@ -517,7 +481,7 @@
                     }
                     FoldDrawPosY += 20;
                 }
-                if (GUI.Button(CreateRect(CreateRect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
+                if (GUI.Button(new Rect(new Rect(DetailsRect.width - 70, FoldDrawPosY, 40, 22)), "New", Res.AddButton))
                 {
                     AddNewArg();
                     ReinitConfig_Var();
@@ -541,10 +505,8 @@
                 paramTypesChecgeCheck = paramTypesChecgeCheckOpt;
                 ReinitConfig_Var();
             }
-
         }
 
-
         private ArgumentDrawer ignoreVal;
 
         private void EndRename(string wantedName)
@@ -591,24 +553,15 @@
             }
         }
 
-
-
-
-
-
-
-
-
-
-
         private float StartFuncVarsDrawPosY = 0;
+
         public bool DrawProperty()
         {
             StartFuncVarsDrawPosY = FoldDrawPosY;
 
-            Rect interfRect = CreateRect(0, FoldDrawPosY, 20, 20);
+            Rect interfRect = new Rect(0, FoldDrawPosY, 20, 20);
 
-            if(Config.NodeRefType.PType == null)
+            if (Config.NodeRefType.PType == null)
             {
                 Debug.LogError("The property type is null, set to default (bool)");
                 Config.NodeRefType.SetVarType(typeof(bool));
@@ -616,9 +569,8 @@
 
             if (IsInherited)
             {
-              
                 GUI.Label(interfRect, "I:");
-                
+
                 Draw(Config.NodeRefType.PType.IsArray ? Res.VarIconArray : Res.VarIcon, Config.Name, GetColorByType(Config.NodeRefType.PType), 30, 10);
 
                 if (interfRect.Contains(Event.current.mousePosition))
@@ -639,25 +591,23 @@
             return DragObject();
         }
 
-
         private bool DragObject()
         {
             if (DragScriptObj && CurScript.SelectedScriptObjects.Count == 1 && CurScript.SelectedScriptObjects[0] is ScriptProperty)
             {
-                Rect drawRect = CreateRect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
+                Rect drawRect = new Rect(0, StartFuncVarsDrawPosY, ToolbarRect.width, 8);
 
                 if (drawRect.Contains(Event.current.mousePosition))
                 {
                     if (!CurScript.isSelected(this))
                     {
-                        Graphics.DrawTexture(CreateRect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
+                        DrawTexture(new Rect(25, StartFuncVarsDrawPosY - 4, 256, 9), Res.SortLine);
 
                         if (_LMB_Up)
                         {
                             _LMB_Up = false;
                             DragScriptObj = false;
 
-
                             ScriptProperty thatVar = CurScript.SelectedScriptObjects[0] as ScriptProperty;
 
                             if (CurClass.ScriptProperties.Contains(this) && CurClass.ScriptProperties.Contains(thatVar))
@@ -671,7 +621,7 @@
                             }
                             else
                             {
-                                if(Options.b_ShowDebug)Debug.Log("TODO: Define what a hell to do in this case. #3");
+                                if (Options.b_ShowDebug) Debug.Log("TODO: Define what a hell to do in this case. #3");
                             }
                         }
                     }
@@ -694,7 +644,7 @@
             {
                 CurClass.CurrentDrawable.ID = PropertyID;
 
-                if(CurClass.CurrentDrawable.DrawType != DrawableType.PropertyGet && CurClass.CurrentDrawable.DrawType != DrawableType.PropertySet)
+                if (CurClass.CurrentDrawable.DrawType != DrawableType.PropertyGet && CurClass.CurrentDrawable.DrawType != DrawableType.PropertySet)
                     CurClass.CurrentDrawable.DrawType = DrawableType.PropertySet;
             }
         }
@@ -712,7 +662,7 @@
 
             if (checkName != newName)
             {
-                if(Options.b_ShowDebug)Debug.Log("Function name " + newName + " is not allowed. Name changed to: " + checkName);
+                if (Options.b_ShowDebug) Debug.Log("Function name " + newName + " is not allowed. Name changed to: " + checkName);
             }
 
             Config.Name = CurScript.TryRenameAsmObject(CurClass.Config.Name, Config.Name, checkName, 3);
@@ -722,6 +672,5 @@
         {
             return !IsInherited && !m_Indexer;
         }
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_SequenceWindow.cs Editor/m_SequenceWindow.cs
--- .Editor/m_SequenceWindow.cs	2018-06-30 08:59:18.795690400 +0700
+++ Editor/m_SequenceWindow.cs	2018-06-30 09:02:03.887528200 +0700
@@ -1,34 +1,27 @@
 ﻿using UnityEditor;
-using System.Collections.Generic;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
-using System.Xml.Serialization;
-
-
 public partial class Nottorus : EditorWindow
 {
     public static m_SequenceWindow FuncSeqWindow = new m_SequenceWindow();
+
     public class m_SequenceWindow
     {
         public bool b_Active = false;
 
         private bool CheckResult = false;
+
         public void Show()
         {
             b_Active = true;
-            DrawRect = CreateRect(BPE.position.width / 2 - 500 / 2, BPE.position.height / 2 - 300 / 2, 500, 300);
+            DrawRect = new Rect(BPE.position.width / 2 - 500 / 2, BPE.position.height / 2 - 300 / 2, 500, 300);
             GenerateCode_Fit();
         }
 
-
         private Rect DrawRect;
+
         public void Draw()
         {
-
             if (b_Active)
             {
                 if (DrawRect.Contains(Event.current.mousePosition))
@@ -37,14 +30,12 @@
                     {
                         LMB_Down_Deleg = delegate
                         {
-
                         };
                     }
                     if (_RMB_Up)
                     {
                         RMB_Up_Deleg = delegate
                         {
-
                         };
                     }
                 }
@@ -66,6 +57,7 @@
                 return m_ReturnChecker.MaxDrawX + 10;
             }
         }
+
         private float sizeY
         {
             get
@@ -74,21 +66,21 @@
             }
         }
 
-        private float LegendDrawPosX = 0;
+        // private float LegendDrawPosX = 0;
         void SeqDiagFunction(int windowID)
         {
             //GUI.BringWindowToFront(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
             string labelName = "Sequence diagram";
 
             float labelOffset = CalcStringPixelsX(labelName, Res.BigWindowLabel);
 
-            GUI.Label(CreateRect(DrawRect.width / 2 - labelOffset / 2, 2, 200, 30), labelName, Res.BigWindowLabel);
+            GUI.Label(new Rect(DrawRect.width / 2 - labelOffset / 2, 2, 200, 30), labelName, Res.BigWindowLabel);
 
-            Rect closeBRect = CreateRect(DrawRect.width - 45, 2, 43, 17);
-            Graphics.DrawTexture(closeBRect, Res.Button_WindowClose);
+            Rect closeBRect = new Rect(DrawRect.width - 45, 2, 43, 17);
+            DrawTexture(closeBRect, Res.Button_WindowClose);
 
             if (_LMB_Up && closeBRect.Contains(Event.current.mousePosition))
             {
@@ -99,30 +91,25 @@
 
             GUI.enabled = allowGenerate;
 
-            GUI.Box(CreateRect(5, 23, DrawRect.width - 10, 26), "", Res.Box);
-            if (GUI.Button(CreateRect(10, 27, 100, 20), "Refresh", Res.ButtonSimple))
+            GUI.Box(new Rect(5, 23, DrawRect.width - 10, 26), "", Res.Box);
+            if (GUI.Button(new Rect(10, 27, 100, 20), "Refresh", Res.ButtonSimple))
             {
                 GenerateCode_Fit();
             }
             GUI.enabled = true;
 
-
-
-            if (GUI.Button(CreateRect(115, 26, 100, 20), "Scale fit", Res.ButtonSimple))
+            if (GUI.Button(new Rect(115, 26, 100, 20), "Scale fit", Res.ButtonSimple))
             {
                 Fit();
             }
 
-    
-
-            Rect wIconRect = CreateRect(5, DrawRect.size.y - 20, 16, 16);
-
+            Rect wIconRect = new Rect(5, DrawRect.size.y - 20, 16, 16);
 
             if (CheckResult)
             {
-                if(m_ReturnChecker.UnrechableCodeDetected)
+                if (m_ReturnChecker.UnrechableCodeDetected)
                 {
-                    Graphics.DrawTexture(wIconRect, Res.SeqIcon_Warning);
+                    DrawTexture(wIconRect, Res.SeqIcon_Warning);
 
                     GUI.color = Color.yellow;
                     wIconRect.x += 18;
@@ -131,7 +118,7 @@
                 }
                 else
                 {
-                    Graphics.DrawTexture(wIconRect, Res.SeqIcon_Ok);
+                    DrawTexture(wIconRect, Res.SeqIcon_Ok);
 
                     wIconRect.x += 18;
                     wIconRect.width = 500;
@@ -142,7 +129,7 @@
             else
             {
                 var prevPos = wIconRect;
-                Graphics.DrawTexture(wIconRect, Res.SeqIcon_Error);
+                DrawTexture(wIconRect, Res.SeqIcon_Error);
                 if (m_ReturnChecker.ClosedCycleDetected)
                 {
                     GUI.color = Color.red;
@@ -161,7 +148,7 @@
                 if (m_ReturnChecker.UnrechableCodeDetected)
                 {
                     prevPos.y -= 20;
-                    Graphics.DrawTexture(prevPos, Res.SeqIcon_Warning);
+                    DrawTexture(prevPos, Res.SeqIcon_Warning);
 
                     GUI.color = Color.yellow;
                     prevPos.x += 18;
@@ -172,18 +159,18 @@
 
             GUI.color = Color.white;
 
-            Rect scrollRect = CreateRect(7, 50, DrawRect.width - 20, DrawRect.height - 104);
+            Rect scrollRect = new Rect(7, 50, DrawRect.width - 20, DrawRect.height - 104);
             if (_LMB_Down_L && scrollRect.Contains(Event.current.mousePosition) && Event.current.type == EventType.MouseDrag)
             {
                 v_Scroll -= Event.current.delta;
             }
 
-            Rect resizeCornRect = CreateRect(DrawRect.size - Vector2.one * 16, Vector2.one * 14);
+            Rect resizeCornRect = new Rect(DrawRect.size - Vector2.one * 16, Vector2.one * 14);
 
             GUI.DrawTexture(resizeCornRect, Res.ResizeCorner);
 
             if (ResizeWindow)
-                resizeCornRect = CreateRect(DrawRect.size - Vector2.one * 30, Vector2.one * 60);
+                resizeCornRect = new Rect(DrawRect.size - Vector2.one * 30, Vector2.one * 60);
 
             if (_LMB_Down && resizeCornRect.Contains(Event.current.mousePosition))
             {
@@ -200,22 +187,17 @@
 
             ClampSize();
 
+            GUI.Box(new Rect(5, 48, DrawRect.width - 15, DrawRect.height - 90), "", Res.Box);
 
-            GUI.Box(CreateRect(5, 48, DrawRect.width - 15, DrawRect.height - 90), "", Res.Box);
+            v_Scroll = GUI.BeginScrollView(scrollRect, v_Scroll, new Rect(0, 0, sizeX, sizeY));
 
-            v_Scroll = GUI.BeginScrollView(scrollRect, v_Scroll, CreateRect(0, 0, sizeX, sizeY));
+            GUI.BeginClip(new Rect(Vector2.one, new Vector2(sizeX - 2, sizeY - 2)));
 
-            GUI.BeginClip(CreateRect(Vector2.one, new Vector2(sizeX - 2, sizeY - 2)));
-
-          
             RetCheck.Draw();
             GUI.EndClip();
             GUI.EndScrollView();
-          
-
 
-
-            GUI.DragWindow(CreateRect(0, 0, 1000, 30));
+            GUI.DragWindow(new Rect(0, 0, 1000, 30));
         }
 
         private void ClampSize()
@@ -244,8 +226,7 @@
 
             ClampSize();
 
-            DrawRect = CreateRect(BPE.position.width / 2 - DrawRect.width / 2, BPE.position.height / 2 - DrawRect.height / 2, DrawRect.width, DrawRect.height);
+            DrawRect = new Rect(BPE.position.width / 2 - DrawRect.width / 2, BPE.position.height / 2 - DrawRect.height / 2, DrawRect.width, DrawRect.height);
         }
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_StateMachineDrawbl.cs Editor/m_StateMachineDrawbl.cs
--- .Editor/m_StateMachineDrawbl.cs	2018-06-30 08:59:18.798691200 +0700
+++ Editor/m_StateMachineDrawbl.cs	2018-06-30 09:02:03.888528500 +0700
@@ -1,31 +1,36 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-using System.Text.RegularExpressions;
+﻿using System.Collections.Generic;
 using System.Linq;
-using System.Xml.Serialization;
-using System;
 using System.Text;
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
     public class m_StateMachineDrawbl : BaseScriptObject
     {
-        public m_StateMachineDrawbl() { }
+        public m_StateMachineDrawbl()
+        {
+        }
 
         public DrawableType DrawType = DrawableType.Undefined;
+
         public m_StateMachineDrawbl(string name, int obj_ID, DrawableType drawType)
         {
-            Config = new NodeConfig();
-            Config.Name = name;    
+            Config = new NodeConfig
+            {
+                Name = name
+            };
             Obj_ID = obj_ID;
             DrawType = drawType;
             AllowNodes_Inherited = true;
 
-            Node Entry = new Node();
-            Entry.NodeID = CurScript.GetFreeNodeID();
-            Entry.Config = new NodeConfig();
-            Entry.NodeType = NodeTypeE.StateMachineNode_Entry;
+            Node Entry = new Node
+            {
+                NodeID = CurScript.GetFreeNodeID(),
+                Config = new NodeConfig(),
+                NodeType = NodeTypeE.StateMachineNode_Entry
+            };
             Entry.Config.Icon = "Icons/Types/Icon_Method";
             Entry.ConnectorsOut.Add(new Node_Connector("", ConnectorTypeE.ConnectorOut, 0));
             Entry.PosX = DefaultSpawnNode1.x;
@@ -33,10 +38,12 @@
             Entry.Config.Name = Config.Name;
             Nodes.Add(Entry);
 
-            Node Exit = new Node();
-            Exit.NodeID = CurScript.GetFreeNodeID();
-            Exit.Config = new NodeConfig();
-            Exit.NodeType = NodeTypeE.StateMachineNode_Exit;
+            Node Exit = new Node
+            {
+                NodeID = CurScript.GetFreeNodeID(),
+                Config = new NodeConfig(),
+                NodeType = NodeTypeE.StateMachineNode_Exit
+            };
             Exit.Config.Icon = "Icons/Types/Icon_Method";
             Exit.ConnectorsIn.Add(new Node_Connector("return", ConnectorTypeE.ConnectorIn, 0));
             Exit.PosX = DefaultSpawnNode2.x;
@@ -58,10 +65,10 @@
 
         public override void ReinitConfig_Var()
         {
-       
         }
 
         public int m_AccessLevel = 1;
+
         private string GetModifiers()
         {
             if (m_AccessLevel == 1)
@@ -73,36 +80,35 @@
         }
 
         private M_Foldout ModifiersFold = new M_Foldout(true);
+
         public override void DrawDetails()
         {
             FoldDrawPosY = DetailsRect.y;
 
-            Rect DrawlabelRect = CreateRect(10, FoldDrawPosY + 5, 100, 20);
+            Rect DrawlabelRect = new Rect(10, FoldDrawPosY + 5, 100, 20);
             GUI.Label(DrawlabelRect, Config.Name, Res.NodePinLabel);
 
             FoldDrawPosY = FoldDrawPosY + 26;
 
-
             DrawDeleg modDraw = delegate
             {
                 bool m_Def = m_AccessLevel == 0;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton)
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "By default", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Def, Res.RadioButton)
                     ? 0
                     : m_AccessLevel;
 
                 FoldDrawPosY += 16;
                 bool m_Priv = m_AccessLevel == 1;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton)
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "private", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Priv, Res.RadioButton)
                     ? 1
                     : m_AccessLevel;
 
-
                 FoldDrawPosY += 16;
                 bool m_Pub = m_AccessLevel == 2;
-                GUI.Label(CreateRect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
-                m_AccessLevel = EditorGUI.Toggle(CreateRect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton)
+                GUI.Label(new Rect(30, FoldDrawPosY, 90, 16), "public", Res.Label);
+                m_AccessLevel = EditorGUI.Toggle(new Rect(10, FoldDrawPosY, 16, 16), m_Pub, Res.RadioButton)
                     ? 2
                     : m_AccessLevel;
                 FoldDrawPosY += 5;
@@ -112,8 +118,6 @@
             FoldDrawPosY += ModifiersFold.Draw(0, FoldDrawPosY, DetailsRect.width, "Event Modifiers", modDraw, true);
         }
 
-    
-    
         private StringBuilder CodeSB;
 
         [XmlIgnore]
@@ -130,7 +134,6 @@
             BConsole.SetDrawable(DrawType, Obj_ID);
             CurScriptObj_Compile = this;
 
-
             string funcCode = GetCompileCode();
 
             if (funcCode.Length == 0 && !Options.CompileEmptyStateMachineFunctions)
@@ -138,7 +141,6 @@
 
             HasCode = true;
             CodeSB = new StringBuilder();
-     
 
             string retType = "void";
             if (DrawType == DrawableType.StateMachine_TransitionCondition)
@@ -154,9 +156,6 @@
             CodeName = stateNamePrefix + "_" + Config.Name.Replace(" ", "_");
             CodeSB.Append(CodeName);
 
-
-
-            
             if (DrawType == DrawableType.StateMachine_TransitionPosition)
             {
                 CodeSB.Append("(float " + StateMachine_TransitionPos_DeltaName + ")");
@@ -165,7 +164,6 @@
             {
                 CodeSB.Append("()");
             }
-             
 
             CodeSB.Append("\r\n");
             CodeSB.Append(cg_GetSpacing());
@@ -187,11 +185,9 @@
                 }
 
                 CodeSB.Append(");
-
             }
            */
 
-
             CodeSB.Append(CompileLocalVars(LocalVariables));
 
             CodeSB.Append(funcCode);
@@ -230,7 +226,6 @@
             Draw(Res.IconSMEvent, Config.Name, Color.white, offset + 5, -15);
         }
 
-
         public override bool b_IsSelected()
         {
             return CurScript.isSelected(this);
@@ -243,8 +238,8 @@
 
         public override void Open()
         {
-           Nottorus.CurScript.SetSelectedObject = this;
-            
+            Nottorus.CurScript.SetSelectedObject = this;
+
             if (AllowNodes_Inherited && !Event.current.control)
             {
                 Nottorus.CurClass.CurrentDrawable.ID = Obj_ID;
@@ -258,7 +253,6 @@
 
         public override void EndChangeName(string newName)
         {
-
         }
 
         public override bool b_AllowDelete()
@@ -270,8 +264,5 @@
         {
             return false;
         }
-
-
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_TempVarHolder.cs Editor/m_TempVarHolder.cs
--- .Editor/m_TempVarHolder.cs	2018-06-30 08:59:18.801691400 +0700
+++ Editor/m_TempVarHolder.cs	2018-06-30 09:02:03.889528400 +0700
@@ -1,13 +1,7 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
+﻿using System;
 using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -15,16 +9,17 @@
     {
         //[JsonConstructor]
         public TempVarHolder() { }
+
         public TempVarHolder(TempVarHolder other)
         {
             VarName = other.VarName;
             drawSize = other.drawSize;
             TempVarPrimitive = other.TempVarPrimitive;
 
-            if(other._color != null)
-            _color = new BPColor(other._color);
+            if (other._color != null)
+                _color = new BPColor(other._color);
 
-            if(other._BTypeType != null)
+            if (other._BTypeType != null)
                 _BTypeType = new BType(other._BTypeType);
 
             if (other._4Value != null)
@@ -36,7 +31,6 @@
             isInitializedByConstructor = other.isInitializedByConstructor;
             ConstructorNum = other.ConstructorNum;
 
-
             ConstructorTempVars = new TempVarHolder[other.ConstructorTempVars.Length];
 
             for (int i = 0; i < ConstructorTempVars.Length; i++)
@@ -44,8 +38,10 @@
                 ConstructorTempVars[i] = new TempVarHolder(other.ConstructorTempVars[i]);
             }
         }
+
         [XmlIgnore]
         private object DebugTempVar_Primitive = null;
+
         [XmlIgnore]
         public bool TempVar_IsDebug = false;
 
@@ -56,7 +52,7 @@
         {
             get
             {
-                if(TempVar_IsDebug)
+                if (TempVar_IsDebug)
                     return DebugTempVar_Primitive;
                 else
                     return TempVar_Primitive;
@@ -76,7 +72,6 @@
                         TempVar_IsDebug = true;
                         DebugTempVar_Primitive = value;
                     }
-
                 }
                 else
                 {
@@ -129,6 +124,7 @@
         public Vector2 drawSize = Vector2.zero;
 
         public BPColor _color = null;
+
         public BPColor TempVar_Color
         {
             get
@@ -145,6 +141,7 @@
         }
 
         public BType _BTypeType = null;
+
         public BType TempVar_TypeType
         {
             get
@@ -160,8 +157,8 @@
             }
         }
 
-
         public Custom4ValueSerializ _4Value = null;
+
         public Custom4ValueSerializ TempVar_CustomSaveClass
         {
             get
@@ -177,13 +174,10 @@
             }
         }
 
-
-
         ///////////////////////////////////////////////////////////
 
         public bool b_CanBeConstructed = false;
 
-
         public int PinID = -1;
 
         [XmlIgnore]
@@ -206,13 +200,13 @@
                 }
             }
         }
+
         public int ConstructorNum = -1;
 
         //public string TypeReinitName = "";
 
         public TempVarHolder[] ConstructorTempVars = new TempVarHolder[0];
 
-
         public object GetTempVar_Undef()
         {
             if (TempVarPrimitive != null)
@@ -230,9 +224,6 @@
             return null;
         }
 
-
-
-
         public void SetTempVar(object tempVar)
         {
             TempVarPrimitive = tempVar;
@@ -244,15 +235,12 @@
         }
     }
 
-
-
-
-
-
-
     public class Custom4ValueSerializ
     {
-        public Custom4ValueSerializ() { }
+        public Custom4ValueSerializ()
+        {
+        }
+
         public Custom4ValueSerializ(Custom4ValueSerializ other)
         {
             this.x = other.x;
@@ -260,6 +248,7 @@
             this.z = other.z;
             this.w = other.w;
         }
+
         public Custom4ValueSerializ(float x, float y, float z, float w)
         {
             this.x = x;
@@ -276,9 +265,9 @@
         [XmlIgnore]
         public Color _color_Temp = Color.white;
 
-
         private bool initialized = false;
         private Color _tempColor;
+
         [XmlIgnore]
         public Color _Color
         {
@@ -321,7 +310,6 @@
             }
         }
 
-
         [XmlIgnore]
         public Vector4 _Vector4
         {
@@ -367,5 +355,4 @@
             }
         }
     }
-
 }
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_TypeDataBase.cs Editor/m_TypeDataBase.cs
--- .Editor/m_TypeDataBase.cs	2018-06-30 08:59:18.816695500 +0700
+++ Editor/m_TypeDataBase.cs	2018-06-30 09:02:03.890528700 +0700
@@ -1,13 +1,10 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
 using System.Linq;
-using System.Xml.Serialization;
+using System.Reflection;
 using System.Text;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -16,19 +13,21 @@
     public class TypeBase
     {
         private string _assembsOptimize = "";
+
         private bool NoChangesInAsmbList(List<string> assembList, bool updateOptim = false)
         {
             var sb = new StringBuilder();
             assembList.ForEach(x => sb.Append(x));
 
-            if(updateOptim)
+            if (updateOptim)
                 _assembsOptimize = sb.ToString();
 
             return _assembsOptimize == sb.ToString();
         }
+
         public bool UpdateTypeBase(List<string> assembList)
         {
-            if(b_AbortThreadFlag)
+            if (b_AbortThreadFlag)
             {
                 return false;
             }
@@ -37,7 +36,7 @@
                 return false;
             }
 
-            if(b_IsCompleted && NoChangesInAsmbList(assembList))
+            if (b_IsCompleted && NoChangesInAsmbList(assembList))
             {
                 //Debug.Log("return UpdateTypeBase namesp");
                 return true;
@@ -50,14 +49,15 @@
             LoadProgress = 0;
             b_AbortThreadFlag = false;
 
-            m_Thread = new System.Threading.Thread(UpdateTypeBase_Async);
-            m_Thread.IsBackground = true;
-            m_Thread.Priority = Options.ThreadSearchPriority;
+            m_Thread = new System.Threading.Thread(UpdateTypeBase_Async)
+            {
+                IsBackground = true,
+                Priority = Options.ThreadSearchPriority
+            };
             m_Thread.Start();
             return false;
         }
 
-
         public void AbortThread()
         {
             b_AbortThreadFlag = true;
@@ -69,40 +69,35 @@
 
         public void CancelAbort(string owner)
         {
-            //Debug.Log("CancelInit: " + owner);
             LoadProgress = 0;
-           // if (!b_IsCompleted)
-           //     Namespaces = null;
 
-            //b_IsCompleted = false;
-            //b_IsIniting = false;
             b_AbortThreadFlag = false;
-            _assembsOptimize = "";          
+            _assembsOptimize = "";
         }
 
-
         private bool b_AbortThreadFlag = false;
 
         public System.Threading.Thread m_Thread = null;
         private List<string> AssebliesList;
 
-        public HashSet<TypeBase_NameSpaceceTypes> Namespaces = null;
+        public List<TypeBase_NameSpaceceTypes> Namespaces = null;
 
         public float LoadProgress = 0;
         public bool b_IsIniting = false;
         public bool b_IsCompleted = false;
 
-
         private void UpdateTypeBase_Async()
         {
             LoadProgress = 0;
             if (Namespaces == null)
             {
-                Namespaces = new HashSet<TypeBase_NameSpaceceTypes>();
+                Namespaces = new List<TypeBase_NameSpaceceTypes>();
                 AddCustomNodesGroup("&&Default_Flow_Control_Nodes", GetDefaultNodes_FlowControl(), "Flow Control");
                 AddCustomNodesGroup("&&Default_Math_Nodes", GetDefaultNodes_Math(), "Data");
             }
 
+            //var watch = new System.Diagnostics.Stopwatch();
+            //watch.Start();
             try
             {
                 float progrPart = 1.0f / AssebliesList.Count;
@@ -127,8 +122,6 @@
                     if (b_AbortThreadFlag)
                         return;
 
-
-
                     if (searchAss == null)
                     {
                         try
@@ -137,73 +130,61 @@
                         }
                         catch
                         {
-                            searchAss = null;
                             if (Options.b_ShowDebug) Debug.Log("Can't load namespace: " + ns);
 
                             UsedAssembly assmb = CurScript.UsedAsseblies.Find(x => x.AssemblyName == ns);
-                            CurScript.UsedAsseblies.Remove(assmb);           
+                            CurScript.UsedAsseblies.Remove(assmb);
                         }
-                    }
-                    //LoadProgress += progrPart;
 
+                        if (b_AbortThreadFlag)
+                            return;
 
-                    if (b_AbortThreadFlag)
-                        return;
-                    if (searchAss != null)
-                        Namespaces.Add(searchAss);
+                        if (searchAss != null)
+                            Namespaces.Add(searchAss);
+                    }
                 }
-
             }
             catch (Exception e)
             {
                 if (Options.b_ShowDebug) Debug.Log("Error in the UpdateTypeBase_Async thread. Exception: " + e);
             }
-
-            //Debug.Log("End init main tdn");
+            
+            Namespaces.Sort((x, y) => string.CompareOrdinal(x.NamespaceName, y.NamespaceName));
+         
+            //watch.Stop();
+            //Debug.Log("Finished init in " + watch.ElapsedMilliseconds + " ms");
             LoadProgress = 1;
 
             if (!b_AbortThreadFlag)
             {
                 NoChangesInAsmbList(AssebliesList, true);
-                b_IsCompleted = true;      
+                b_IsCompleted = true;
             }
             b_IsIniting = false;
         }
 
-
-        private HashSet<Assembly> AllAsmbl = null;
+        private List<Assembly> AllAsmbl = null;
 
         private TypeBase_NameSpaceceTypes GetNS(string assembName, float progrPart)
         {
             if (AllAsmbl == null)
             {
-                AllAsmbl = new HashSet<Assembly>(AppDomain.CurrentDomain.GetAssemblies());
+                AllAsmbl = new List<Assembly>(AppDomain.CurrentDomain.GetAssemblies());
             }
 
-            Assembly asembly = null;// AllAsmbl.Find(x => x.GetName().Name == assembName);
-
-
-            foreach(Assembly asmSearch in AllAsmbl)
-            {
-                if (asmSearch.GetName().Name == assembName)
-                {
-                    asembly = asmSearch;
-                    break;
-                }
-            }
+            Assembly asembly = AllAsmbl.FirstOrDefault(x => x.GetName().Name == assembName);
 
             TypeBase_NameSpaceceTypes NSAdd = new TypeBase_NameSpaceceTypes();
 
             if (asembly == null)
                 throw new Exception("Can't load dll");
 
-                //return NSAdd;
-
-
             NSAdd.NamespaceName = asembly.GetName().Name;
 
             Type[] Types = asembly.GetTypes();
 
+            bool usePrivate = asembly.GetName().Name.StartsWith("Assembly");
+
             for (int j = 0; j < Types.Length; ++j)
             {
                 Type type = Types[j];
@@ -211,10 +192,14 @@
                 if (type.Name != CheckCorrectStringName(type.Name, false))
                     continue;
 
+                if (!type.IsVisible && !usePrivate)
+                    continue;
+
                 if (b_AbortThreadFlag)
                     return NSAdd;
-
-                ProcessType(NSAdd, type);
+                
+                // only built-in assembly can have private members
+                ProcessType(NSAdd, type, usePrivate);
 
                 LoadProgress += (1.0f / Types.Length) * progrPart;
             }
@@ -222,43 +207,44 @@
             if (b_AbortThreadFlag)
                 return NSAdd;
 
-            NSAdd.AllTypes = new HashSet<TypeBase_Type>(NSAdd.AllTypes.OrderBy(x => x.Name));
-
-            Namespaces.Add(NSAdd);
-
-            Namespaces = new HashSet<TypeBase_NameSpaceceTypes>(Namespaces.OrderBy(x => x.NamespaceName));
+            NSAdd.AllTypes = new List<TypeBase_Type>(NSAdd.AllTypes.OrderBy(x => x.Name));
 
             return NSAdd;
         }
 
-        BindingFlags typeDatabaseSearchFlags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic;
+        const BindingFlags typeDatabaseSearchFlags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy;
+        const BindingFlags typeDatabaseSearchFlagsWithPrivate = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic;
 
-        private void ProcessType(TypeBase_NameSpaceceTypes NSAdd, Type type)
+        private void ProcessType(TypeBase_NameSpaceceTypes NSAdd, Type type, bool indexPrivate)
         {
-            TypeBase_Type typeInfo = new TypeBase_Type();
-
-            typeInfo.Type = type;
-            typeInfo.Name = RenameTypeVarName(type, true);
-
-
-
-         
-
-            typeInfo.Methods = new HashSet<MethodInfo>(type.GetMethods(typeDatabaseSearchFlags).Where(x => !x.IsSpecialName || x.Name.Contains("op_")).OrderBy(x => x.Name).ToArray());
-            typeInfo.Constructors = new HashSet<ConstructorInfo>(type.GetConstructors(typeDatabaseSearchFlags).OrderBy(x => x.Name).ToArray());
-            typeInfo.Properties = new HashSet<PropertyInfo>(type.GetProperties(typeDatabaseSearchFlags).OrderBy(x => x.Name).ToArray());
-            typeInfo.Fields = new HashSet<FieldInfo>(type.GetFields(typeDatabaseSearchFlags).OrderBy(x => x.Name).ToArray());
-            typeInfo.Events = new HashSet<EventInfo>(type.GetEvents(typeDatabaseSearchFlags).OrderBy(x => x.Name).ToArray());
+            BindingFlags flags = indexPrivate ? typeDatabaseSearchFlagsWithPrivate : typeDatabaseSearchFlags;
+            TypeBase_Type typeInfo = new TypeBase_Type
+            {
+                Type = type,
+                Name = RenameTypeVarName(type, true),
 
+                Methods = type.GetMethods(flags).Where(x => !x.IsSpecialName || x.Name.StartsWith("op_")).ToArray(),
+                Constructors = type.GetConstructors(flags),
+                Properties = type.GetProperties(flags),
+                Fields = type.GetFields(flags),
+                Events = type.GetEvents(flags)
+            };
 
-            if (typeInfo.Constructors.Count == 0 && type.IsValueType && !type.IsEnum)
+            if (Options.b_SortMembers)
             {
+                Array.Sort(typeInfo.Methods, (x, y) => string.CompareOrdinal(x.Name, y.Name));
+                Array.Sort(typeInfo.Constructors, (x, y) => string.CompareOrdinal(x.Name, y.Name));
+                Array.Sort(typeInfo.Properties, (x, y) => string.CompareOrdinal(x.Name, y.Name));
+                Array.Sort(typeInfo.Fields, (x, y) => string.CompareOrdinal(x.Name, y.Name));
+                Array.Sort(typeInfo.Events, (x, y) => string.CompareOrdinal(x.Name, y.Name));
+            }
 
-                typeInfo.StructConstructors.Add(new StructConstructorInfo(type));
+            if (typeInfo.Constructors.Length == 0 && type.IsValueType && !type.IsEnum)
+            {
+                typeInfo.StructConstructors = new StructConstructorInfo[] { new StructConstructorInfo(type) };
             }
-            
 
-            typeInfo.NodesCount = typeInfo.Methods.Count + typeInfo.Constructors.Count + typeInfo.Properties.Count + typeInfo.Fields.Count + typeInfo.Events.Count;
+            typeInfo.NodesCount = typeInfo.Methods.Length + typeInfo.Constructors.Length + typeInfo.Properties.Length + typeInfo.Fields.Length + typeInfo.Events.Length;
 
             NSAdd.AllTypes.Add(typeInfo);
 
@@ -267,28 +253,29 @@
 
         private void AddCustomNodesGroup(string nsName, List<NodeGenPins> nodes, string groupName)
         {
-            TypeBase_NameSpaceceTypes NSCustomNodes = new TypeBase_NameSpaceceTypes();
-            NSCustomNodes.NamespaceName = nsName;
-            NSCustomNodes.b_Used = true;
-            TypeBase_Type customNodes = new TypeBase_Type();
-            customNodes.Name = groupName;
-            customNodes.CustomNodes = nodes;
+            TypeBase_NameSpaceceTypes NSCustomNodes = new TypeBase_NameSpaceceTypes
+            {
+                NamespaceName = nsName,
+                b_Used = true
+            };
+            TypeBase_Type customNodes = new TypeBase_Type
+            {
+                Name = groupName,
+                CustomNodes = nodes
+            };
             NSCustomNodes.AllTypes.Add(customNodes);
 
             Namespaces.Add(NSCustomNodes);
         }
     }
 
-
-
-
     public class TypeBase_NameSpaceceTypes
     {
         public string NamespaceName;
         public bool b_Opened = false;
         public bool b_Used = false;
 
-        public HashSet<TypeBase_Type> AllTypes = new HashSet<TypeBase_Type>();
+        public List<TypeBase_Type> AllTypes = new List<TypeBase_Type>();
 
         public int AllNodesCount = 0;
     }
@@ -299,21 +286,40 @@
         public string Name;
         public int NodesCount = 0;
 
-        public HashSet<StructConstructorInfo> StructConstructors = new HashSet<StructConstructorInfo>();
-        public HashSet<MethodInfo> Methods = new HashSet<MethodInfo>();
-        public HashSet<PropertyInfo> Properties = new HashSet<PropertyInfo>();
-        public HashSet<ConstructorInfo> Constructors = new HashSet<ConstructorInfo>();
-        public HashSet<FieldInfo> Fields = new HashSet<FieldInfo>();
-        public HashSet<EventInfo> Events = new HashSet<EventInfo>();
-        public HashSet<Type> Interfaces = new HashSet<Type>();
+        public StructConstructorInfo[] StructConstructors = new StructConstructorInfo[0];
+        public MethodInfo[] Methods = new MethodInfo[0];
+        public PropertyInfo[] Properties = new PropertyInfo[0];
+        public ConstructorInfo[] Constructors = new ConstructorInfo[0];
+        public FieldInfo[] Fields = new FieldInfo[0];
+        public EventInfo[] Events = new EventInfo[0];
+        public Type[] Interfaces = new Type[0];
         public List<NodeGenPins> CustomNodes = new List<NodeGenPins>();
+    }
+
+    public class TypeBase_TypeMutable
+    {
+        public Type Type;
+        public string Name;
+        public int NodesCount = 0;
 
+        public List<StructConstructorInfo> StructConstructors = new List<StructConstructorInfo>();
+        public List<MethodInfo> Methods = new List<MethodInfo>();
+        public List<PropertyInfo> Properties = new List<PropertyInfo>();
+        public List<ConstructorInfo> Constructors = new List<ConstructorInfo>();
+        public List<FieldInfo> Fields = new List<FieldInfo>();
+        public List<EventInfo> Events = new List<EventInfo>();
+        public List<Type> Interfaces = new List<Type>();
+        public List<NodeGenPins> CustomNodes = new List<NodeGenPins>();
     }
+
     public class StructConstructorInfo
     {
-        public StructConstructorInfo(Type StructType) { this.StructType = StructType; Name = StructType.Name; }
+        public StructConstructorInfo(Type StructType)
+        {
+            this.StructType = StructType; Name = StructType.Name;
+        }
+
         public Type StructType;
         public string Name;
     }
-
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_TypeSelectListWindow.cs Editor/m_TypeSelectListWindow.cs
--- .Editor/m_TypeSelectListWindow.cs	2018-06-30 08:59:18.822697200 +0700
+++ Editor/m_TypeSelectListWindow.cs	2018-06-30 09:02:03.893528900 +0700
@@ -1,8 +1,7 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
+using UnityEditor;
 using UnityEngine;
-using System;
-
 
 public partial class Nottorus : EditorWindow
 {
@@ -15,12 +14,13 @@
         Interface,
         Attribute
     }
+
     public class TypeSelectListWindow
     {
         public bool b_Active = false;
         private Vector2 WindowPos;
 
-        private HashSet<Type> Types = new HashSet<Type>();
+        private List<Type> Types = new List<Type>();
         private SelectVarReturnType ReturnTypeDeleg;
 
         public void Show(Vector2 WinPos, SelectVarReturnType retDeleg, TypeSelect_Type listType)
@@ -34,14 +34,12 @@
             b_Active = true;
             b_WindowSearchFocus = true;
 
-
             if (WindowPos.y + Height > BPE.position.height)
                 WindowPos.y = BPE.position.height - Height;
 
             if (WindowPos.x + Width > BPE.position.width)
                 WindowPos.x = BPE.position.width - Width;
 
-
             InitTypeListItems();
         }
 
@@ -54,34 +52,37 @@
         {
             if (m_Thread != null)
             {
-                if(Options.b_ShowDebug)Debug.Log("Abort");
+                if (Options.b_ShowDebug) Debug.Log("Abort");
                 m_Thread.Abort();
             }
 
-            m_Thread = new System.Threading.Thread(GetTypesAsync);
-            m_Thread.Priority = Options.ThreadSearchPriority;
+            m_Thread = new System.Threading.Thread(GetTypesAsync)
+            {
+                Priority = Options.ThreadSearchPriority
+            };
             m_Thread.Start();
         }
 
         public AttributeTargets AttribsList_Targets = AttributeTargets.All;
+
         private void GetTypesAsync()
         {
             if (ListType == TypeSelect_Type.Interface)
             {
                 Types = CurScript.VarsWindow.InterfacesTypeList;
             }
-            else if(ListType == TypeSelect_Type.Attribute)
+            else if (ListType == TypeSelect_Type.Attribute)
             {
                 Types = CurScript.VarsWindow.GetAttributeListForScriptObj(AttribsList_Targets);
-                    //new HashSet<Type>(CurScript.VarsWindow.AtributesList.Select(x => x.attribType));
+                //new List<Type>(CurScript.VarsWindow.AtributesList.Select(x => x.attribType));
             }
             else if (ListType == TypeSelect_Type.Class)
             {
                 Types = CurScript.VarsWindow.ClassesTypes;
             }
-            else 
-            { 
-                if(Options.b_ShowDebug)Debug.Log("Requested type is undefined!");
+            else
+            {
+                if (Options.b_ShowDebug) Debug.Log("Requested type is undefined!");
                 return;
             }
 
@@ -93,25 +94,22 @@
             m_Thread = null;
         }
 
-
         ///////////////////////////////////////////////////////////////////////////////////////
 
-
         private const float Height = 400;
         private const float Width = 300;
         private Rect DrawRect;
+
         public void Draw()
         {
-
             if (b_Active)
             {
-                DrawRect = CreateRect(WindowPos.x - 1, WindowPos.y - 1, Width, Height);
+                DrawRect = new Rect(WindowPos.x - 1, WindowPos.y - 1, Width, Height);
 
                 if (_LMB_Down)
                 {
                     LMB_Down_Deleg = delegate
                     {
-
                     };
 
                     if (!DrawRect.Contains(Event.current.mousePosition))
@@ -121,7 +119,6 @@
                 }
 
                 GUI.Window(8, DrawRect, SelectTypeFunction, "", Res.EmptyStyle);
-
             }
         }
 
@@ -134,13 +131,13 @@
 
         private void FilterNames()
         {
-            FilteredTypes = new HashSet<Type>();
+            FilteredTypes = new List<Type>();
             //FilteredTypes = Types.FindAll(x => TestSearchName(s_SearchString, x.Name));
             var searchType = TestSearchNameType(s_SearchString);
             string searchL = s_SearchString.Replace(" ", "");
             foreach (Type tpTest in Types)
             {
-                if(TestSearchName(searchL, tpTest.Name, searchType))
+                if (TestSearchName(searchL, tpTest.Name, searchType))
                 {
                     FilteredTypes.Add(tpTest);
                 }
@@ -148,25 +145,25 @@
 
             //FilteredTypes = FilteredTypes.OrderBy(x => x.Name).ToList();
         }
-        
-        private HashSet<Type> FilteredTypes = new HashSet<Type>();
+
+        private List<Type> FilteredTypes = new List<Type>();
 
         void SelectTypeFunction(int windowID)
         {
             GUI.BringWindowToFront(windowID);
             GUI.FocusWindow(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
             DrawPosY = 5;
 
-            GUI.Label(CreateRect(0, DrawPosY - 5, 200, 30), "      Available Types:", Res.Label);
+            GUI.Label(new Rect(0, DrawPosY - 5, 200, 30), "      Available Types:", Res.Label);
 
             DrawPosY += 20;
 
             GUI.SetNextControlName("SelectNameSearchTextField");
 
-            string searchString = GUI.TextField(CreateRect(5, DrawPosY, Width - 10, 20), s_SearchString, Res.SearchStringLine);
+            string searchString = GUI.TextField(new Rect(5, DrawPosY, Width - 10, 20), s_SearchString, Res.SearchStringLine);
 
             if (s_SearchString != searchString)
             {
@@ -174,9 +171,15 @@
                 FilterNames();
             }
 
+            if (ev.keyCode == KeyCode.Return && "SelectNameSearchTextField" == GUI.GetNameOfFocusedControl())
+            {
+                if (FilteredTypes.Count > 0)
+                    SelectInher(FilteredTypes[0]);
+            }
+
             if (TypeDataBase.b_IsIniting)
             {
-                ProgressBar.DrawWithLabel(CreateRect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
+                ProgressBar.DrawWithLabel(new Rect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
             }
 
             DrawPosY += 25;
@@ -189,33 +192,26 @@
 
             ///////////////////////////////////////////////////////
 
-
-
-            v_Scroll = GUI.BeginScrollView(CreateRect(5, DrawPosY, Width - 10, Height - DrawPosY - 3), v_Scroll, CreateRect(0, 0, 100, ScrollItemsLength));
+            v_Scroll = GUI.BeginScrollView(new Rect(5, DrawPosY, Width - 10, Height - DrawPosY - 3), v_Scroll, new Rect(0, 0, 100, ScrollItemsLength));
 
             DrawPosY = 0;
 
-
-
-
             DrawPosY = 16;
-         
-            if (GUI.Button(CreateRect(0, DrawPosY, Width - 20, 14), "None", Res.ListButton))
+
+            if (GUI.Button(new Rect(0, DrawPosY, Width - 20, 14), "None", Res.ListButton))
             {
                 SelectInher(null);
             }
 
             DrawPosY += 3;
 
-            GUI.Label(CreateRect(0, DrawPosY, Width - 20, 16), "______________________________________");
+            GUI.Label(new Rect(0, DrawPosY, Width - 20, 16), "______________________________________");
 
             DrawPosY += 20;
 
-
-
             foreach (Type type in FilteredTypes)
             {
-                if (GUI.Button(CreateRect(5, DrawPosY, Width - 20, 14), type.Name, Res.ListButton))
+                if (GUI.Button(new Rect(5, DrawPosY, Width - 20, 14), type.Name, Res.ListButton))
                 {
                     SelectInher(type);
                 }
@@ -223,22 +219,19 @@
                 DrawPosY += 15;
             }
 
-
             DrawPosY += 5;
             GUI.EndScrollView();
 
             ScrollItemsLength = DrawPosY;
         }
 
-
         private void SelectInher(Type variant)
         {
             b_Active = false;
 
             ReturnTypeDeleg.Invoke(variant);
         }
-
     }
 
     public delegate void SelectVarReturnType(Type newType);
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Undo.cs Editor/m_Undo.cs
--- .Editor/m_Undo.cs	2018-06-30 08:59:18.825697000 +0700
+++ Editor/m_Undo.cs	2018-06-30 09:02:03.894530500 +0700
@@ -1,12 +1,10 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
 using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;
+using System.Xml;
 using System.Xml.Serialization;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -26,20 +24,14 @@
 
         public List<UndoRevision> RevisionList = new List<UndoRevision>();
 
-
         public void UpdateUndo_Control()
         {
-
-
-
             /*
            var evtCur = Event.current;
 
             if (evtCur.keyCode == KeyCode.Z)
             {
-           
             }
-         
 
             if (evtCur.keyCode == KeyCode.Z && evtCur.type == EventType.KeyUp)
             {
@@ -58,7 +50,6 @@
 
             if (evtCur.type == EventType.ValidateCommand && evtCur.commandName != "")
             {
-
                 if(evtCur.commandName == "UndoRedoPerformed")
                 {
                     if(Options.b_ShowDebug)Debug.Log("Z: " + ZPRessed);
@@ -81,16 +72,13 @@
             }
             */
             //if(Options.b_ShowDebug)Debug.Log(evtCur);
-
-
-
         }
 
-
         private bool b_LastPos = true;
+
         public void DoUndo()
         {
-            if(b_LastPos)
+            if (b_LastPos)
                 RegisterUndo("Last pos");
 
             b_LastPos = false;
@@ -145,20 +133,20 @@
             b_LastPos = true;
             //InfoMessages.ShowMessage("RegisterUndo: " + action);
 
-            var serializer = new XmlSerializer(typeof(ScriptData));
             string saveString = "";
 
             try
             {
                 using (StringWriter textWriter = new StringWriter())
+                using (XmlWriter xmlWriter = XmlWriter.Create(textWriter, new XmlWriterSettings() { Indent = false }))
                 {
-                    serializer.Serialize(textWriter, CurScript);
+                    serializer.Serialize(xmlWriter, CurScript);
                     saveString = textWriter.ToString();
                 }
             }
             catch
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't create undo due to serialisation error");
+                if (Options.b_ShowDebug) Debug.Log("Can't create undo due to serialisation error");
                 return;
             }
 
@@ -166,13 +154,14 @@
 
             DeleteOtherBranchRevisions();
 
-
             CurrentUndoPosition++;
-            UndoRevision newRev = new UndoRevision();
-            newRev.RevisionData = saveString;
-            newRev.RevisionNum = CurrentUndoPosition;
-            newRev.Action = action;
-            newRev.CurScriptFile = CurScript.ScriptFileName;
+            UndoRevision newRev = new UndoRevision
+            {
+                RevisionData = saveString,
+                RevisionNum = CurrentUndoPosition,
+                Action = action,
+                CurScriptFile = CurScript.ScriptFileName
+            };
             RevisionList.Add(newRev);
 
             CurScript.b_Autosave_Changed = true;
@@ -185,19 +174,17 @@
             RevisionList.RemoveAll(x => x.RevisionNum > CurrentUndoPosition);
         }
 
-
-
         private bool ProcessUndo(UndoRevision data)
         {
             if (data == null)
-            {           
+            {
                 return false;
             }
 
             CurrentUndoPosition = data.RevisionNum;
 
             //InfoMessages.ShowMessage("Revert to revision: " + CurrentUndoPosition);
-            
+
             CurScript = (ScriptData)XmlDeserializeFromString(data.RevisionData, typeof(ScriptData));
 
             CurScript.GetAllNodes().ForEach(x => x.InitConfig());
@@ -205,10 +192,8 @@
             return true;
         }
 
-
         private object XmlDeserializeFromString(string objectData, Type type)
         {
-            var serializer = new XmlSerializer(type);
             object result;
 
             using (TextReader reader = new StringReader(objectData))
@@ -219,4 +204,4 @@
             return result;
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_UsedAssembly.cs Editor/m_UsedAssembly.cs
--- .Editor/m_UsedAssembly.cs	2018-06-30 08:59:18.828699200 +0700
+++ Editor/m_UsedAssembly.cs	2018-06-30 09:02:03.895530100 +0700
@@ -1,28 +1,22 @@
-﻿using UnityEditor;
-using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
+﻿using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
 
 public partial class Nottorus : EditorWindow
 {
-
     public static List<string> GetUsedAssembList_CurScript()
     {
-        List<string> result = new List<string>();
-
-        result.Add("&&Default_Flow_Control_Nodes");
-        result.Add("&&Default_Math_Nodes");
+        List<string> result = new List<string>
+        {
+            "&&Default_Flow_Control_Nodes",
+            "&&Default_Math_Nodes"
+        };
 
-        result.AddRange(CurScript.UsedAsseblies.FindAll(x => x.Used && !string.IsNullOrEmpty(x.AssemblyName)).Select(y => y.AssemblyName).ToList());
+        result.AddRange(CurScript.UsedAsseblies.FindAll(x => x.Used && !string.IsNullOrEmpty(x.AssemblyName)).Select(y => y.AssemblyName));
 
         return result;
     }
 
-
     public static UsedAssembly GetUsedAssembly(string assemblyName, ScriptData curScript)
     {
         UsedAssembly findAssem = curScript.UsedAsseblies.Find(x => x.AssemblyName == assemblyName);
@@ -31,8 +25,10 @@
             return findAssem;
         else
         {
-            UsedAssembly newAssembly = new UsedAssembly();
-            newAssembly.AssemblyName = assemblyName;
+            UsedAssembly newAssembly = new UsedAssembly
+            {
+                AssemblyName = assemblyName
+            };
             curScript.UsedAsseblies.Add(newAssembly);
 
             newAssembly.Used = false;
@@ -41,7 +37,6 @@
         }
     }
 
-
     public static void SetUsedAssembly(string assemblyName, bool used, bool opened, bool ReinitDatabase, ScriptData curScript)
     {
         UsedAssembly findAssem = curScript.UsedAsseblies.Find(x => x.AssemblyName == assemblyName);
@@ -50,10 +45,12 @@
             findAssem.Used = used;
         else
         {
-            UsedAssembly newAssembly = new UsedAssembly();
-            newAssembly.Used = used;
-            newAssembly.Opened = opened;
-            newAssembly.AssemblyName = assemblyName;
+            UsedAssembly newAssembly = new UsedAssembly
+            {
+                Used = used,
+                Opened = opened,
+                AssemblyName = assemblyName
+            };
             curScript.UsedAsseblies.Add(newAssembly);
         }
 
@@ -63,11 +60,10 @@
         }
     }
 
-
     public class UsedAssembly
     {
         public string AssemblyName = "";
         public bool Used = false;
         public bool Opened = false;
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Utils.cs Editor/m_Utils.cs
--- .Editor/m_Utils.cs	2018-06-30 08:59:18.832699300 +0700
+++ Editor/m_Utils.cs	2018-06-30 09:02:03.897531300 +0700
@@ -1,51 +1,18 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-
-using System.IO;
-using System;
+using System.Linq;
 using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
 using System.Text;
-public static class Nottorus_Vector2Extension
-{
-    public static Vector2 Rotate(this Vector2 v, float degrees)
-    {
-        float sin = Mathf.Sin(degrees * Mathf.Deg2Rad);
-        float cos = Mathf.Cos(degrees * Mathf.Deg2Rad);
+using UnityEditor;
+using UnityEngine;
 
-        float tx = v.x;
-        float ty = v.y;
-        v.x = (cos * tx) - (sin * ty);
-        v.y = (sin * tx) + (cos * ty);
-        return v;
-    }
-}
 public partial class Nottorus : EditorWindow
 {
-    //private static Color colorPickerColor = new Color();
-    public static Rect CreateRect()
-    {
-        return new Rect();
-    }
-    public static Rect CreateRect(Rect sourceRect)
-    {
-        return new Rect(sourceRect);
-    }
-    public static Rect CreateRect(Vector2 pos, Vector2 size)
-    {
-        return new Rect(pos.x, pos.y, size.x, size.y);
-    }
-
-    //this is for old versions of unity
-    public static Rect CreateRect(float posX, float posY, float width, float heigth)
-    {
-        return new Rect(posX, posY, width, heigth);
-    }
-
     public class NewNameReflection
     {
-        public NewNameReflection() { }
+        public NewNameReflection()
+        {
+        }
 
         public NewNameReflection(string OwnerTypeName, string MemberName, string NewMemberName, int oType)
         {
@@ -62,7 +29,7 @@
         public int oType = 0;
     }
 
-    public static bool IsParams(ParameterInfo param) 
+    public static bool IsParams(ParameterInfo param)
     {
         if (param.IsOptional)
             return true;
@@ -72,37 +39,37 @@
 
     public class As_Out_Pin { }
 
+    private static Assembly[] Assemblies { get { return AppDomain.CurrentDomain.GetAssemblies(); } }
+
     private static Assembly assemb_CSH;
+
     public static Assembly Assembly_CSH
     {
         get
         {
             if (assemb_CSH == null)
-                assemb_CSH = AppDomain.CurrentDomain.GetAssemblies().ToList().Find(x => x.GetName().Name == "Assembly-CSharp");
+                assemb_CSH = Assemblies.FirstOrDefault(x => x.GetName().Name == "Assembly-CSharp");
             return assemb_CSH;
         }
     }
 
     private static Assembly assemb_CSHEditor;
+
     public static Assembly Assembly_CSHEditor
     {
         get
         {
             if (assemb_CSHEditor == null)
-                assemb_CSHEditor = AppDomain.CurrentDomain.GetAssemblies().ToList().Find(x => x.GetName().Name == "Assembly-CSharp-Editor");
+                assemb_CSHEditor = Assemblies.FirstOrDefault(x => x.GetName().Name == "Assembly-CSharp-Editor");
             return assemb_CSHEditor;
         }
     }
 
     private static Assembly assemb_CSHPlugins;
+
     public static Assembly Assembly_CSHPlugins
     {
-        get
-        {
-            if (assemb_CSHPlugins == null)
-                assemb_CSHPlugins = AppDomain.CurrentDomain.GetAssemblies().ToList().Find(x => x.GetName().Name == "Assembly-CSharp-Plugins");
-            return assemb_CSHPlugins;
-        }
+        get { return assemb_CSHPlugins ?? (assemb_CSHPlugins = Assemblies.FirstOrDefault(x => x.GetName().Name == "Assembly-CSharp-Plugins")); }
     }
 
     private static bool LocalAsmsContainsType(Type type)
@@ -123,36 +90,34 @@
     {
         Type thisClassType = null;
 
-        
         if (Assembly_CSH != null)
         {
-            if(!endWith)
-                thisClassType = Assembly_CSH.GetTypes().ToList().Find(x => x.Name == name);
+            if (!endWith)
+                thisClassType = Assembly_CSH.GetTypes().FirstOrDefault(x => x.Name == name);
             else
-                thisClassType = Assembly_CSH.GetTypes().ToList().Find(x => x.Name.EndsWith("." + name));
+                thisClassType = Assembly_CSH.GetTypes().FirstOrDefault(x => x.Name.EndsWith("." + name));
 
             if (thisClassType != null)
-                return thisClassType;      
+                return thisClassType;
         }
-        
+
         if (Assembly_CSHEditor != null)
         {
             if (!endWith)
-                thisClassType = Assembly_CSHEditor.GetTypes().ToList().Find(x => x.Name == name);
+                thisClassType = Assembly_CSHEditor.GetTypes().FirstOrDefault(x => x.Name == name);
             else
-                thisClassType = Assembly_CSHEditor.GetTypes().ToList().Find(x => x.Name.EndsWith("." + name));
+                thisClassType = Assembly_CSHEditor.GetTypes().FirstOrDefault(x => x.Name.EndsWith("." + name));
 
             if (thisClassType != null)
                 return thisClassType;
         }
 
-
         if (Assembly_CSHPlugins != null)
         {
             if (!endWith)
-                thisClassType = Assembly_CSHPlugins.GetTypes().ToList().Find(x => x.Name == name);
+                thisClassType = Assembly_CSHPlugins.GetTypes().FirstOrDefault(x => x.Name == name);
             else
-                thisClassType = Assembly_CSHPlugins.GetTypes().ToList().Find(x => x.Name.EndsWith("." + name));
+                thisClassType = Assembly_CSHPlugins.GetTypes().FirstOrDefault(x => x.Name.EndsWith("." + name));
 
             if (thisClassType != null)
                 return thisClassType;
@@ -166,7 +131,7 @@
                 return thisClassType;
         }
 
-       // if(Options.b_ShowDebug)if(Options.b_ShowDebug)Debug.Log("Can't find type " + name + " in assemblies 'Assembly-CSharp', 'Assembly-CSharp-Editor' and 'Assembly-CSharp-Plugins'");
+        // if(Options.b_ShowDebug)if(Options.b_ShowDebug)Debug.Log("Can't find type " + name + " in assemblies 'Assembly-CSharp', 'Assembly-CSharp-Editor' and 'Assembly-CSharp-Plugins'");
 
         return null;
     }
@@ -214,7 +179,6 @@
     }
     */
 
-
     /*
     public static Type MakeTypeArray(Type type, int Size, bool jagged)
     {
@@ -252,7 +216,6 @@
             ///*
             else if (type.Name.Contains("["))
             {
-
                 try
                 {
                     string Assemb = elemType.Assembly.FullName;
@@ -270,7 +233,6 @@
 
         //if(Options.b_ShowDebug)Debug.Log("Clear: " + elemType);
 
-
         if (Size != 0)
         {
             if (jagged)
@@ -279,7 +241,6 @@
                 {
                     elemType = elemType.MakeArrayType();
                 }
-             
             }
             else
             {
@@ -292,7 +253,6 @@
     }
     */
 
-
     public static Type MakeTypeArray(Type type, List<int> ranks)
     {
         if (type == typeof(T))
@@ -317,16 +277,15 @@
 
                 if (++breakCounter > 10)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't get root array element of type: " + type);
+                    if (Options.b_ShowDebug) Debug.Log("Can't get root array element of type: " + type);
                     break;
                 }
             }
-
         }
 
-        foreach(var subRank in ranks)
+        foreach (var subRank in ranks)
         {
-            if(subRank == 0)
+            if (subRank == 0)
                 elemType = elemType.MakeArrayType();
             else
                 elemType = elemType.MakeArrayType(subRank + 1);
@@ -335,13 +294,12 @@
         return elemType;
     }
 
+    private class Vector {
+        private Vector()
+        {
+        }
+    }
 
-
-
-
-
-
-    private class Vector { private Vector() { } }
     private class ErrorClassType { }
 
     public static string Rename_op_Method(string name)
@@ -422,7 +380,6 @@
 
     public static string CheckCorrectStringName(string name, bool allowPoint)//
     {
-
         if (string.IsNullOrEmpty(name))
         {
             return "&&";
@@ -433,7 +390,6 @@
                                       select c
                    ).ToArray());
 
-
         while (testName.Length != 0 && char.IsDigit(testName[0]))
         {
             testName = testName.Substring(1, testName.Length - 1);
@@ -449,7 +405,12 @@
         return RenameTypeVarName(type, false);
     }
 
-    private class None { private None() { } }
+    private class None {
+        private None()
+        {
+        }
+    }
+
     public static string RenameTypeVarName(Type type, bool shortName)
     {
         if (type == null)
@@ -485,13 +446,8 @@
 
         //string typeNameRenamed = type.Name;
 
-
         string ownerName = "";//type.DeclaringType == null ? "" : type.DeclaringType.Name;
 
-
-
-
-
         if (!shortName)
         {
             if (type.DeclaringType != null)
@@ -510,7 +466,6 @@
             }
         }
 
-
         string ClearName = "";
         string arrayName = "";
         if (type.IsGenericType)
@@ -521,13 +476,13 @@
 
                 if (type.DeclaringType != null)
                 {
-                    var declArgs = type.DeclaringType.GetGenericArguments().ToList();
-                    declArgs.ForEach(x => args.RemoveAll(y => y.Name == x.Name));
+                    foreach (var decl in type.DeclaringType.GetGenericArguments())
+                        args.RemoveAll(y => y.Name == decl.Name);
                 }
 
                 string nameNoNS = type.Name;
 
-                if(!string.IsNullOrEmpty(NamespaceName))
+                if (!string.IsNullOrEmpty(NamespaceName))
                     nameNoNS = nameNoNS.Replace(NamespaceName, "");
 
                 ClearName = nameNoNS.Substring(0, nameNoNS.LastIndexOf("`"));
@@ -543,26 +498,24 @@
             arrayName = type.Name.Substring(type.Name.IndexOf("["));
             ClearName = type.Name.Replace(arrayName, "");
             ClearName = CurScript.TryRenameReflection(ownerName, ClearName, 0);
-           // if (bCompilingScriptTypes)
-                //Debug.Log("");
+            // if (bCompilingScriptTypes)
+            //Debug.Log("");
         }
         else
         {
             ClearName = CurScript.TryRenameReflection(ownerName, type.Name, 0);
-           // if (bCompilingScriptTypes)
-          //      Debug.Log("");
+            // if (bCompilingScriptTypes)
+            //      Debug.Log("");
         }
 
-
-
         FinallyName += RenameVarString(NamespaceName + ClearName) + arrayName;
 
         FinallyName = FinallyName.Replace("Nottorus.", "");
 
-        if(bCompilingScriptTypes)
+        if (bCompilingScriptTypes)
         {
             bool array = false;
-            if(type.IsArray)
+            if (type.IsArray)
             {
                 array = true;
                 while (type.IsArray)
@@ -570,16 +523,15 @@
             }
             var ren = AddCompileRenameType(type);
 
-            if(array)
-            return ren.TempName + arrayName;
+            if (array)
+                return ren.TempName + arrayName;
             else
-            return ren.TempName;
+                return ren.TempName;
             //Debug.Log((NamespaceName.Length > 0) + "Type: " + type.Name + ", Renamed: " + FinallyName);
         }
 
         return FinallyName;
 
-
         /*
         Type clearRankType = MakeTypeArray(type, new List<int>() { });
 
@@ -597,8 +549,6 @@
         */
 
         //nameNoArray.Replace("UnityEngine.", "");
-
-
     }
 
     public static string RenameVarString(string nameNoArray)
@@ -610,106 +560,129 @@
             case "System.Boolean":
                 result = "bool";
                 break;
+
             case "System.Byte":
                 result = "byte";
                 break;
+
             case "System.Single":
                 result = "float";
                 break;
+
             case "System.Double":
                 result = "double";
-                break;       
+                break;
+
             case "System.Char":
                 result = "char";
                 break;
+
             case "System.String":
                 result = "string";
                 break;
+
             case "System.Int32":
                 result = "int";
                 break;
+
             case "System.Int16":
                 result = "short";
                 break;
+
             case "System.Int64":
                 result = "long";
                 break;
+
             case "System.UInt32":
                 result = "uint";
                 break;
+
             case "System.UInt16":
                 result = "ushort";
                 break;
+
             case "System.UInt64":
                 result = "ulong";
                 break;
 
-
-
             case "Boolean":
                 result = "bool";
                 break;
+
             case "Byte":
                 result = "byte";
                 break;
+
             case "Single":
                 result = "float";
                 break;
+
             case "Double":
                 result = "double";
                 break;
+
             case "Char":
                 result = "char";
                 break;
+
             case "String":
                 result = "string";
                 break;
+
             case "Int32":
                 result = "int";
                 break;
+
             case "Int16":
                 result = "short";
                 break;
+
             case "Int64":
                 result = "long";
                 break;
+
             case "UInt32":
                 result = "uint";
                 break;
+
             case "UInt16":
                 result = "ushort";
                 break;
+
             case "UInt64":
                 result = "ulong";
                 break;
 
-
-
-
             case "False":
                 return "false";
+
             case "True":
                 return "true";
+
             case "AnyNumberType":
                 return "Number";
+
             case "AnyType":
                 return "AnyType";
+
             case "ErrorTypePin":
                 return "ERROR";
+
             case "Null":
                 result = "null";
                 break;
+
             case "CurrentClassType":
                 result = CurClass.Config.Name;
                 break;
+
             default:
                 return nameNoArray;
         }
-        
+
         return result;
     }
 
-
     public static string RenameNameStringToType(string nameNoArray)
     {
         string result = "";
@@ -719,44 +692,59 @@
             case "bool":
                 result = "System.Boolean";
                 break;
+
             case "byte":
                 result = "System.Byte";
                 break;
+
             case "sbyte":
                 result = "System.SByte";
                 break;
+
             case "char":
                 result = "System.Char";
                 break;
+
             case "decimal":
                 result = "System.Decimal";
                 break;
+
             case "double":
                 result = "System.Double";
                 break;
+
             case "float":
                 result = "System.Single";
                 break;
+
             case "int":
                 result = "System.Int32";
                 break;
+
             case "uint":
                 result = "System.UInt32";
                 break;
+
             case "long":
                 result = "System.Int64";
                 break;
+
             case "ulong":
                 result = "System.UInt64";
                 break;
+
             case "object":
                 return "System.Object";
+
             case "short":
                 return "System.Int16";
+
             case "ushort":
                 return "System.UInt16";
+
             case "string":
                 return "System.String";
+
             default:
                 return nameNoArray;
         }
@@ -764,7 +752,6 @@
         return result;
     }
 
-
     public static bool IsDeleg(Type type)
     {
         if (type == null)
@@ -772,13 +759,11 @@
         return type.BaseType == typeof(MulticastDelegate) || type.BaseType == typeof(Delegate) || type == typeof(Delegate);
     }
 
-
     public static bool IsStruct(Type type)
     {
         return type.IsValueType && !type.IsPrimitive;
     }
 
-
     public static void DrawColorPicker(Rect colorRect, Color color, object retObj, float alpha = -1)
     {
         var virtRect = colorRect;
@@ -810,8 +795,6 @@
             GUI.DrawTexture(virtRect, Res.WhiteEmpty);
         }
 
-
-
         if (_LMB_Down)
         {
             if (colorRect.Contains(Event.current.mousePosition))
@@ -826,17 +809,16 @@
     private class TryCatch_InPin_Config { public TempVarHolder TempVar; public Type type; public Node node; public string filterType; }
 
     private static StringBuilder SBDrawTempVar = new StringBuilder();
+
     public static Vector2 DrawTempVar(TempVarHolder TempVar, Type type, float posX, float posY, string fieldName, Node ownerNode, float startDrawX)
     {
         SBDrawTempVar.Length = 0;
         SBDrawTempVar.Append(posX);
         SBDrawTempVar.Append(posY);
 
-        
         GUI.SetNextControlName(SBDrawTempVar.ToString());
 
-        Rect tempVarRect = CreateRect(posX, posY, 0, 16);
-
+        Rect tempVarRect = new Rect(posX, posY, 0, 16);
 
         TempVar.b_CanBeConstructed = false;
 
@@ -845,13 +827,13 @@
         if (fieldName != "" && ownerNode == null)
         {
             labelOffset = CalcStringPixelsX(fieldName, Res.Label) + 10;
-            GUI.Label(CreateRect(tempVarRect.x + 3, tempVarRect.y - 2, labelOffset, 20), fieldName + ":", Res.Label);
+            GUI.Label(new Rect(tempVarRect.x + 3, tempVarRect.y - 2, labelOffset, 20), fieldName + ":", Res.Label);
 
             labelOffset = Mathf.RoundToInt(labelOffset / 10) * 10;
 
             tempVarRect.x += labelOffset + 5;
         }
-       
+
         /*
         if (1 == 0 && type.IsArray)
         {
@@ -867,7 +849,7 @@
             {
                 if (TempVar.isInitializedByConstructor)
                 {
-                    if(type == typeof(Color))
+                    if (type == typeof(Color))
                     {
                         if (TempVar.ConstructorTempVars.Length == 3)
                         {
@@ -894,11 +876,10 @@
                                 1
                                 );
                             }
-                            
                         }
                         else if (TempVar.ConstructorTempVars.Length == 4)
                         {
-                            if(TempVar.ConstructorTempVars[0].TempVarPrimitive is byte)
+                            if (TempVar.ConstructorTempVars[0].TempVarPrimitive is byte)
                             {
                                 TempVar.TempVar_CustomSaveClass._Color = new Color32(
                               Convert.ToByte(TempVar.ConstructorTempVars[0].TempVarPrimitive),
@@ -924,7 +905,7 @@
                             }
                         }
                     }
-                    else if(type == typeof(Color32))
+                    else if (type == typeof(Color32))
                     {
                         if (TempVar.ConstructorTempVars.Length == 3)
                         {
@@ -978,14 +959,11 @@
                                 Convert.ToByte(TempVar.ConstructorTempVars[3].TempVarPrimitive)
                                 );
                             }
-                                
                         }
                     }
 
-             
                     tempVarRect.width = 40;
 
-
                     if (type == typeof(Color))
                     {
                         Color newColor = TempVar.TempVar_CustomSaveClass._Color;
@@ -1002,7 +980,6 @@
                             TempVar.ConstructorTempVars[2].TempVarPrimitive = (float)Math.Round(newColor.b, 2);
                             TempVar.ConstructorTempVars[3].TempVarPrimitive = (float)Math.Round(newColor.a, 2);
                         }
-                        
                     }
                     else if (type == typeof(Color32))
                     {
@@ -1021,17 +998,14 @@
                             TempVar.ConstructorTempVars[2].TempVarPrimitive = newColor.b;
                             TempVar.ConstructorTempVars[3].TempVarPrimitive = newColor.a;
                         }
-
-                   
                     }
 
                     var colorr = TempVar.TempVar_CustomSaveClass._Color;
 
-                    DrawColorPicker(CreateRect(tempVarRect.position, new Vector2(40, 20)), colorr, TempVar, TempVar.ConstructorTempVars.Length > 3 ? colorr.a : -1);
+                    DrawColorPicker(new Rect(tempVarRect.position, new Vector2(40, 20)), colorr, TempVar, TempVar.ConstructorTempVars.Length > 3 ? colorr.a : -1);
 
                     /*
-                    var colorRect = CreateRect(tempVarRect.position, new Vector2(40, 20));
-
+                    var colorRect = new Rect(tempVarRect.position, new Vector2(40, 20));
 
                     var virtRect = colorRect;
                     virtRect.y += 2;
@@ -1047,8 +1021,6 @@
                     virtRect.width -= 2;
                     virtRect.height -= 4;
 
-
-
                     var col = TempVar.TempVar_CustomSaveClass._Color;
                     col.a = 1;
                     GUI.color = col;
@@ -1064,8 +1036,6 @@
                         GUI.DrawTexture(virtRect, Res.WhiteEmpty);
                     }
 
-
-
                     if (_LMB_Down)
                     {
                         if (colorRect.Contains(Event.current.mousePosition))
@@ -1081,7 +1051,7 @@
             }
             catch (Exception e)
             {
-                if(Options.b_ShowDebug)Debug.Log("Error: " + e);
+                if (Options.b_ShowDebug) Debug.Log("Error: " + e);
                 TempVar.TempVar_CustomSaveClass._Color = new Color(0, 0, 0, 1);
                 //GUI.enabled = true;
             }
@@ -1101,12 +1071,10 @@
 
                 TempVar.TempVarPrimitive = EditorGUI.FloatField(tempVarRect, Fvalue, Res.TextField);
 
-
                 if (type == typeof(double))
                     TempVar.TempVarPrimitive = Convert.ToDouble(TempVar.TempVarPrimitive);
                 else if (type == typeof(decimal))
                     TempVar.TempVarPrimitive = Convert.ToDecimal(TempVar.TempVarPrimitive);
-
             }
             catch
             {
@@ -1132,7 +1100,6 @@
 
                 TempVar.TempVarPrimitive = EditorGUI.IntField(tempVarRect, Fvalue, Res.TextField);
 
-
                 TempVar.TempVarPrimitive = Convert.ToSByte(TempVar.TempVarPrimitive);
             }
             catch
@@ -1178,7 +1145,6 @@
                 TempVar.TempVarPrimitive = 0;
             }
         }
-
         else if (type == typeof(ushort))
         {
             try
@@ -1217,29 +1183,23 @@
                 TempVar.TempVarPrimitive = 0;
             }
         }
-
         else if (type == typeof(uint) || type == typeof(long) || type == typeof(ulong))
         {
             try
             {
-        
                 var Fvalue = Convert.ToInt64(TempVar.TempVarPrimitive);
-    
 
                 float labelWidth = CalcStringPixelsX(Fvalue.ToString(), Res.TextField);
                 tempVarRect.width = Mathf.Clamp(labelWidth + 15, 80, 200);
 
-
                 TempVar.TempVarPrimitive = EditorGUI.LongField(tempVarRect, Fvalue, Res.TextField);
 
-                
                 if (type == typeof(uint))
                     TempVar.TempVarPrimitive = Convert.ToUInt32(TempVar.TempVarPrimitive);
                 else if (type == typeof(long))
                     TempVar.TempVarPrimitive = Convert.ToInt64(TempVar.TempVarPrimitive);
                 else if (type == typeof(ulong))
                     TempVar.TempVarPrimitive = Convert.ToUInt64(TempVar.TempVarPrimitive);
-                
             }
             catch
             {
@@ -1260,7 +1220,6 @@
                 TempVar.TempVarPrimitive = false;
             }
         }
-
         else if (type == typeof(string))
         {
             try
@@ -1318,7 +1277,6 @@
             {
                 int Fvalue = Convert.ToInt32(TempVar.TempVarPrimitive);
 
-
                 string[] values = Enum.GetNames(type);
 
                 if (values.Length <= Fvalue)
@@ -1334,7 +1292,6 @@
 
                 string[] EnumValues = Enum.GetNames(type);
 
-
                 float strWidth = CalcStringPixelsX(EnumValues[Fvalue], Res.PopupButton);
 
                 tempVarRect.width = strWidth + 20;
@@ -1356,7 +1313,7 @@
                 var name = RenameTypeVarName(saveType, true);
                 float typeLabelWidth = CalcStringPixelsX(name, Res.PopupButton) + 20;
 
-                if (GUI.Button(CreateRect(posX, posY, typeLabelWidth, 17), name, Res.PopupButton))
+                if (GUI.Button(new Rect(posX, posY, typeLabelWidth, 17), name, Res.PopupButton))
                 {
                     TryCatch_InPin_Config cfg = new TryCatch_InPin_Config()
                     {
@@ -1386,7 +1343,7 @@
 
                 float typeLabelWidth = CalcStringPixelsX(name, Res.PopupButton) + 20;
 
-                if (GUI.Button(CreateRect(posX, posY, typeLabelWidth, 17), name, Res.PopupButton))
+                if (GUI.Button(new Rect(posX, posY, typeLabelWidth, 17), name, Res.PopupButton))
                 {
                     CurScript.VarsWindow.Show(GlobalMousePos, TempVar, saveType);
                 }
@@ -1402,16 +1359,15 @@
             (
              type.Assembly != typeof(AnyType).Assembly &&
              type.GetConstructors().Length > 0 &&
-             type != typeof(UnityEngine.Object) && 
+             type != typeof(UnityEngine.Object) &&
              type != typeof(object) && (!IsEnumer(type) || type.GetInterface("IEnumerable") != null))// && !IsEnumer(type)// && !IsDeleg(type)
             )
-        { 
+        {
             TempVar.b_CanBeConstructed = true;
             Vector2 drawSize = DrawConstructorTempVar(TempVar, type, ref tempVarRect, ownerNode, startDrawX);
             tempVarRect.width = drawSize.x;
             tempVarRect.height = drawSize.y;
         }
-
         else
         {
             TempVar.drawSize = tempVarRect.size;
@@ -1424,20 +1380,15 @@
 
             //if (GUI.GetNameOfFocusedControl() == controlName)
             {
-               
             }
         }
 
-
-
-
-
         if ((_LMB_Down || _RMB_Up) && !TempVar.b_CanBeConstructed)
         {
             if (tempVarRect.Contains(Event.current.mousePosition))
             {
                 _RMB_Up = false;
-                
+
                 LMB_Down_Deleg = delegate
                 {
                     IsEditingText = true;
@@ -1445,7 +1396,7 @@
                 RMB_Up_Deleg += delegate
                 {
                     IsEditingText = true;
-                };     
+                };
             }
             else
             {
@@ -1472,13 +1423,10 @@
 
         //if (TempVar.isInitializedByConstructor)
         {
-            GUI.Box(CreateRect(startDrawX + 2, tempVarRect.y - offsetY, TempVar.drawSize.x + extendX, TempVar.drawSize.y + offsetY), "", Res.Box_Borders);     
+            GUI.Box(new Rect(startDrawX + 2, tempVarRect.y - offsetY, TempVar.drawSize.x + extendX, TempVar.drawSize.y + offsetY), "", Res.Box_Borders);
         }
         TempVar.drawSize = Vector2.zero;
 
-
-      
-
         int switchDataCount = 0;
 
         if (varType.IsArray)
@@ -1497,7 +1445,7 @@
         else if (IsDeleg(varType))
         {
             switchDataCount = 1;
-        }       
+        }
         else
         {
             switchDataCount = varType.GetConstructors().Length;
@@ -1505,13 +1453,12 @@
         bool hasConstr = switchDataCount > 0;
 
         float headerDrawPosX = 2;
-        
+
         if (hasConstr)
         {
-         
             TempVar.drawSize.y += 20;
 
-            TempVar.isInitializedByConstructor = EditorGUI.Toggle(CreateRect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 19, 18, 18), TempVar.isInitializedByConstructor, Res.CheckBoxButton);
+            TempVar.isInitializedByConstructor = EditorGUI.Toggle(new Rect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 19, 18, 18), TempVar.isInitializedByConstructor, Res.CheckBoxButton);
             headerDrawPosX += 20;
 
             string keywordLabel = "new ";
@@ -1524,9 +1471,8 @@
             if (IsDefaultGenericType(varType))
                 labelName += ")";
 
-
             float labelOffset = CalcStringPixelsX(labelName, Res.Label);
-            GUI.Label(CreateRect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 21, labelOffset + 5, 20), labelName, Res.Label);
+            GUI.Label(new Rect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 21, labelOffset + 5, 20), labelName, Res.Label);
 
             headerDrawPosX += labelOffset;
             headerDrawPosX += 7;
@@ -1536,11 +1482,13 @@
                 List<ConstrPinDataHolder> tPinData = new List<ConstrPinDataHolder>();
 
                 bool reinitTVH = false;
+
                 #region switchData
+
                 if (switchDataCount > 1)
                 {
-                    ///////////////////////////////////////////////////////////////////////////////////////           
-                    Rect switchButtonRect = CreateRect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 17, 12, 12);
+                    ///////////////////////////////////////////////////////////////////////////////////////
+                    Rect switchButtonRect = new Rect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 17, 12, 12);
                     GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Lt);
 
                     if (GUI.Button(switchButtonRect, "", Res.EmptyStyle))
@@ -1552,12 +1500,12 @@
 
                     string switchNum = (TempVar.ConstructorNum + 1) + "/" + switchDataCount;
 
-                    switchButtonRect = CreateRect(tempVarRect.x + headerDrawPosX - 1, tempVarRect.y + TempVar.drawSize.y - 18, 12, 12);
+                    switchButtonRect = new Rect(tempVarRect.x + headerDrawPosX - 1, tempVarRect.y + TempVar.drawSize.y - 18, 12, 12);
                     GUI.Label(switchButtonRect, switchNum, Res.Label);
 
                     headerDrawPosX += CalcStringPixelsX(switchNum, Res.Label);
 
-                    switchButtonRect = CreateRect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 17, 12, 12);
+                    switchButtonRect = new Rect(tempVarRect.x + headerDrawPosX, tempVarRect.y + TempVar.drawSize.y - 17, 12, 12);
 
                     GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Rt);
 
@@ -1568,17 +1516,17 @@
                     }
                     headerDrawPosX += 15;
                 }
+
                 #endregion switchData
-                ///////////////////////////////////////////////////////////////////////////////////////
 
+                ///////////////////////////////////////////////////////////////////////////////////////
 
-                if (TempVar.ConstructorNum >= switchDataCount) 
+                if (TempVar.ConstructorNum >= switchDataCount)
                     TempVar.ConstructorNum = 0;
 
                 if (TempVar.ConstructorNum < 0)
                     TempVar.ConstructorNum = switchDataCount - 1;
 
-
                 if (varType.IsArray)
                 {
                     var arrayRanks = GetTypeArrayRanks(varType);
@@ -1598,7 +1546,6 @@
                 }
                 else if (IsDefaultGenericType(varType))
                 {
-
                 }
                 else if (IsStruct(varType) && varType.GetConstructors().Length == 0)
                 {
@@ -1622,14 +1569,12 @@
                     ConstructorInfo[] cInfos = varType.GetConstructors();
                     ConstructorInfo curConstrInfo = cInfos[TempVar.ConstructorNum];
 
-                    ParameterInfo[] curConstrParams = curConstrInfo.GetParameters();
-                    // tempPinsCount = curConstrParams.Length;
-
-
-                    curConstrParams.ToList().ForEach(x => tPinData.Add(new ConstrPinDataHolder(x.Name, x.ParameterType)));
+                    foreach (var constrInfo in curConstrInfo.GetParameters())
+                    {
+                        tPinData.Add(new ConstrPinDataHolder(constrInfo.Name, constrInfo.ParameterType));
+                    }                     
                 }
 
-
                 if (reinitTVH || TempVar.ConstructorTempVars.Length != tPinData.Count)// || TempVar.TypeReinitName != varType.Name)
                 {
                     //TempVar.TypeReinitName = varType.Name;
@@ -1637,8 +1582,6 @@
                     TempVar.ConstructorTempVars = new TempVarHolder[tPinData.Count];
                 }
 
-                
-
                 for (int i = 0; i < tPinData.Count; i++)
                 {
                     Type drawType = tPinData[i].type;
@@ -1652,7 +1595,7 @@
                         if (ownerNode != null && varHolder.PinID == -1)
                         {
                             varHolder.PinID = ownerNode.Config.UniqInPinID;
-                            //if(Options.b_ShowDebug)Debug.Log("SetUniqConsPinId: " + varHolder.PinID);  
+                            //if(Options.b_ShowDebug)Debug.Log("SetUniqConsPinId: " + varHolder.PinID);
                         }
                     }
 
@@ -1679,17 +1622,18 @@
                             if (drawPin.type.PType != drawType)
                                 drawPin.SetVarType(drawType);
 
-
                             drawPin.b_WantDelete = false;
                             drawPin.DrawPin(ownerNode, ref drawPosY, ref pinDrawWidth, false, varHolder.isInitializedByConstructor && Options.HidePinWhenInitialisedByConstructor);
                             subConnected_Draw = drawPin.Connected == 0;
-                            
+
                             drawPosX += pinDrawWidth - 30;
                         }
                         else
                         {
-                            drawPin = new Node_Pin(drawType, tPinData[i].Name, PinTypeE.PinIn, varHolder.PinID);
-                            drawPin.TempVarConstrPin = true;
+                            drawPin = new Node_Pin(drawType, tPinData[i].Name, PinTypeE.PinIn, varHolder.PinID)
+                            {
+                                TempVarConstrPin = true
+                            };
                             pinsDraw.Add(drawPin);
                             //if(Options.b_ShowDebug)Debug.Log("Add constr pin: " + curConstrParams[i].Name + " id: " + varHolder.PinID);
 
@@ -1707,7 +1651,6 @@
 
                         float posX = startDrawX + startOffsetDiff;
                         float posY = tempVarRect.y + TempVar.drawSize.y;
-                        
 
                         widthSize = DrawTempVar(varHolder, drawType, posX, posY, tPinData[i].Name, ownerNode, startDrawX + 2);
                         TempVar.drawSize.x = Mathf.Max(TempVar.drawSize.x, widthSize.x + startOffsetDiff - 5);
@@ -1718,7 +1661,7 @@
                         TempVar.drawSize.x = Mathf.Max(TempVar.drawSize.x, 20 + startOffsetDiff - 5);
                         TempVar.drawSize.y += 21;
                     }
-                }            
+                }
             }
             else
             {
@@ -1737,6 +1680,7 @@
         }
         return TempVar.drawSize;
     }
+
     private class ConstrPinDataHolder
     {
         public ConstrPinDataHolder(string Name, Type type)
@@ -1744,6 +1688,7 @@
             this.Name = Name;
             this.type = type;
         }
+
         public string Name;
         public Type type;
     }
@@ -1765,7 +1710,6 @@
 
     public static string GetCodeTempVar(Type type, TempVarHolder TempVar, bool allowNull, Node ownerNode, Node_Pin pin)
     {
-    
         AddNewAssembly(type);
 
         DrawTempVar(TempVar, type, 0, 0, "", ownerNode, 0);
@@ -1775,21 +1719,20 @@
             LinkInfo link = Linking.SourcePinLinkExite(ownerNode.NodeID, pin.PinID);
             if (link != null)
             {
-               // if(Options.b_ShowDebug)Debug.Log("Found! " + link);
+                // if(Options.b_ShowDebug)Debug.Log("Found! " + link);
                 Node linkNode = CurScript.FindNodeFromID(link.LNodeID);
 
-                if(linkNode == null)
+                if (linkNode == null)
                 {
-                    if(Options.b_ShowDebug)Debug.Log("Can't find node " + link.LNodeID + "(try open all windows with nodes. link renderer fix fake link)");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find node " + link.LNodeID + "(try open all windows with nodes. link renderer fix fake link)");
                     return "TempVarIsNotDefined";
                 }
                 return linkNode.GetOutPinCodeWithDebug(link);
             }
 
-           // if(Options.b_ShowDebug)Debug.Log("Try find link with nodeID: " + ownerNode.NodeID + "  pinID: " + pin.PinID + " result: " + (link != null));
+            // if(Options.b_ShowDebug)Debug.Log("Try find link with nodeID: " + ownerNode.NodeID + "  pinID: " + pin.PinID + " result: " + (link != null));
         }
 
-
         //if (type.IsArray)
         //    return "null";
         /*
@@ -1813,11 +1756,11 @@
         {
             return TempVar.TempVarPrimitive.ToString().Replace(",", ".") + "f";
         }
-        else if(type == typeof(double))
+        else if (type == typeof(double))
         {
             return TempVar.TempVarPrimitive.ToString().Replace(",", ".") + "D";
         }
-        else if(type == typeof(decimal))
+        else if (type == typeof(decimal))
         {
             return TempVar.TempVarPrimitive.ToString() + "M";
         }
@@ -1831,7 +1774,7 @@
                 return "false";
             else
             {
-                if(Options.b_ShowDebug)Debug.Log("Bool value is undefined: '" + value + "'. Procesed result: 'false'.");
+                if (Options.b_ShowDebug) Debug.Log("Bool value is undefined: '" + value + "'. Procesed result: 'false'.");
                 return "false";
             }
         }
@@ -1843,7 +1786,6 @@
         {
             return TempVar.TempVarPrimitive.ToString();
         }
-
         else if (type == typeof(string))
         {
             string varStr = (string)TempVar.TempVarPrimitive;
@@ -1852,12 +1794,12 @@
                 return "\"\"";
             else
             {
-                bool specials = 
-                    varStr.Contains(@"\'") || 
-                    varStr.Contains("\\\"") || 
-                    varStr.Contains("\\\\") || 
-                    varStr.Contains(@"\0") || 
-                    varStr.Contains(@"\n") || 
+                bool specials =
+                    varStr.Contains(@"\'") ||
+                    varStr.Contains("\\\"") ||
+                    varStr.Contains("\\\\") ||
+                    varStr.Contains(@"\0") ||
+                    varStr.Contains(@"\n") ||
                     varStr.Contains(@"\r") ||
                     varStr.Contains(@"\t") ||
                     varStr.Contains(@"\U") ||
@@ -1870,7 +1812,6 @@
                 else
                     return "\"" + varStr + "\"";
             }
-
         }
         else if (type == typeof(char))
         {
@@ -1880,7 +1821,6 @@
                 return "''";
             else
                 return "'" + varStr + "'";
-
         }
         else if (type.IsValueType && type.IsEnum)
         {
@@ -1901,19 +1841,18 @@
 
             string enumValue = CurScript.TryRenameReflection(type.Name, values[Fvalue], -1);
 
-
             return RenameType_ForCompilation(type) + "." + enumValue;
         }
         else if (type == typeof(Type))
         {
             if (TempVar.TempVar_TypeType.PType == null)
             {
-                if(Options.b_ShowDebug)Debug.Log("Can't convert type coz it null..(");
+                if (Options.b_ShowDebug) Debug.Log("Can't convert type coz it null..(");
                 return "&ERROR:Convet_Type-Typeof(Type)&";
             }
             else if (TempVar.TempVar_TypeType.PType.Assembly == typeof(T).Assembly && TempVar.TempVar_TypeType.PType != typeof(CurrentClassType))
             {
-                if(IsDefaultGenericType(TempVar.TempVar_TypeType.PType))
+                if (IsDefaultGenericType(TempVar.TempVar_TypeType.PType))
                 {
                     return "typeof(" + RenameTypeVarName(TempVar.TempVar_TypeType.PType, true) + ")";
                 }
@@ -1936,7 +1875,7 @@
         {
             return GetCodeConstructorTempVar(TempVar, type, allowNull, ownerNode, pin);
         }
-     
+
         /*
         else if (type.IsGenericType)
         {
@@ -1944,17 +1883,14 @@
         }
         */
 
-
-
-
-        // 
+        //
     }
 
     private static string GetCodeConstructorTempVar(TempVarHolder TempVar, Type varType, bool allowNull, Node ownerNode, Node_Pin pin)
     {
         if (IsDefaultGenericType(varType))
         {
-            if (TempVar.isInitializedByConstructor)            
+            if (TempVar.isInitializedByConstructor)
                 return "default(" + RenameType_ForCompilation(varType) + ")";
             else
                 return "TempVarIsNotDefined";
@@ -1972,24 +1908,20 @@
             }
         }
 
-    
         AddNewAssembly(varType);
 
-
         string code = "";
 
-
         bool delegReturn = false;
 
         if (varType.IsArray)
         {
-
         }
         else if (IsStruct(varType) && varType.GetConstructors().Length == 0)
         {
             code = "new " + RenameType_ForCompilation(varType) + "() { ";
         }
-        else if(IsDeleg(varType))
+        else if (IsDeleg(varType))
         {
             MethodInfo invoke = varType.GetMethod("Invoke");
 
@@ -2010,18 +1942,16 @@
         }
 
         /*
-        ConstructorInfo[] cInfos = varType.GetConstructors();  
+        ConstructorInfo[] cInfos = varType.GetConstructors();
         ConstructorInfo curConstrInfo = cInfos[TempVar.ConstructorNum];
         ParameterInfo[] curConstrParams = curConstrInfo.GetParameters();
         */
 
         for (int i = 0; i < TempVar.ConstructorTempVars.Length; i++)
         {
-
             if (i != 0)
                 code += ", ";
 
-
             TempVarHolder tvHold = TempVar.ConstructorTempVars[i];
 
             Node_Pin connPin = null;
@@ -2029,25 +1959,21 @@
             {
                 connPin = ownerNode.Config.InPins.Find(x => x.PinID == tvHold.PinID);
 
-
                 if (connPin != null)
                 {
-                 
-
                     if (IsStruct(varType) && varType.GetConstructors().Length == 0)
                     {
                         code += connPin.PinName + " = ";
                     }
 
-
                     code += GetCodeTempVar(connPin.type.PType, tvHold, allowNull, ownerNode, connPin);//curConstrParams[i].ParameterType
                 }
                 else
-                    if(Options.b_ShowDebug)Debug.Log("Can't find pin " + tvHold.PinID + " in node " + ownerNode.NodeID + " to get temp var");
+                    if (Options.b_ShowDebug) Debug.Log("Can't find pin " + tvHold.PinID + " in node " + ownerNode.NodeID + " to get temp var");
             }
             else
             {
-                if(tvHold._BTypeType != null && tvHold._BTypeType.PType != null)
+                if (tvHold._BTypeType != null && tvHold._BTypeType.PType != null)
                 {
                     if (IsStruct(varType) && varType.GetConstructors().Length == 0)
                     {
@@ -2087,7 +2013,7 @@
         {
             code += " }";
         }
-        else if(delegReturn)
+        else if (delegReturn)
         {
             code += "; }";
         }
@@ -2099,7 +2025,6 @@
         return code;
     }
 
-
     /*
         else if (type == typeof(Color))
         {
@@ -2139,18 +2064,16 @@
 
     //////////////////////////////////////
 
-
     private static Dictionary<string, Color> TypeColors = new Dictionary<string, Color>();
 
     public static Color32 GetColorByType(Type type)
     {
         if (type == null)
             return Color.grey;
-         
-        string typeName = RenameTypeVarName(type, true);
 
+        string typeName = RenameTypeVarName(type, true);
 
-        if(Options.RepaintNodes)
+        if (Options.RepaintNodes)
         {
             var predefColor = Options.GetTypeColorByName(typeName);
             if (predefColor != null)
@@ -2164,8 +2087,6 @@
             }
         }
 
-
-
         if (TypeColors.ContainsKey(typeName))
         {
             return TypeColors[typeName];
@@ -2179,15 +2100,13 @@
             return color;
         }
 
-
-
         /*
         if (type == typeof(Type))
             return new Color32(100, 100, 100, 255);
         else if (type == null)// || type.IsGenericType
             return new Color32(255, 255, 255, 255);
         else if (typeName == "bool")
-            return new Color32(200, 0, 0, 255);    
+            return new Color32(200, 0, 0, 255);
         else if (typeName == "int")
             return new Color32(0, 220, 200, 255);
         else if (typeName == "float")
@@ -2208,10 +2127,6 @@
             return new Color32(255, 255, 255, 255);
         */
 
-
-
-
-
         Color rezColor = Color.black;
 
         int tst = Mathf.Abs(typeName.GetHashCode()) * 1;
@@ -2244,13 +2159,12 @@
         return rezColor;
     }
 
-
     private static Dictionary<string, float> OptimiseCalcSize = new Dictionary<string, float>();
 
     private static StringBuilder SB_Optim = new StringBuilder();
+
     public static float CalcStringPixelsX(string StringContent, GUIStyle Style)
     {
-        
         SB_Optim = new StringBuilder(StringContent);
         SB_Optim.Append(Style.name);
 
@@ -2264,10 +2178,9 @@
 
             OptimiseCalcSize.Add(identifier, size);
             return size;
-        } 
+        }
     }
 
-
     public static Vector2 CalcStringPixels(string StringContent, GUIStyle Style)
     {
         return Style.CalcSize(new GUIContent(StringContent));
@@ -2284,7 +2197,6 @@
         CheckCase = 16//Ends with triple space
     }
 
-
     private static SearchStringType TestSearchNameType(string search)
     {
         if (search.EndsWith("   "))
@@ -2309,7 +2221,7 @@
 
     private static bool TestSearchName(string search, string name1, string name2, SearchStringType searchType, bool useDot)
     {
-        if(useDot)
+        if (useDot)
         {
             if (!TestSearchName(search, name1, searchType))
                 if (!TestSearchName(search, name2 + name1, searchType))
@@ -2333,49 +2245,37 @@
 
         bool result = true;
 
-        if ((searchType & SearchStringType.CheckCase) != SearchStringType.CheckCase)
+        if ((searchType & SearchStringType.CheckCase) == 0)
         {
-            testSearchString = testSearchString.ToLower();
-            testSearchName = testSearchName.ToLower();
+            testSearchString = testSearchString.ToUpperInvariant();
+            testSearchName = testSearchName.ToUpperInvariant();
         }
 
-        if ((searchType & SearchStringType.Equal) == SearchStringType.Equal)
+        if ((searchType & SearchStringType.Equal) != 0)
         {
             result = testSearchName == testSearchString;
-
-            //if (name.Contains("GetKey")) Debug.Log("Equal: '" + search + "'  name: '" + testSearchName + "'" + "  result: " + result);
         }
-        else if ((searchType & SearchStringType.Contains) == SearchStringType.Contains)
+        else if ((searchType & SearchStringType.Contains) != 0)
         {
             result = testSearchName.Contains(testSearchString);
-
-           // if (name.Contains("GetKey")) Debug.Log("Contains: '" + search + "'  name: '" + testSearchName + "'" + "  result: " + result);
         }
-        else if ((searchType & SearchStringType.StartWith) == SearchStringType.StartWith)
+        else if ((searchType & SearchStringType.StartWith) != 0)
         {
             result = testSearchName.StartsWith(testSearchString);
-
-         //   if (name.Contains("GetKey")) Debug.Log("StartWith: '" + search + "'  name: '" + testSearchName + "'" + "  result: " + result);
         }
-        else if ((searchType & SearchStringType.EndWith) == SearchStringType.EndWith)
+        else if ((searchType & SearchStringType.EndWith) != 0)
         {
-            result = testSearchName.EndsWith(testSearchString);
-
-            //  if (name.Contains("GetKey")) Debug.Log("EndWith: '" + search + "'  name: '" + testSearchName + "'" + "  result: " + result);
+            result = testSearchName.EndsWith(testSearchString);            
         }
         else
         {
             Debug.Log("Search option is undefined!");
         }
 
-
-
-
         return result;
     }
 
     /*
-    
 
         string lowerSearchStr = search.ToLower();
         string lowerName = name.ToLower();
@@ -2388,7 +2288,6 @@
 
             if (!lowerName.Replace(" ", "").Contains(lowerSearchStr.Replace(" ", "")))
                 result = false;
-
             else if (!lowerSearchStr.Contains(" ") || lowerSearchStr.StartsWith("new "))
             {
                 result = lowerName.Contains(lowerSearchStr);
@@ -2480,7 +2379,6 @@
         return visualOperation.Replace("÷", @"/").Replace("X", @"*").Replace("―", "-");
     }
 
-
     public static bool IsLogicOperation(string visualOperation)
     {
         string operation = GetRealOperation(visualOperation);
@@ -2513,7 +2411,6 @@
         return false;
     }
 
-
     static bool IsNullable(Type type)
     {
         if (!type.IsValueType) return true; // ref-type
@@ -2521,7 +2418,6 @@
         return false; // value-type
     }
 
-   
     public class MathFreeConnType
     {
         private static BindingFlags linkTypesImplicFlags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic;
@@ -2547,23 +2443,23 @@
             sb.Append(to.FullName);
 
             string nameKey = sb.ToString();
-    
-            if(AllowConnectBase.ContainsKey(nameKey))
+
+            if (AllowConnectBase.ContainsKey(nameKey))
             {
                 return AllowConnectBase[nameKey];
             }
 
             bool resultConnect = CanConnect(from, to);
 
-            if(!resultConnect)
+            if (!resultConnect)
             {
-                var methods = from.GetMethods(linkTypesImplicFlags).ToList().FindAll(x => x.Name == "op_Implicit");
+                var methods = from.GetMethods(linkTypesImplicFlags).Where(x => x.Name == "op_Implicit");
 
                 resultConnect = methods.Any(x => x.ReturnType == to);
 
-                if(!resultConnect)
+                if (!resultConnect)
                 {
-                    methods = to.GetMethods(linkTypesImplicFlags).ToList().FindAll(x => x.Name == "op_Implicit");
+                    methods = to.GetMethods(linkTypesImplicFlags).Where(x => x.Name == "op_Implicit");
                     resultConnect = methods.Any(x => x.GetParameters().Any(y => y.ParameterType == from));
                 }
             }
@@ -2573,13 +2469,11 @@
             return resultConnect;
         }
 
-
         public static bool CanConnect(Type from, Type to)
         {
             if (to == typeof(AnyType) && IsDeleg(from))
                 return true;
 
-
             if (to == typeof(ArrayType))
             {
                 if (from.IsGenericTypeDefinition)
@@ -2596,15 +2490,12 @@
                 }
             }
 
-
-
             if (from == typeof(ArrayType) && to == typeof(ArrayType))
                 return false;
 
             if (from == typeof(NotDefined) || to == typeof(NotDefined))
                 return false;
 
-
             if (from != null && to != null)
             {
                 if (to == typeof(Vector))
@@ -2617,8 +2508,6 @@
                     return true;
                 }
 
-
-
                 if (from == typeof(Null))
                 {
                     if (IsNullable(to))
@@ -2635,7 +2524,6 @@
                 }
                 else if (to.IsAssignableFrom(from))
                     return true;
-
             }
             bool isEnumer = IsEnumer(to);
 
@@ -2659,13 +2547,9 @@
                 return true;
             }
 
-          
-
             if (from.Name == to.Name.Replace("&", ""))
                 return true;
 
-       
-
             if (to == typeof(object))
             {
                 return true;
@@ -2688,8 +2572,6 @@
                 return true;
             }
 
-
-
             if (to == typeof(string))
             {
                 return true;
@@ -2710,7 +2592,6 @@
                 return true;
             }
 
-
             if (from == typeof(ValueType) && to == typeof(bool))
             {
                 return true;
@@ -2726,17 +2607,9 @@
                 return true;
             }
 
-
-
-
-
-
-
             return false;
         }
 
-  
-
         public static bool isMathType(Type type)
         {
             if (
@@ -2754,12 +2627,10 @@
             return false;
         }
 
-
         public static string GetConverterCode(Type fromType, Type toType, int convertVariant)
         {
             string code = "";
 
-
             if (fromType == typeof(float) && toType == typeof(int))
             {
                 //"Round", "Floor", "Ceil"
@@ -2779,7 +2650,7 @@
 
             if (toType == typeof(string))
             {
-                if(fromType == typeof(string) || fromType == typeof(System.Object) || fromType == typeof(Null))
+                if (fromType == typeof(string) || fromType == typeof(System.Object) || fromType == typeof(Null))
                 {
                     code = "&PIN&";
                     //if(Options.b_ShowDebug)Debug.Log("NotConvert: fromType: " + fromType + " toType: " + toType);
@@ -2790,8 +2661,7 @@
                     //if(Options.b_ShowDebug)Debug.Log("Convert: fromType: " + fromType + " toType: " + toType);
                 }
                 return code;
-            }     
-
+            }
             else if (fromType == typeof(float) && toType == typeof(int))
                 code = "(int)(&PIN&)";
             else if (fromType == typeof(float) && toType == typeof(short))
@@ -2804,7 +2674,6 @@
                 code = "(uint)(&PIN&)";
             else if (fromType == typeof(float) && toType == typeof(ulong))
                 code = "(ulong)(&PIN&)";
-
             else if (fromType == typeof(double) && toType == typeof(float))
                 code = "System.Convert.ToSingle(&PIN&)";
             else if (fromType == typeof(double) && toType == typeof(short))
@@ -2819,78 +2688,53 @@
                 code = "(uint)(&PIN&)";
             else if (fromType == typeof(double) && toType == typeof(ulong))
                 code = "(ulong)(&PIN&)";
-
             else if (fromType == typeof(int) && toType == typeof(short))
                 code = "System.Convert.ToInt16(&PIN&)";
-
             else if (fromType == typeof(long) && toType == typeof(short))
                 code = "(short)(&PIN&)";
-
             else if (fromType == typeof(ushort) && toType == typeof(short))
                 code = "(short)(&PIN&)";
-
             else if (fromType == typeof(short) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
-
             else if (fromType == typeof(uint) && toType == typeof(short))
                 code = "(short)(&PIN&)";
             else if (fromType == typeof(short) && toType == typeof(uint))
                 code = "(uint)(&PIN&)";
-
             else if (fromType == typeof(ulong) && toType == typeof(short))
                 code = "(short)(&PIN&)";
             else if (fromType == typeof(short) && toType == typeof(ulong))
                 code = "(ulong)(&PIN&)";
-
-
             else if (fromType == typeof(long) && toType == typeof(int))
                 code = "(int)(&PIN&)";
-
             else if (fromType == typeof(long) && toType == typeof(int))
                 code = "(int)(&PIN&)";
-
             else if (fromType == typeof(int) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
-
-
             else if (fromType == typeof(uint) && toType == typeof(int))
                 code = "(int)(&PIN&)";
             else if (fromType == typeof(int) && toType == typeof(uint))
                 code = "(uint)(&PIN&)";
-
             else if (fromType == typeof(ulong) && toType == typeof(int))
                 code = "(int)(&PIN&)";
             else if (fromType == typeof(int) && toType == typeof(ulong))
                 code = "(ulong)(&PIN&)";
-
-
             else if (fromType == typeof(long) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
-
             else if (fromType == typeof(long) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
             else if (fromType == typeof(long) && toType == typeof(uint))
                 code = "(uint)(&PIN&)";
-
-
             else if (fromType == typeof(ulong) && toType == typeof(long))
                 code = "(long)(&PIN&)";
             else if (fromType == typeof(long) && toType == typeof(ulong))
                 code = "(ulong)(&PIN&)";
-
-
             else if (fromType == typeof(uint) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
-
             else if (fromType == typeof(ulong) && toType == typeof(ushort))
                 code = "(ushort)(&PIN&)";
-
-
             else if (fromType == typeof(ulong) && toType == typeof(uint))
                 code = "System.Convert.ToUInt32(&PIN&)";
 
-
-
             return code;
         }
     }
@@ -2907,24 +2751,67 @@
         return to.GetInterface("IEnumerator") != null || to.Name == "IEnumerator";
     }
 
-    private class UndefinedType { private UndefinedType() { } }
-    private class AnyType { private AnyType() { } }
+    private class UndefinedType {
+        private UndefinedType()
+        {
+        }
+    }
+
+    private class AnyType {
+        private AnyType()
+        {
+        }
+    }
+
     private class ErrorTypePin { }
 
     private class ArrayType { }
+
     private class NotDefined { }
 
     private class Null { }
 
-    public class T { private T() { } }
+    public class T {
+        private T()
+        {
+        }
+    }
+
+    public class gF {
+        public gF()
+        {
+        }
+    }
+
+    public class gK {
+        public gK()
+        {
+        }
+    }
+
+    public class gV {
+        public gV()
+        {
+        }
+    }
+
+    public class gG {
+        public gG()
+        {
+        }
+    }
 
+    public class gM {
+        public gM()
+        {
+        }
+    }
 
-    public class gF { public gF() { } }
-    public class gK { public gK() { } }
-    public class gV { public gV() { } }
-    public class gG { public gG() { } }
-    public class gM { public gM() { } }
-    public class gT { public gT() { } }
+    public class gT {
+        public gT()
+        {
+        }
+    }
 
     public static bool IsDefaultGenericType(Type type)
     {
@@ -2932,30 +2819,4 @@
     }
 
     public static Type[] GenericClassTypes = new Type[] { typeof(gK), typeof(gV), typeof(gG), typeof(gF), typeof(gM), typeof(gT) };
-
-
-    /*
-// Convert an object to a byte array
-private byte[] ObjectToByteArray(object obj)
-{
-    if (obj == null)
-        return null;
-    BinaryFormatter bf = new BinaryFormatter();
-    MemoryStream ms = new MemoryStream();
-    bf.Serialize(ms, obj);
-    return ms.ToArray();
 }
-
-// Convert a byte array to an Object
-private T ByteArrayToObject<T>(byte[] arrBytes)
-{
-    MemoryStream memStream = new MemoryStream();
-    BinaryFormatter binForm = new BinaryFormatter();
-    memStream.Write(arrBytes, 0, arrBytes.Length);
-    memStream.Seek(0, SeekOrigin.Begin);
-    T obj = (T)binForm.Deserialize(memStream);
-    return obj;
-}
-*/
-
-}
\ No newline at end of file
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_VarsListWindow.cs Editor/m_VarsListWindow.cs
--- .Editor/m_VarsListWindow.cs	2018-06-30 08:59:18.835700100 +0700
+++ Editor/m_VarsListWindow.cs	2018-06-30 09:02:03.898532000 +0700
@@ -1,21 +1,17 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System;
 using System.Linq;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
-
-
     public class VarsListWindow
     {
         private Vector2 WindowPos;
 
         public bool b_Active = false;
 
-
         bool b_SearchStringShow = true;
 
         Vector2 v_VarsScroll = Vector2.zero;
@@ -36,6 +32,7 @@
         }
 
         private static TryCatch_InPin_Config TC_Cfg;
+
         public void Show(Vector2 WinPos, object selVar, Type selType)
         {
             TC_Cfg = null;
@@ -45,7 +42,7 @@
                 TC_Cfg = selVar as TryCatch_InPin_Config;
                 FilterByGroup = TC_Cfg.filterType;
             }
-         
+
             SelVar = selVar;
             SelType = selType;
             WindowPos = WinPos;
@@ -64,19 +61,23 @@
             else
                 WindowPos.y -= 3;
 
-            VarItemsList_GenericClass = new HashSet<VarListItem>();
+            VarItemsList_GenericClass = new List<VarListItem>();
 
             var curCl = CurClass;
             if (curCl != null)
             {
                 if (curCl.GenericClassArguments.Count > 0)
                 {
-                    VarListItem newItem = new VarListItem();
-                    newItem.GroupName = "-";
+                    VarListItem newItem = new VarListItem
+                    {
+                        GroupName = "-"
+                    };
                     foreach (var genArg in curCl.GenericClassArguments)
                     {
-                        TypeData newData = new TypeData();
-                        newData.type = genArg.PType;
+                        TypeData newData = new TypeData
+                        {
+                            type = genArg.PType
+                        };
                         newItem.ListItems.Add(newData);
                     }
 
@@ -84,18 +85,22 @@
                 }
             }
 
-            if(CurDrawable is ScriptFunction)
+            if (CurDrawable is ScriptFunction)
             {
                 var curFunc = CurDrawable as ScriptFunction;
 
                 if (curFunc.GenericFunctionArguments.Count > 0)
                 {
-                    VarListItem newItem = new VarListItem();
-                    newItem.GroupName = "-";
+                    VarListItem newItem = new VarListItem
+                    {
+                        GroupName = "-"
+                    };
                     foreach (var genArg in curFunc.GenericFunctionArguments)
                     {
-                        TypeData newData = new TypeData();
-                        newData.type = genArg.PType;
+                        TypeData newData = new TypeData
+                        {
+                            type = genArg.PType
+                        };
                         newItem.ListItems.Add(newData);
                     }
 
@@ -103,17 +108,14 @@
                 }
             }
 
-
             FilterItems();
         }
 
-
         public void Draw()
         {
             if (b_Active)
             {
-                DrawRect = CreateRect(WindowPos.x - 3, WindowPos.y, Width, Height);
-
+                DrawRect = new Rect(WindowPos.x - 3, WindowPos.y, Width, Height);
 
                 if (_LMB_Up)
                 {
@@ -136,7 +138,6 @@
                         RMB_Up_Deleg = delegate { };
                 }
 
-
                 if (SelVar != null)
                 {
                     GUI.Window(5, DrawRect, VarTypeListFunction, "", Res.EmptyStyle);
@@ -161,20 +162,20 @@
         {
             //GUI.BringWindowToFront(windowID);
 
-            Graphics.DrawTexture(CreateRect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
-
+            DrawTexture(new Rect(Vector2.zero, DrawRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
             if (Event.current.type == EventType.MouseDown && Event.current.button == 0 && Event.current.isMouse)
             {
                 b_SearchStringShow = true;
             }
-            if (Event.current.type == EventType.MouseDown && Event.current.button == 0 && Event.current.isMouse && CreateRect(5, 5, 290, 20).Contains(Event.current.mousePosition))
+            if (Event.current.type == EventType.MouseDown && Event.current.button == 0 && Event.current.isMouse && new Rect(5, 5, 290, 20).Contains(Event.current.mousePosition))
             {
                 b_SearchStringShow = false;
             }
 
+
             GUI.SetNextControlName("VarTypeListSearchTextField");
-            string t_s_NewString = GUI.TextField(CreateRect(5, 5, 290, 20), s_SearchString, Res.SearchStringLine);
+            string t_s_NewString = GUI.TextField(new Rect(5, 5, 290, 20), s_SearchString, Res.SearchStringLine);
 
             if (s_SearchString.Length == 0 && t_s_NewString.Length != 0)
             {
@@ -192,25 +193,26 @@
                 FilterItems();
             }
 
-          
-
+            if (ev.keyCode == KeyCode.Return)
+            {
+                var Item = VarItemsList_Filtered.FirstOrDefault(x => FilterByGroup.Length == 0 || FilterByGroup.Contains(x.GroupName));
+                if (Item != null && Item.ListItems.Count > 0)
+                    FeedbackNewType(Item.ListItems[0].type);
+            }
 
             if (b_SearchStringShow && s_SearchString.Length == 0)
-                GUI.Label(CreateRect(10, 5, 50, 20), "Search");
-
+                GUI.Label(new Rect(10, 5, 50, 20), "Search");
 
-          
-
-            GUI.Label(CreateRect(0, 25, 200, 20), "      Available Types:", Res.Label);
+            GUI.Label(new Rect(0, 25, 200, 20), "      Available Types:", Res.Label);
 
             if (ProcessingTypes)
             {
-                ProgressBar.DrawWithLabel(CreateRect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
+                ProgressBar.DrawWithLabel(new Rect(20, Height / 2, Width - 40, 20), TypeDataBase.LoadProgress);
             }
 
-            Rect scrollRect = CreateRect(5, 45, Width - 10, Height - 45);
+            Rect scrollRect = new Rect(5, 45, Width - 10, Height - 45);
 
-            v_VarsScroll = GUI.BeginScrollView(scrollRect, v_VarsScroll, CreateRect(0, 0, 100, ItemsDrawPos));
+            v_VarsScroll = GUI.BeginScrollView(scrollRect, v_VarsScroll, new Rect(0, 0, 100, ItemsDrawPos));
 
             RealScrollRect = scrollRect;
             RealScrollRect.y = v_VarsScroll.y;
@@ -220,7 +222,7 @@
 
             if (SelVar is ScriptClass)
             {
-                Rect drawRect = CreateRect(0, ItemsDrawPos, Width - 0 - 30, 14);
+                Rect drawRect = new Rect(0, ItemsDrawPos, Width - 0 - 30, 14);
                 GUI.Box(drawRect, "   " + RenameTypeVarName(typeof(None), true), Res.ListButton);
                 if (_LMB_Up && drawRect.Contains(Event.current.mousePosition))
                 {
@@ -236,9 +238,12 @@
             {
                 LItem.DrawListItem();
             }
+
             ItemsDrawPos += 5;
-            foreach (VarListItem LItem in VarItemsList_Filtered.ToList())
+
+            for (int i = 0; i < VarItemsList_Filtered.Count; i++)
             {
+                VarListItem LItem = VarItemsList_Filtered[i];
                 if (FilterByGroup.Length > 0)
                 {
                     if (FilterByGroup.Contains(LItem.GroupName))
@@ -253,10 +258,8 @@
                 {
                     LItem.DrawListItem();
                 }
-              
             }
 
-
             ItemsDrawPos += 5;
 
             b_CloseOnceAllGroups = false;
@@ -271,37 +274,34 @@
             }
         }
 
-
-
         [Serializable()]
         public class VarListItem
         {
             public string GroupName = "";
             public bool b_GroupListOpen = false;
-            public HashSet<TypeData> ListItems = new HashSet<TypeData>();
+            public List<TypeData> ListItems = new List<TypeData>();
             public bool b_GroupSpawned = true;
 
             void SpawnGroup()
             {
                 b_GroupSpawned = true;
 
-                Rect drawRect = CreateRect(12, 18 + ItemsDrawPos, 370, 14);
+                Rect drawRect = new Rect(12, 18 + ItemsDrawPos, 370, 14);
 
                 if (CurScript.VarsWindow.RealScrollRect.Contains(drawRect.position))
                 {
-                    if (GUI.Button(CreateRect(0, ItemsDrawPos, 370, 14), GroupName, Res.ListButton))
+                    if (GUI.Button(new Rect(0, ItemsDrawPos, 370, 14), GroupName, Res.ListButton))
                     {
                         b_GroupListOpen = !b_GroupListOpen;
                     }
 
-                    b_GroupListOpen = GUI.Toggle(CreateRect(0, ItemsDrawPos, 8, 8), b_GroupListOpen, "", Res.ListGroupToggleButton);
+                    b_GroupListOpen = GUI.Toggle(new Rect(0, ItemsDrawPos, 8, 8), b_GroupListOpen, "", Res.ListGroupToggleButton);
                 }
                 ItemsDrawPos += 15;
             }
 
             public void DrawListItem()
             {
-
                 if (b_CloseOnceAllGroups)
                 {
                     b_GroupListOpen = false;
@@ -325,15 +325,10 @@
                 }
                 */
 
-
-
-
                 b_GroupSpawned = false;
 
-
                 foreach (TypeData Item in ListItems)
                 {
-                    var LItem = Item;//for delegate
                     if (!b_GroupSpawned && GroupName != "-")
                     {
                         SpawnGroup();
@@ -347,31 +342,28 @@
                             t_GroupOffset = 10;
                         }
 
-                        Rect drawRect = CreateRect(t_GroupOffset, ItemsDrawPos, Width - t_GroupOffset - 30, 14);
+                        Rect drawRect = new Rect(t_GroupOffset, ItemsDrawPos, Width - t_GroupOffset - 30, 14);
 
                         if (CurScript.VarsWindow.RealScrollRect.Contains(drawRect.position))
                         {
-
                             if (_LMB_Down && drawRect.Contains(Event.current.mousePosition))
                             {
                                 LMB_Down_Deleg = delegate { };
                             }
 
-
-
-                            GUI.Box(drawRect, "   " + RenameTypeVarName(LItem.type, true), Res.ListButton);
+                            GUI.Box(drawRect, "   " + RenameTypeVarName(Item.type, true), Res.ListButton);
 
                             if (_LMB_Up && drawRect.Contains(Event.current.mousePosition))
                             {
                                 //LMB_Up_Deleg = delegate
                                 {
-                                    FeedbackNewType(LItem.type);
+                                    FeedbackNewType(Item.type);
                                 };
                             }
 
-                            GUI.color = GetColorByType(LItem.type);
+                            GUI.color = GetColorByType(Item.type);
 
-                            var iconRect = CreateRect(5 + t_GroupOffset, ItemsDrawPos, 13, 13);
+                            var iconRect = new Rect(5 + t_GroupOffset, ItemsDrawPos, 13, 13);
 
                             if (SelType != null && SelType.IsArray)
                                 GUI.DrawTexture(iconRect, Res.VarIconArray);
@@ -379,20 +371,16 @@
                                 GUI.DrawTexture(iconRect, Res.VarIcon);
                             GUI.color = Color.white;
 
-
                             if (iconRect.Contains(Event.current.mousePosition))
                             {
-                                GUIToolTipe = RenameType_ForCompilation(LItem.type);
+                                GUIToolTipe = RenameType_ForCompilation(Item.type);
                             }
                         }
 
                         ItemsDrawPos += 15;
                     }
-
                 }
             }
-
-        
         }
 
         private static void FeedbackNewType(Type LItem)
@@ -466,14 +454,11 @@
             }
         }
 
-
         private void FilterItems()
         {
             if (EditorApplication.isCompiling || b_ThreadAbort)
                 return;
 
-        
-
             if (b_IsFiltering)
             {
                 b_Abort_RepeatFilter = true;
@@ -481,10 +466,12 @@
             else
             {
                 b_IsFiltering = true;
-                m_FilterThread = new System.Threading.Thread(FilterItemsAsync);
-                m_FilterThread.Priority = Options.ThreadSearchPriority;
+                m_FilterThread = new System.Threading.Thread(FilterItemsAsync)
+                {
+                    Priority = Options.ThreadSearchPriority
+                };
                 m_FilterThread.Start();
-            }             
+            }
         }
 
         public void AbortThread()
@@ -516,15 +503,12 @@
                     m_FilterThread = null;
                 }
 
-
-
                 var searchType = TestSearchNameType(s_SearchString);
                 string searchL = s_SearchString.Replace(" ", "");
 
-
                 if (s_SearchString.Length != 0)
                 {
-                    VarItemsList_Filtered = new HashSet<VarListItem>();
+                    VarItemsList_Filtered = new List<VarListItem>();
 
                     foreach (var groupItem in VarItemsList_Draw)
                     {
@@ -557,7 +541,6 @@
                     VarItemsList_Filtered = VarItemsList_Draw;
                 }
 
-
                 if (b_Abort_RepeatFilter && !b_ThreadAbort)
                 {
                     b_Abort_RepeatFilter = false;
@@ -576,11 +559,11 @@
             m_FilterThread = null;
         }
 
-        private HashSet<Type> allTypeList = null;
+        private List<Type> allTypeList = null;
 
-         
-        public HashSet<Type> classesTypeList = null;
-        public HashSet<Type> ClassesTypes
+        public List<Type> classesTypeList = null;
+
+        public List<Type> ClassesTypes
         {
             get
             {
@@ -595,9 +578,9 @@
             }
         }
 
+        public List<Type> _interfacesTypeList = null;
 
-        public HashSet<Type> _interfacesTypeList = null;
-        public HashSet<Type> InterfacesTypeList
+        public List<Type> InterfacesTypeList
         {
             get
             {
@@ -611,7 +594,8 @@
                 return _interfacesTypeList;
             }
         }
-        public HashSet<AttributeUnit> AtributesList
+
+        public List<AttributeUnit> AtributesList
         {
             get
             {
@@ -639,25 +623,28 @@
 
         public System.Threading.Thread m_Thread = null;
 
-        public HashSet<VarListItem> VarItemsList_Init = new HashSet<VarListItem>();
-        public HashSet<VarListItem> VarItemsList_Draw = new HashSet<VarListItem>();
-        public HashSet<VarListItem> VarItemsList_Filtered = new HashSet<VarListItem>();
+        public List<VarListItem> VarItemsList_Init = new List<VarListItem>();
+        public List<VarListItem> VarItemsList_Draw = new List<VarListItem>();
+        public List<VarListItem> VarItemsList_Filtered = new List<VarListItem>();
 
-        public HashSet<VarListItem> VarItemsList_GenericClass = new HashSet<VarListItem>();
+        public List<VarListItem> VarItemsList_GenericClass = new List<VarListItem>();
 
         private bool ProcessingTypes = false;
+
         public void InitVarListItems()
         {
-            if(ProcessingTypes || b_ThreadAbort)
+            if (ProcessingTypes || b_ThreadAbort)
             {
                 return;
             }
 
-            m_Thread = new System.Threading.Thread(InitBaseAsync);
-            m_Thread.Priority = Options.ThreadSearchPriority;
+            m_Thread = new System.Threading.Thread(InitBaseAsync)
+            {
+                Priority = Options.ThreadSearchPriority
+            };
             m_Thread.Start();
         }
-       
+
         public void InitBaseAsync()
         {
             try
@@ -665,29 +652,30 @@
                 ProcessingTypes = true;
                 LoadingProgress = 0;
 
-                VarItemsList_Init = new HashSet<VarListItem>();
-                allTypeList = new HashSet<Type>();
-                classesTypeList = new HashSet<Type>();
-                _interfacesTypeList = new HashSet<Type>();
-                _atributesList = new HashSet<AttributeUnit>();
+                VarItemsList_Init = new List<VarListItem>();
+                allTypeList = new List<Type>();
+                classesTypeList = new List<Type>();
+                _interfacesTypeList = new List<Type>();
+                _atributesList = new List<AttributeUnit>();
 
                 //Debug.Log("==start wait");
                 var asmbList = GetUsedAssembList_CurScript();
                 while (!TypeDataBase.UpdateTypeBase(asmbList)) { }
                 //Debug.Log("==end wait");
 
+                List<TypeBase_NameSpaceceTypes> NSS = TypeDataBase.Namespaces;
 
-                HashSet<TypeBase_NameSpaceceTypes> NSS = TypeDataBase.Namespaces;
-
-                VarListItem baseTypes = new VarListItem();
-                baseTypes.GroupName = "-";
+                VarListItem baseTypes = new VarListItem
+                {
+                    GroupName = "-"
+                };
 
                 VarItemsList_Init.Add(baseTypes);
 
                 if (NSS == null)
                 {
                     Debug.Log("NSS is null");
-                    NSS = new HashSet<TypeBase_NameSpaceceTypes>();
+                    NSS = new List<TypeBase_NameSpaceceTypes>();
                 }
 
                 foreach (TypeBase_NameSpaceceTypes NS in NSS)
@@ -708,7 +696,6 @@
                     if (b_ThreadAbort) break;
                 }
 
-
                 VarItemsList_Draw = VarItemsList_Init;
             }
             catch (Exception e)
@@ -716,11 +703,10 @@
                 Debug.Log("Error in the InitBaseAsync thread. Exception: " + e);
             }
 
-
             ProcessingTypes = false;
             LoadingProgress = 1;
 
-            if(m_Thread != null)
+            if (m_Thread != null)
                 m_Thread.Abort();
             m_Thread = null;
         }
@@ -729,14 +715,14 @@
 
         ////////////////////////////////////
 
-        private HashSet<AttributeUnit> _atributesList = null;
+        private List<AttributeUnit> _atributesList = null;
 
-        public HashSet<Type> GetAttributeListForScriptObj(AttributeTargets usage)
+        public List<Type> GetAttributeListForScriptObj(AttributeTargets usage)
         {
-            HashSet<Type> result = new HashSet<Type>();
-            foreach(AttributeUnit attrib in AtributesList)
+            List<Type> result = new List<Type>();
+            foreach (AttributeUnit attrib in AtributesList)
             {
-                if(((int)attrib.ValidOn & (int)usage) == (int)usage && !attrib.attribType.IsAbstract)
+                if (((int)attrib.ValidOn & (int)usage) == (int)usage && !attrib.attribType.IsAbstract)
                 {
                     result.Add(attrib.attribType);
                 }
@@ -751,11 +737,12 @@
             public AttributeTargets ValidOn = AttributeTargets.All;
         }
 
-
         private void ProcessAttribute(Type attribType)
         {
-            AttributeUnit atribAdd = new AttributeUnit();
-            atribAdd.attribType = attribType;
+            AttributeUnit atribAdd = new AttributeUnit
+            {
+                attribType = attribType
+            };
 
             object[] attribs = attribType.GetCustomAttributes(typeof(AttributeUsageAttribute), true);
 
@@ -763,17 +750,16 @@
             {
                 AttributeUsageAttribute usage = attribs[0] as AttributeUsageAttribute;
                 atribAdd.ValidOn = usage.ValidOn;
-            } 
-             
-            AtributesList.Add(atribAdd); 
-        }   
-         
+            }
+
+            AtributesList.Add(atribAdd);
+        }
 
         ////////////////////////////////////
 
         private bool IsAttribute(Type attrTest)
         {
-            while(attrTest != null)
+            while (attrTest != null)
             {
                 if (attrTest == typeof(Attribute))
                     return true;
@@ -788,7 +774,7 @@
         {
             return
                 type == typeof(bool) ||
-                type == typeof(int) ||       
+                type == typeof(int) ||
                 type == typeof(float) ||
                 type == typeof(string) ||
                 type == typeof(Transform) ||
@@ -804,14 +790,14 @@
         public void TryAddNewType(Type type)
         {
             string GroupName = "";
-            if(IsPredefinedClass(type))
+            if (IsPredefinedClass(type))
             {
                 GroupName = "-";
             }
             else if (type.IsClass)
             {
                 classesTypeList.Add(type);
- 
+
                 if (IsAttribute(type))
                 {
                     GroupName = "Attribute";
@@ -860,7 +846,7 @@
             }
 
             TypeData dtAdd = new TypeData();
-             
+
             if (dtAdd.Init(type))
             {
                 if (!allTypeList.Contains(type))
@@ -873,15 +859,17 @@
                     {
                         if (found.GroupName == GroupName)
                         {
-                            foundList = found;            
+                            foundList = found;
                             break;
                         }
                     }
 
                     if (foundList == null)
                     {
-                        foundList = new VarListItem();
-                        foundList.GroupName = GroupName;
+                        foundList = new VarListItem
+                        {
+                            GroupName = GroupName
+                        };
                         VarItemsList_Init.Add(foundList);
                     }
 
@@ -889,12 +877,12 @@
                     allTypeList.Add(type);
                 }
             }
-
         }
 
         public class TypeData
         {
             public Type type;
+
             public bool Init(Type type)
             {
                 this.type = type;
@@ -919,4 +907,4 @@
             }
         }
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/m_Zoom.cs Editor/m_Zoom.cs
--- .Editor/m_Zoom.cs	2018-06-30 08:59:18.837700700 +0700
+++ Editor/m_Zoom.cs	2018-06-30 09:02:03.900533200 +0700
@@ -1,9 +1,8 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using System;
 using System.Reflection;
-
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -95,6 +94,7 @@
 
             RestoreClips();
         }
+
         public static void RestoreClips()
         {
             if (rectStackGroups.Count == 0)
@@ -116,7 +116,7 @@
         {
             List<Rect> rectStackGroup = new List<Rect>();
             Rect topMostClip = getTopRect;
-            while (topMostClip != CreateRect(-10000, -10000, 40000, 40000))
+            while (topMostClip != new Rect(-10000, -10000, 40000, 40000))
             {
                 rectStackGroup.Add(topMostClip);
                 GUI.EndClip();
@@ -126,6 +126,7 @@
             rectStackGroups.Add(rectStackGroup);
             currentRectStack.AddRange(rectStackGroup);
         }
+
         public static Rect InnerToScreenRect(Rect innerRect)
         {
             if (rectStackGroups.Count == 0)
@@ -145,6 +146,5 @@
             rect.size = Vector2.Scale(rect.size, scale);
             return rect;
         }
-
     }
-}
\ No newline at end of file
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/Nottorus.cs Editor/Nottorus.cs
--- .Editor/Nottorus.cs	2018-06-30 08:59:18.439597600 +0700
+++ Editor/Nottorus.cs	2018-06-30 09:02:03.805508800 +0700
@@ -1,23 +1,25 @@
 ﻿using UnityEditor;
-using System.Collections.Generic;
 using UnityEngine;
 
-using System.IO;
-using System;
-using System.Reflection;
-using System.Linq;using System.Xml.Serialization;
-
 public partial class Nottorus : EditorWindow
 {
     public static Nottorus BPE;
-    [MenuItem("Tools/Nottorus Script Editor")]
+
+    [MenuItem("Tools/Nottorus/Script Editor")]
     public static void ShowWindow()
     {
-        BPE = (Nottorus)GetWindow(typeof(Nottorus));
+        BPE = GetWindow<Nottorus>();
         BPE.autoRepaintOnSceneChange = true;
-
         BPE.minSize = new Vector2(800, 600);
     }
 
-
-}
\ No newline at end of file
+    [MenuItem("Tools/Nottorus/Flush Cache")]
+    public static void FlushCache()
+    {
+        if (BPE)
+        {
+            BPE.Close();
+        }
+        TypeDataBase = new TypeBase();
+    }
+}
diff -x '*.meta' -ur --strip-trailing-cr .Editor/NSM_Editor.cs Editor/NSM_Editor.cs
--- .Editor/NSM_Editor.cs	2018-06-30 08:59:18.437596300 +0700
+++ Editor/NSM_Editor.cs	2018-06-30 09:02:03.804507500 +0700
@@ -1,23 +1,21 @@
-﻿using UnityEngine;
-using System;
-using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Xml.Serialization;
 using System.Text;
+using System.Xml.Serialization;
+using UnityEditor;
+using UnityEngine;
 
 public class NSM_Editor : EditorWindow
 {
     public static NSM_Editor NSM;
 
-    
     //[MenuItem("Tools/Nottorus/State Machine Editor")]
     public static void ShowWindow()
     {
-        NSM = (NSM_Editor) GetWindow(typeof (NSM_Editor));
+        NSM = (NSM_Editor)GetWindow(typeof(NSM_Editor));
         NSM.minSize = new Vector2(500, 300);
     }
-    
 
     private static Nottorus.ResourcesC Res;
 
@@ -34,15 +32,16 @@
 
     private static bool _LMB_Down = false;
     private static bool _LMB_Up = false;
-    private static bool _RMB_Up = false; 
+    private static bool _RMB_Up = false;
     private static bool _RMB_Down = false;
     private static bool _RMB_Drag = false;
 
     public static Void_Deleg LMB_Down_Deleg = delegate { };
     public static Void_Deleg RMB_Up_Deleg = delegate { };
+
     public delegate void Void_Deleg();
-    private static Vector2 GlobalMousePos = Vector2.zero;
 
+    private static Vector2 GlobalMousePos = Vector2.zero;
 
     private static List<object> DeletingObjects = new List<object>();
     private static List<object> PrepareDeleteObjects = new List<object>();
@@ -55,7 +54,7 @@
 
     private static bool StartLinking = false;
     private static SM_Node LinkingNode { get; set; }
-  
+
     private Vector2 DragDist = Vector2.zero;
 
     private static List<object> SelectedObjects = new List<object>();
@@ -63,8 +62,6 @@
     public const string SM_InitName = "_InitialiseStateMachine";
     public const string SM_UpdateName = "UpdateStateMachine";
 
-
-
     public class NSM_StateMachine_SaveData
     {
         public List<SM_Node> States = new List<SM_Node>();
@@ -114,7 +111,6 @@
 
         private StringBuilder CodeSB;
 
-
         public string GetCode()
         {
             CodeSB = new StringBuilder();
@@ -132,7 +128,7 @@
             CodeSB.Append("private void " + SM_InitName + "()");
             CodeSB.Append("\r\n" + Nottorus.cg_GetSpacing() + "{");
             Nottorus._cg_Spacing++;
-        
+
             string statesCode = "";
             string transitionsCode = "";
             string eventsLinkCode = "";
@@ -152,12 +148,11 @@
 
                 eventsLinkCode += node.LinkEventsCode();
                 conditionsCode += node.GetConditionsCode();
-                
-                if(Nottorus.CurScript.b_DebugMode)
+
+                if (Nottorus.CurScript.b_DebugMode)
                     debugCode += node.GetDebugCode();
             }
 
-
             CodeSB.Append("\r\n" + Nottorus.cg_GetSpacing() + "//// States:");
             CodeSB.Append(statesCode);
 
@@ -180,12 +175,12 @@
 
             CodeSB.Append("\r\n");
 
-           var entryState = States.Find(x => x.NodeType == SM_NodeType.Entry);
+            var entryState = States.Find(x => x.NodeType == SM_NodeType.Entry);
 
-            if(entryState != null)
+            if (entryState != null)
                 CodeSB.Append("\r\n" + Nottorus.cg_GetSpacing() + SM_Name + ".InitStateMachine(" + entryState.StateCodeName + ");");
-            else 
-                if(Nottorus.Options.b_ShowDebug)Debug.Log("Can't find entry node for state machine");
+            else
+                if (Nottorus.Options.b_ShowDebug) Debug.Log("Can't find entry node for state machine");
 
             Nottorus._cg_Spacing--;
             CodeSB.Append("\r\n" + Nottorus.cg_GetSpacing() + "}");
@@ -200,8 +195,8 @@
 
         public void HighLiteTransition(int nodeId, int transitionId, float delta, int eventId)
         {
-          //  if (!Nottorus.CurScript.b_DebugMode)
-          //      return;
+            //  if (!Nottorus.CurScript.b_DebugMode)
+            //      return;
 
             var node = FindNodeFromId(nodeId);
 
@@ -211,14 +206,13 @@
 
                 if (transition != null)
                 {
-
                     if (eventId == 4)
                         transition.EntryHighlite = delta;
                     else if (eventId == 5)
                         transition.ExitHighlite = delta;
                     else if (eventId == 6)
                         transition.TransitionHighlite = delta;
-                }      
+                }
             }
         }
 
@@ -241,7 +235,6 @@
         }
     }
 
-
     public static NSM_StateMachine_SaveData SMachineSaveData
     {
         get { return Nottorus.CurClass.SMachineSaveData; }
@@ -281,6 +274,7 @@
         ToolbarRect = new Rect(0, ControlbarHeight - 3, ToolbarWidth, NSM.position.height - ControlbarHeight + 3);
         EditGraphRect = new Rect(ToolbarWidth - 3, 0, NSM.position.width - ToolbarWidth + 3, NSM.position.height);
     }
+
     void OnGUI()
     {
         if (Nottorus.BPE == null)
@@ -293,7 +287,6 @@
             Res = Nottorus.Res;
         }
 
-
         if (Nottorus.CurClass == null)
         {
             GUI.Label(new Rect(20, 20, 200, 20), "No one class selected in Nottorus Script Editor", Res.Label);
@@ -315,18 +308,16 @@
 
         if (Global_MouseInEditGraph)
             ProcessButtons();
-        
+
         var resizeToolbarRect = EditGraphRect;
         resizeToolbarRect.x -= 5;
         resizeToolbarRect.width = 10;
 
-
         if (Event.current.isMouse && Event.current.button == 0 && Event.current.type == EventType.MouseDown)
         {
             GUI.FocusControl("wtf");
         }
 
-
         if (resizeToolbarRect.Contains(Event.current.mousePosition))
         {
             EditorGUIUtility.AddCursorRect(resizeToolbarRect, MouseCursor.ResizeHorizontal);
@@ -337,8 +328,6 @@
                 ResizingToolbar = true;
             }
         }
-     
-
 
         if (Event.current.isMouse && Event.current.button == 0 && Event.current.type == EventType.MouseUp)
         {
@@ -347,7 +336,7 @@
 
         if (ResizingToolbar)
         {
-            if (Event.current.type == EventType.mouseDrag)
+            if (Event.current.type == EventType.MouseDrag)
             {
                 SMachineSaveData.ToolbarWidth += Event.current.delta.x;
             }
@@ -366,17 +355,14 @@
         Draw_GUIToolTipe();
         EndWindows();
 
-
         Repaint();
 
-
         LMB_Down_Deleg.Invoke();
         LMB_Down_Deleg = delegate { };
 
         RMB_Up_Deleg.Invoke();
         RMB_Up_Deleg = delegate { };
 
-
         if (StartLinking)
         {
             if (_LMB_Down)
@@ -390,8 +376,6 @@
             }
         }
 
-     
-
         DeleteObjects();
 
         _LMB_Down = false;
@@ -400,10 +384,11 @@
         _LMB_Up = false;
     }
 
-
     ////////////////////////////////////////////////////////
     private Rect ToolTipeWindowRect = new Rect();
+
     public static string GUIToolTipe = "";
+
     private void Draw_GUIToolTipe()
     {
         Vector2 mousePos = Event.current.mousePosition;
@@ -424,7 +409,6 @@
         //GUI.BringWindowToFront(windowID);
         //GUI.FocusWindow(windowID);
 
-
         GUI.color = Color.white;
 
         ToolTipeWindowRect.position = Vector2.zero;
@@ -433,10 +417,9 @@
         ToolTipeWindowRect.x += 3;
         ToolTipeWindowRect.y += 10;
         GUI.Label(ToolTipeWindowRect, GUIToolTipe, Res.NodePinLabel);
-    
     }
-    /////////////////////////////////////////////////////////////////
 
+    /////////////////////////////////////////////////////////////////
 
     public static void ShowNode(SM_Node node)
     {
@@ -516,7 +499,6 @@
                         Nottorus.CurClass.CurrentDrawable.DrawType = Nottorus.DrawableType.Undefined;
                     }
 
-
                     transition.OwnerNode.DeleteTransition(transition);
                 }
             }
@@ -527,12 +509,8 @@
 
         if (Event.current.isKey && Event.current.keyCode == KeyCode.Delete && Event.current.type == EventType.KeyDown)
         {
-            PrepareDeleteObjects = SelectedObjects;
-            PrepareDeleteObjects =
-                PrepareDeleteObjects.FindAll(x => !(x is SM_Node) || (x as SM_Node).CanBeDeleted);
-
-
-            PrepareDeleteObjects = PrepareDeleteObjects.OrderBy(x => x.ToString().Contains("->")).ToList();
+            PrepareDeleteObjects = SelectedObjects
+                .Where(x => !(x is SM_Node) || (x as SM_Node).CanBeDeleted).ToList();
         }
 
         if (PrepareDeleteObjects.Count > 0)
@@ -551,10 +529,10 @@
         }
     }
 
-
     private static bool b_SelectNodes = false;
     private static Rect SelectNodesRect = new Rect(0, 0, 0, 0);
     private static Vector2 SelectNodesStartPos = Vector2.zero;
+
     private void EditGraphWindow(int windowId)
     {
         Draw_BGGrid();
@@ -580,11 +558,13 @@
             EditGraphDragOffset += Event.current.delta;
         }
 
-        SMachineSaveData.States.ToList().ForEach(x => x.DrawLinks());
-        SMachineSaveData.States.ToList().ForEach(x => x.DrawNode(EditGraphDragOffset));
+        foreach (var states in SMachineSaveData.States)
+        {
+            states.DrawLinks();
+            states.DrawNode(EditGraphDragOffset);
+        }
 
-        //Graphics.DrawTexture(Nottorus.CreateRect(Vector2.zero, EditGraphRect.size), Res.EditGraphOverlay, 150, 150, 110, 100);
-        Graphics.DrawTexture(Nottorus.CreateRect(Vector2.zero, EditGraphRect.size), Res.NSM_Window_BG, 25, 25, 25, 25);
+        Graphics.DrawTexture(new Rect(Vector2.zero, EditGraphRect.size), Res.NSM_Window_BG, 25, 25, 25, 25);
     }
 
     private void SelectNodes()
@@ -597,19 +577,17 @@
                 {
                     b_SelectNodes = true;
                     SelectNodesStartPos = GlobalMousePos;
-                    if(!Event.current.control)
+                    if (!Event.current.control)
                         ClearSelection();
                 };
             }
         }
 
-
         if (!Global_MouseInEditGraph)
         {
             b_SelectNodes = false;
         }
 
-
         if (Event.current.type == EventType.MouseUp)
         {
             b_SelectNodes = false;
@@ -619,10 +597,8 @@
         {
             Vector2 offsetSelection = GlobalMousePos - SelectNodesStartPos;
             {
-                SelectNodesRect.x = SelectNodesStartPos.x;
-                SelectNodesRect.y = SelectNodesStartPos.y;
-                SelectNodesRect.width = offsetSelection.x;
-                SelectNodesRect.height = offsetSelection.y;
+                SelectNodesRect.position = SelectNodesStartPos;
+                SelectNodesRect.size = offsetSelection;
 
                 if (SelectNodesRect.width < 0)
                 {
@@ -645,7 +621,7 @@
 
     private void ToolbarWindow(int windowId)
     {
-        Graphics.DrawTexture(Nottorus.CreateRect(Vector2.zero, ToolbarRect.size), Res.BaseWindow, 25, 25, 25, 25);
+        Graphics.DrawTexture(new Rect(Vector2.zero, ToolbarRect.size), Res.BaseWindow, 25, 25, 25, 25);
 
         if (SelectedObjects.Count == 0)
             return;
@@ -661,7 +637,6 @@
         {
             var selectedNode = SelectedObjects[0] as SM_Node;
 
-     
             GUI.Label(new Rect(5, DrawPosY, 60, 20), "Events:", Res.Box_Borders);
             DrawPosY += 19;
             GUI.Box(new Rect(5, DrawPosY, ToolbarWidth - 10, 65), "", Res.Box);
@@ -671,7 +646,6 @@
                 selectedNode.DoBeforeEntering.Drawbl.Open();
             DrawPosY += 20;
 
-
             if (GUI.Button(new Rect(10, DrawPosY, ToolbarWidth - 20, 16), selectedNode.DoBeforeLeaving.Drawbl.Config.Name, Res.NormalStyle))
                 selectedNode.DoBeforeLeaving.Drawbl.Open();
             DrawPosY += 20;
@@ -679,13 +653,11 @@
             if (GUI.Button(new Rect(10, DrawPosY, ToolbarWidth - 20, 16), selectedNode.StateLoop.Drawbl.Config.Name, Res.NormalStyle))
                 selectedNode.StateLoop.Drawbl.Open();
             DrawPosY += 20;
-
         }
         else if (SelectedObjects[0] is SM_NodeTransition)
         {
             var transition = SelectedObjects[0] as SM_NodeTransition;
 
-
             GUI.Box(new Rect(5, DrawPosY, ToolbarWidth - 10, 50), "", Res.Box);
             DrawPosY += 5;
             Nottorus.DrawCheckBoxRight(new Rect(10, DrawPosY, 150, 20), "Has Transition Time",
@@ -703,9 +675,6 @@
 
             DrawPosY += 30;
 
-     
-
-
             GUI.Label(new Rect(5, DrawPosY, 120, 20), "Transition Mode:", Res.Box_Borders);
             DrawPosY += 19;
 
@@ -724,10 +693,9 @@
             else if (transition.TransitMode == SM_TransitionMode.Trigger)
                 selValue = 4;
 
-
             var selectRect = new Rect(10, DrawPosY, 150, 80);
 
-            var radioVariants = new string[] {"Never", "Always", "Code Condition", "Conditions", "Trigger"};
+            var radioVariants = new string[] { "Never", "Always", "Code Condition", "Conditions", "Trigger" };
 
             int transitionMode = Nottorus.DrawRadioBox(selectRect, selValue, radioVariants);
 
@@ -750,8 +718,6 @@
                 selectRect.y += 20;
             }
 
-           
-
             if (transitionMode == 0)
             {
                 transition.TransitMode = SM_TransitionMode.Never;
@@ -773,7 +739,6 @@
                 transition.TransitMode = SM_TransitionMode.Trigger;
             }
 
-
             if (transition.TransitMode != SM_TransitionMode.Code)
             {
                 if (Nottorus.CurClass.CurrentDrawable.DrawType == Nottorus.DrawableType.StateMachine_TransitionCondition &&
@@ -803,9 +768,6 @@
                 {
                     selected = vars.IndexOf(transition.TriggerCondition.Var);
                 }
-
-                List<string> names = vars.Select(x => x.Config.Name).ToList();
-
                 var selectVarBoxRect = new Rect(10, DrawPosY, buttonWidth, 18);
 
                 if (selectVarBoxRect.Contains(Event.current.mousePosition))
@@ -813,8 +775,7 @@
                     GUIToolTipe = "Select script bool variable for trigger";
                 }
 
-
-                int selVar = EditorGUI.Popup(selectVarBoxRect, selected, names.ToArray(),
+                int selVar = EditorGUI.Popup(selectVarBoxRect, selected, vars.Select(x => x.Config.Name).ToArray(),
                     Res.PopupButton);
 
                 if (selected != selVar)
@@ -825,9 +786,8 @@
             }
             else if (transition.TransitMode == SM_TransitionMode.Conditions)
             {
-              
                 GUI.Label(new Rect(5, DrawPosY, 80, 20), "Conditions:", Res.Box_Borders);
-              
+
                 DrawPosY += 19;
 
                 GUI.Box(new Rect(5, DrawPosY, ToolbarWidth - 10, transition.ConditionsFoldHeight), "", Res.Box);
@@ -836,10 +796,10 @@
                 foreach (var cond in transition.Conditions)
                 {
                     float buttonWidth = 180;
-              
+
                     if (cond.Var != null)
                     {
-                        if (cond.Var.Config.NodeRefType.PType == typeof (bool))
+                        if (cond.Var.Config.NodeRefType.PType == typeof(bool))
                         {
                             buttonWidth = ToolbarRect.width - 110;
 
@@ -849,7 +809,7 @@
 
                             cond.Condition_Bool = newSelected == 0;
                         }
-                        else if (cond.Var.Config.NodeRefType.PType == typeof (float))
+                        else if (cond.Var.Config.NodeRefType.PType == typeof(float))
                         {
                             buttonWidth = ToolbarRect.width - 155;
 
@@ -871,12 +831,11 @@
                                 cond.CType = ConditionType.Less;
                             }
 
- 
                             cond.Condition_Float =
                                 EditorGUI.FloatField(new Rect(ToolbarRect.width - 70, DrawPosY, 33, 18),
                                     cond.Condition_Float, Res.TextField);
                         }
-                        else if (cond.Var.Config.NodeRefType.PType == typeof (int))
+                        else if (cond.Var.Config.NodeRefType.PType == typeof(int))
                         {
                             buttonWidth = ToolbarRect.width - 155;
 
@@ -910,9 +869,7 @@
                     {
                         selected = vars.IndexOf(cond.Var);
                     }
-
-                    List<string> names = vars.Select(x => x.Config.Name).ToList();
-
+                    
                     var selectVarBoxRect = new Rect(10, DrawPosY, buttonWidth, 18);
 
                     if (selectVarBoxRect.Contains(Event.current.mousePosition))
@@ -920,38 +877,32 @@
                         GUIToolTipe = "Select variable";
                     }
 
-
-                    int selVar = EditorGUI.Popup(selectVarBoxRect, selected, names.ToArray(),
-                        Res.PopupButton);
+                    int selVar = EditorGUI.Popup(selectVarBoxRect, selected, vars
+                        .Select(x => x.Config.Name).ToArray(), Res.PopupButton);
 
                     if (selected != selVar)
                     {
                         cond.Var = vars[selVar];
                     }
-                     
+
                     if (GUI.Button(new Rect(ToolbarWidth - 30, DrawPosY, 18, 18), "X", Res.ButtonSimple))
                     {
                         transition.Conditions.Remove(cond);
                         break;
                     }
 
-
-                   DrawPosY += 20;
+                    DrawPosY += 20;
                 }
 
-
                 if (GUI.Button(new Rect(ToolbarWidth - 50, DrawPosY, 40, 20), "New",
                     Res.AddButton))
                 {
                     transition.Conditions.Add(new TransitionCondition());
                 }
 
-           
-
                 DrawPosY += 25;
 
                 transition.ConditionsFoldHeight = DrawPosY - transition.ConditionsFoldHeight;
-
             }
 
             DrawPosY += 5;
@@ -963,12 +914,10 @@
 
             DrawPosY += 5;
 
-
             if (GUI.Button(new Rect(10, DrawPosY, ToolbarWidth - 20, 16), transition.OnStartTransit.Drawbl.Config.Name, Res.NormalStyle))
                 transition.OnStartTransit.Drawbl.Open();
             DrawPosY += 20;
 
-
             if (GUI.Button(new Rect(10, DrawPosY, ToolbarWidth - 20, 16), transition.OnEndTransit.Drawbl.Config.Name, Res.NormalStyle))
                 transition.OnEndTransit.Drawbl.Open();
             DrawPosY += 20;
@@ -993,22 +942,19 @@
             }
             DrawPosY += 20;
 
-            Graphics.DrawTexture(Nottorus.CreateRect(Vector2.zero, ToolbarRect.size), 
+            Graphics.DrawTexture(new Rect(Vector2.zero, ToolbarRect.size),
                 Res.NSM_Window_BG, 25, 25, 25, 25);
         }
     }
 
-
-
     private void ControlBarWindow(int windowId)
     {
-        Graphics.DrawTexture(Nottorus.CreateRect(Vector2.zero, ControlBarRect.size), Res.BaseWindow, 5, 5, 5, 5);
+        Graphics.DrawTexture(new Rect(Vector2.zero, ControlBarRect.size), Res.BaseWindow, 5, 5, 5, 5);
 
         var node = SelectedObjects[0] as SM_Node;
 
         float DrawPosY = 5;
 
-
         GUI.Label(new Rect(5, DrawPosY, 120, 20), "Node transitions:", Res.Box_Borders);
         DrawPosY += 20;
 
@@ -1017,7 +963,6 @@
         GUI.Label(new Rect(ToolbarWidth - 50, DrawPosY, 100, 20), "Priority", Res.SubLabel);
         DrawPosY += 20;
 
-
         foreach (var transition in node.Transitions)
         {
             if (GUI.Button(new Rect(10, DrawPosY, ToolbarWidth - 70, 16),
@@ -1052,12 +997,10 @@
 
         GUI.Box(new Rect(ToolbarWidth - 55, 25, 50, DrawPosY - 24), "", Res.Box_Borders);
 
-
         DrawPosY += 5;
         ControlbarHeight = DrawPosY;
     }
 
-
     private void LinkNodes(SM_Node startNode, SM_Node endNode)
     {
         if (startNode == null || endNode == null)
@@ -1082,6 +1025,7 @@
     {
         SelectedObjects = new List<object>();
     }
+
     private static void SetSelected(object selectedObject, bool clear)
     {
         if (clear)
@@ -1093,20 +1037,17 @@
         }
         else
         {
-            if(!SelectedObjects.Contains(selectedObject))
+            if (!SelectedObjects.Contains(selectedObject))
                 SelectedObjects.Add(selectedObject);
         }
     }
 
-
-
     private Vector2 EditGraphDragOffset
     {
         get { return SMachineSaveData.EditGraphDragOffset; }
         set { SMachineSaveData.EditGraphDragOffset = value; }
     }
 
-
     private Vector2 EditGraphSize = Vector2.zero;
 
     private void Draw_BGGrid()
@@ -1116,35 +1057,28 @@
         float width = Res.NSM_Window_Grid.width;
         float height = Res.NSM_Window_Grid.height;
 
-
-        int scaleTex = (int) ((Res.NSM_Window_Grid.width*Zoom)/width);
+        int scaleTex = (int)((Res.NSM_Window_Grid.width * Zoom) / width);
 
         width *= scaleTex;
         height *= scaleTex;
 
+        int startPosX = Mathf.RoundToInt(-EditGraphDragOffset.x / width) - 1;
+        int startPosY = Mathf.RoundToInt(-EditGraphDragOffset.y / height) - 1;
 
-
-
-
-        int startPosX = Mathf.RoundToInt(-EditGraphDragOffset.x/width) - 1;
-        int startPosY = Mathf.RoundToInt(-EditGraphDragOffset.y/height) - 1;
-
-        int countX = Mathf.CeilToInt((EditGraphSize.x*Zoom)/width) + 2;
-        int countY = Mathf.CeilToInt((EditGraphSize.y*Zoom)/width) + 2;
-
+        int countX = Mathf.CeilToInt((EditGraphSize.x * Zoom) / width) + 2;
+        int countY = Mathf.CeilToInt((EditGraphSize.y * Zoom) / width) + 2;
 
         for (float x = startPosX; x < startPosX + countX; x++)
         {
             for (float y = startPosY; y < startPosY + countY; y++)
             {
                 GUI.DrawTexture(
-                    Nottorus.CreateRect(x*width + EditGraphDragOffset.x, y*height + EditGraphDragOffset.y, width, height),
+                    new Rect(x * width + EditGraphDragOffset.x, y * height + EditGraphDragOffset.y, width, height),
                     Res.NSM_Window_Grid);
             }
         }
     }
 
-
     ///
     private void OpenMenu()
     {
@@ -1153,29 +1087,16 @@
             new MenuCommendItem("Create State", MenuCommend.CreateState)
         };
 
-
         ShowMenu(commands);
     }
 
-
-
-
-
-
-
-
-
-
-
-
-
     public class SM_Node
     {
         public bool FoldOpened = false;
+
         /////////
         public SM_Node() { }
 
-
         public SM_Node(SM_NodeType nodeType, string nodeName, float posX, float posY)
         {
             NodeType = nodeType;
@@ -1211,8 +1132,8 @@
 
                 return null;
             }
-            else if (drawType == Nottorus.DrawableType.StateMachine_TransitionEvent || 
-                drawType == Nottorus.DrawableType.StateMachine_TransitionCondition || 
+            else if (drawType == Nottorus.DrawableType.StateMachine_TransitionEvent ||
+                drawType == Nottorus.DrawableType.StateMachine_TransitionCondition ||
                 drawType == Nottorus.DrawableType.StateMachine_TransitionPosition)
             {
                 Nottorus.m_StateMachineDrawbl result = null;
@@ -1230,11 +1151,12 @@
 
         public List<Nottorus.BaseScriptObject> GetAllDrawbls()
         {
-            var result = new List<Nottorus.BaseScriptObject>();
-
-            result.Add(DoBeforeEntering.GetDrawbl());
-            result.Add(DoBeforeLeaving.GetDrawbl());
-            result.Add(StateLoop.GetDrawbl());
+            var result = new List<Nottorus.BaseScriptObject>
+            {
+                DoBeforeEntering.GetDrawbl(),
+                DoBeforeLeaving.GetDrawbl(),
+                StateLoop.GetDrawbl()
+            };
             Transitions.ForEach(x => result.AddRange(x.GetAllDrawbls()));
             return result;
         }
@@ -1247,8 +1169,10 @@
 
         [XmlIgnore]
         public float EntryHighlite = 0;
+
         [XmlIgnore]
         public float ExitHighlite = 0;
+
         [XmlIgnore]
         public float LoopHighlite = 0;
 
@@ -1257,7 +1181,6 @@
             get { return NodeType == SM_NodeType.Entry; }
         }
 
-
         public bool CanBeDeleted
         {
             get
@@ -1302,6 +1225,7 @@
         public Rect DrawRect = new Rect();
 
         private bool DragNode = false;
+
         public bool IsSelected
         {
             get { return SelectedObjects.Contains(this); }
@@ -1325,8 +1249,6 @@
                 };
             }
 
-
-
             if (_LMB_Up)
             {
                 DragNode = false;
@@ -1338,11 +1260,6 @@
                 PosY += Event.current.delta.y;
             }
 
-
-
-
-
-
             VisualDraw(offset);
         }
 
@@ -1351,7 +1268,6 @@
             float rPosX = (Mathf.RoundToInt(PosX / 12) + 1) * 12;
             float rPosY = Mathf.RoundToInt(PosY / 12) * 12;
 
-
             Width = Mathf.RoundToInt(Width / 12) * 12;
 
             DrawRect.x = rPosX + offset.x;
@@ -1455,11 +1371,8 @@
                 ExitHighlite -= Time.deltaTime / 2;
             }
 
-
             GUI.Box(DrawRect, "", nodeStyle);
 
-
-
             float labelSize = 0;
             if (RenamingNode)
             {
@@ -1513,7 +1426,6 @@
                         RenamingNode = false;
                     }
                 }
-             
             }
         }
 
@@ -1563,7 +1475,6 @@
             {
                 code += "\r\n" + Nottorus.cg_GetSpacing();
                 code += StateCodeName + ".DoBeforeEntering = " + DoBeforeEntering.Drawbl.CodeName + ";";
-         
             }
             if (DoBeforeLeaving.Drawbl.HasCode)
             {
@@ -1588,7 +1499,6 @@
             code += "\r\n" + Nottorus.cg_GetSpacing();
             code += StateCodeName + ".DoBeforeEntering += delegate { SM_Utils.InvokeSM(" + NodeId + ", 0, 1, this, 1, true); };";
 
-
             code += "\r\n" + Nottorus.cg_GetSpacing();
             code += StateCodeName + ".DoBeforeLeaving += delegate { SM_Utils.InvokeSM(" + NodeId + ", 0, 2, this, 1, true); };";
 
@@ -1597,7 +1507,6 @@
 
             Transitions.ForEach(x => code += x.GetDebugCode());
 
-
             return code;
         }
 
@@ -1619,20 +1528,18 @@
             return code;
         }
 
-
-
-
         public string StateCodeName
         {
             get { return "_state_" + NodeId; }
         }
+
         ////////////////////////////////////////////////////
     }
 
-
     public class SM_NodeTransition
     {
         public bool FoldOpened = false;
+
         public SM_NodeTransition()
         {
         }
@@ -1641,7 +1548,7 @@
         {
             LinkedWith_Id = node.NodeId;
             _linkedNode = node;
-            
+
             OnStartTransit = new SM_Event("On Start Transition", SMachineSaveData.UniqIdentId, Nottorus.DrawableType.StateMachine_TransitionEvent);
             OnEndTransit = new SM_Event("On End Transition", SMachineSaveData.UniqIdentId, Nottorus.DrawableType.StateMachine_TransitionEvent);
             TransitPosition = new SM_Event("Transition Loop", SMachineSaveData.UniqIdentId, Nottorus.DrawableType.StateMachine_TransitionPosition);
@@ -1670,7 +1577,6 @@
             get { return OwnerNode.NodeName + " -> " + LinkedNode.NodeName; }
         }
 
-
         public Nottorus.m_StateMachineDrawbl GetTransitionDrawbl(int objectId, Nottorus.DrawableType drawType)
         {
             if (drawType == Nottorus.DrawableType.StateMachine_TransitionEvent)
@@ -1683,7 +1589,6 @@
 
                 result = OnEndTransit.GetDrawbl(objectId);
                 if (result != null) return result;
-
             }
             else if (drawType == Nottorus.DrawableType.StateMachine_TransitionCondition)
             {
@@ -1696,19 +1601,18 @@
             return null;
         }
 
-
         public List<Nottorus.BaseScriptObject> GetAllDrawbls()
         {
-            var result = new List<Nottorus.BaseScriptObject>();
-
-            result.Add(TestAllowTransit.GetDrawbl());
-            result.Add(OnStartTransit.GetDrawbl());
-            result.Add(OnEndTransit.GetDrawbl());
-            result.Add(TransitPosition.GetDrawbl());
+            var result = new List<Nottorus.BaseScriptObject>
+            {
+                TestAllowTransit.GetDrawbl(),
+                OnStartTransit.GetDrawbl(),
+                OnEndTransit.GetDrawbl(),
+                TransitPosition.GetDrawbl()
+            };
             return result;
         }
 
-
         public int LinkedWith_Id;
         private SM_Node _linkedNode = null;
         private SM_Node _ownerNode = null;
@@ -1718,11 +1622,10 @@
 
         public SM_TransitionMode TransitMode = SM_TransitionMode.Never;
 
-        public List<TransitionCondition> Conditions = new List<TransitionCondition>(); 
+        public List<TransitionCondition> Conditions = new List<TransitionCondition>();
 
         public TransitionCondition TriggerCondition = new TransitionCondition();
 
-
         public SM_Node LinkedNode
         {
             get
@@ -1733,6 +1636,7 @@
                 return _linkedNode;
             }
         }
+
         public SM_Node OwnerNode
         {
             get
@@ -1749,7 +1653,6 @@
             get { return SelectedObjects.Contains(this); }
         }
 
-
         private int ConditionsCount
         {
             get
@@ -1781,7 +1684,6 @@
 
             int lineWidth = 2;
 
-       
             if (node.EntryNode)
             {
                 if (IsSelected)
@@ -1791,17 +1693,14 @@
             }
             else
             {
-                if(IsSelected)
+                if (IsSelected)
                     drawColor = new Color32(107, 178, 255, 255);
-                else if(ConditionsCount > 0)
+                else if (ConditionsCount > 0)
                     drawColor = new Color32(250, 250, 250, 255);
                 else
                     drawColor = new Color32(128, 128, 128, 255);
             }
 
-          
-
- 
             if (TransitionHighlite > 0)
             {
                 drawColor = new Color(1, 0.5f, 0, 1);
@@ -1831,9 +1730,9 @@
 
             if (TransitionHighlite > 0)
             {
-                Vector2 center = (start + end)/2;
-                var debugRect = Nottorus.CreateRect(center, new Vector2(100, 10));
-                debugRect.x -= debugRect.width/2;
+                Vector2 center = (start + end) / 2;
+                var debugRect = new Rect(center, new Vector2(100, 10));
+                debugRect.x -= debugRect.width / 2;
                 debugRect.y -= 10;
                 Nottorus.ProgressBar.Draw(debugRect, TransitionHighlite);
 
@@ -1842,7 +1741,6 @@
                 else
                     TransitionHighlite -= Time.deltaTime / 2;
             }
-          
 
             if (_LMB_Down || _RMB_Up)
             {
@@ -1857,10 +1755,8 @@
                     {
                         //RMB_Up_Deleg = delegate { NSM.OpenMenu(this); };
                     }
-                
                 }
             }
-            
         }
 
         public string TransitionCodeName
@@ -1972,7 +1868,7 @@
                     var _var = Nottorus.CurScript.FindClassVariableFromID(TriggerCondition.VarRefId);
                     if (_var != null)
                     {
-                        if (_var.Config.NodeRefType.PType == typeof (bool))
+                        if (_var.Config.NodeRefType.PType == typeof(bool))
                         {
                             code += " if(" + _var.Config.Name + ") {" + _var.Config.Name + " = false; return true; } return false;";
                         }
@@ -1980,13 +1876,12 @@
                         {
                             Nottorus.BConsole.CompileLog("Variable '" + _var.Config.Name + "' must have a bool type to using it in a trigger condition of transition: " + TransitionName, 2);
                             return "&ERROR&";
-                        }            
+                        }
                     }
                     else
                     {
                         ignoringCondition = true;
                     }
-
                 }
                 else
                 {
@@ -2020,11 +1915,9 @@
                             if (conditionsCode.Length > 0)
                                 conditionsCode += " && ";
 
-                        
-
                             if (varType == typeof(bool))
                             {
-                                if(!condition.Condition_Bool)
+                                if (!condition.Condition_Bool)
                                     conditionsCode += "!" + _var.Config.Name;
                                 else
                                     conditionsCode += _var.Config.Name;
@@ -2042,10 +1935,10 @@
                                 else if (condition.CType == ConditionType.Greater)
                                     conditionsCode += " > ";
 
-                               // if (varType == typeof(float))
-                                    conditionsCode += condition.Condition_Float;
+                                // if (varType == typeof(float))
+                                conditionsCode += condition.Condition_Float;
                                 //else if (varType == typeof(int))
-                               //     conditionsCode += condition.Condition_Int;
+                                //     conditionsCode += condition.Condition_Int;
                             }
                         }
                         else
@@ -2062,7 +1955,6 @@
                     {
                         Nottorus.BConsole.CompileLog("Can't find variable for condition of transition from node '" + OwnerNode.NodeName + "' to '" + LinkedNode + "'.", 2);
                     }
-
                 }
 
                 if (conditionsCode.Length == 0)
@@ -2074,14 +1966,11 @@
                     code += conditionsCode + "; };";
                 }
 
-                
-
-
                 return code;
             }
             else
             {
-                if(Nottorus.Options.b_ShowDebug)
+                if (Nottorus.Options.b_ShowDebug)
                     Debug.Log("Undefined transition condition: " + TransitMode);
                 return "";
             }
@@ -2092,8 +1981,7 @@
             string code = "";
 
             code += "\r\n" + Nottorus.cg_GetSpacing();
-            code += TransitionCodeName + ".OnStartTransit += delegate { SM_Utils.InvokeSM(" + OwnerNode.NodeId + ", "+ TransitionId + ", 4, this, 1, false); };";
-
+            code += TransitionCodeName + ".OnStartTransit += delegate { SM_Utils.InvokeSM(" + OwnerNode.NodeId + ", " + TransitionId + ", 4, this, 1, false); };";
 
             code += "\r\n" + Nottorus.cg_GetSpacing();
             code += TransitionCodeName + ".OnEndTransit += delegate { SM_Utils.InvokeSM(" + OwnerNode.NodeId + ", " + TransitionId + ", 5, this, 1, false); };";
@@ -2105,10 +1993,6 @@
         }
     }
 
-
-
-
-
     public class TransitionCondition
     {
         public ConditionType CType = ConditionType.Equal;
@@ -2118,6 +2002,7 @@
         private Nottorus.ScriptClassVariable _var;
 
         public bool Condition_Bool = false;
+
         //public int Condition_Int = 0;
         public float Condition_Float = 0;
 
@@ -2140,9 +2025,12 @@
             }
         }
     }
+
     public class SM_Event
     {
-        public SM_Event() {}
+        public SM_Event()
+        {
+        }
 
         public SM_Event(string name, int obj_ID, Nottorus.DrawableType DrawType)
         {
@@ -2194,7 +2082,7 @@
     //if isSegment is true, AB is a segment, not a line.
     private static double LineToPointDistance2D(Vector2 pointA, Vector2 pointB, Vector2 pointC)
     {
-        double dist = CrossProduct(pointA, pointB, pointC)/Distance(pointA, pointB);
+        double dist = CrossProduct(pointA, pointB, pointC) / Distance(pointA, pointB);
 
         double dot1 = DotProduct(pointA, pointB, pointC);
         if (dot1 > 0)
@@ -2214,49 +2102,38 @@
         if (dir.x > 0)
             angle *= -1;
 
-        var offsetVect = dir.Rotate(90) * 5;
-
+        var offsetVect = new Vector2(-dir.y, dir.x) * 5;
 
         start += offsetVect;
         end += offsetVect;
 
-
-       
-
         var center = (start + end) / 2;
 
         DrawLine(start, center, startColor, width);
         DrawLine(center, end, endColor, width);
 
-
         GUI.color = color;
-        
+
         for (int i = 0; i < count; i++)
         {
-            int num = i;
-            
-            if (num > 0)
+            if (i > 0)
             {
-                var cOffset = dir * 12 * num;
-                if (num % 2 == 0)
-                {
+                var cOffset = dir * 12 * i;
+                if (i % 2 == 0)
                     center += cOffset;
-                }
                 else
-                {
                     center -= cOffset;
-                }
             }
 
             var arrowDrawRect = new Rect(center.x, center.y, 12, 12);
             DrawtextureWithRot(arrowDrawRect, Res.NSM_TransitionArrow, angle);
         }
+
         GUI.color = Color.white;
 
-        return new Vector2[] {start, end};
+        return new Vector2[] { start, end };
     }
 
-
     private void OpenMenu(SM_NodeTransition transition)
     {
         /*
@@ -2267,7 +2144,6 @@
             new MenuCommendItem("Duplicate Transition", MenuCommend.DuplicateTransition)
         };
 
-
         ShowMenu(commands);
         */
     }
@@ -2277,7 +2153,6 @@
         SetSelected(node, true);
         var commands = new List<MenuCommendItem>();
 
-
         if (node.NodeType == SM_NodeType.Entry)
         {
             if (node.Transitions.Count == 0)
@@ -2285,23 +2160,18 @@
         }
         else if (node.NodeType == SM_NodeType.Exit)
         {
-       
         }
         else
         {
             commands.Add(new MenuCommendItem("Make Transition", MenuCommend.MakeTransition));
         }
 
-    
-
-       // if (node.NodeType != SM_NodeType.Entry && node.NodeType != SM_NodeType.Exit && node.NodeType != SM_NodeType.Main)
-      //      commands.Add(new MenuCommendItem("Set Default Node", MenuCommend.SetStartNode));
-      
+        // if (node.NodeType != SM_NodeType.Entry && node.NodeType != SM_NodeType.Exit && node.NodeType != SM_NodeType.Main)
+        //      commands.Add(new MenuCommendItem("Set Default Node", MenuCommend.SetStartNode));
 
         ShowMenu(commands);
     }
 
-
     private void MenuCallback(object retObj)
     {
         var usedCommand = retObj as MenuCommendItem;
@@ -2339,8 +2209,6 @@
         transition.OwnerNode.DeleteTransition(transition);
     }
 
-
-
     private void ShowMenu(List<MenuCommendItem> commands)
     {
         if (commands.Count == 0)
@@ -2355,7 +2223,6 @@
         menu.ShowAsContext();
     }
 
-
     private class MenuCommendItem// : GUIContent
     {
         public MenuCommendItem(string itemName, MenuCommend commend, bool Checked = false)
@@ -2368,6 +2235,7 @@
         public string ItemName;
         public MenuCommend Command = MenuCommend.NotDefined;
         public bool Checked = false;
+
         public override string ToString()
         {
             return ItemName;
@@ -2413,7 +2281,6 @@
         //Main
     }
 
-
     private static void DrawtextureWithRot(Rect drawRect, Texture texture, float angle)
     {
         var pos = drawRect.position;
@@ -2427,7 +2294,6 @@
         GUI.matrix = matrixBackup;
     }
 
-
     private static void DrawLine(Vector2 start, Vector2 end, Color color, int width = 2)
     {
         var startTan = end - start;
@@ -2436,5 +2302,4 @@
         Handles.DrawBezier(start, end, start + startTan.normalized, end + endTan.normalized, color, null, width);
         //Handles.DrawLine(start, end);
     }
-
 }
diff -x '*.meta' -ur --strip-trailing-cr .Editor/ScriptObject_Attribute.cs Editor/ScriptObject_Attribute.cs
--- .Editor/ScriptObject_Attribute.cs	2018-06-30 08:59:18.441598100 +0700
+++ Editor/ScriptObject_Attribute.cs	2018-06-30 09:02:03.806508100 +0700
@@ -1,15 +1,9 @@
-﻿using UnityEditor;
+﻿using System;
 using System.Collections.Generic;
-using UnityEngine;
-using UnityEditorInternal;
-
-using System.IO;
-using System;
-using System.Reflection;
-using System.Text.RegularExpressions;
 using System.Linq;
-using System.Xml.Serialization;
-
+using System.Reflection;
+using UnityEditor;
+using UnityEngine;
 
 public partial class Nottorus : EditorWindow
 {
@@ -18,7 +12,6 @@
         //[JsonConstructor]
         public ScriptObject_Attribute() { }
 
-
         public BType AttribStyle = null;
         public List<ScriptObject_Attribute_Parameter> AttribParameters = null;
         public List<ScriptObject_Attribute_Parameter> OptionalAttribParameters = new List<ScriptObject_Attribute_Parameter>();
@@ -77,8 +70,6 @@
 
             ParameterInfo[] pInfos = curConstructor.GetParameters();
 
-
-
             for (int i = 0; i < pInfos.Length; i++)
             {
                 ParameterInfo pInfo = pInfos[i];
@@ -94,7 +85,6 @@
             }
         }
 
-
         private void InitReflectionOptionalParams()
         {
             if (OptionalInitialized) return;
@@ -120,7 +110,6 @@
                 OptionalAttribParameters.Add(newParam);
             }
 
-
             ///Fields
             var atrFields = AttribStyle.PType.GetFields(BindingFlags.Public | BindingFlags.Instance);
 
@@ -150,7 +139,6 @@
 
         public void Draw(AttributeTargets targetType)
         {
-
             float t_f_Offset = 0;
 
             if (AllowAnalogSwitch)
@@ -159,10 +147,9 @@
 
                 float startDrawPosX = ToolbarRect.width - 10;
 
+                GUI.Label(new Rect(startDrawPosX - 20 - t_f_Offset, FoldDrawPosY, 50, 50), Analog_SwitchID + "/" + (Analog_SwitchCount - 1).ToString(), Res.MiddleBoldNameLabel);
 
-                GUI.Label(CreateRect(startDrawPosX - 20 - t_f_Offset, FoldDrawPosY, 50, 50), Analog_SwitchID + "/" + (Analog_SwitchCount - 1).ToString(), Res.MiddleBoldNameLabel);
-
-                Rect switchButtonRect = CreateRect(startDrawPosX - 33 - t_f_Offset, FoldDrawPosY + 2, 12, 12);
+                Rect switchButtonRect = new Rect(startDrawPosX - 33 - t_f_Offset, FoldDrawPosY + 2, 12, 12);
                 GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Lt);
 
                 if (GUI.Button(switchButtonRect, "", Res.EmptyStyle))
@@ -171,7 +158,7 @@
                     InitAttribArgs();
                 }
 
-                switchButtonRect = CreateRect(startDrawPosX - 20, FoldDrawPosY + 2, 12, 12);
+                switchButtonRect = new Rect(startDrawPosX - 20, FoldDrawPosY + 2, 12, 12);
                 GUI.DrawTexture(switchButtonRect, Res.NodeSwitchButton_Rt);
 
                 if (GUI.Button(switchButtonRect, "", Res.EmptyStyle))
@@ -183,7 +170,7 @@
                 t_f_Offset += 30;
             }
 
-            Rect drawRect = CreateRect(0, FoldDrawPosY, ToolbarRect.width - 40 - t_f_Offset, 20);
+            Rect drawRect = new Rect(0, FoldDrawPosY, ToolbarRect.width - 40 - t_f_Offset, 20);
             GUI.DrawTexture(drawRect, Res.ListVar_Norm);
 
             if (AttribStyle != null)
@@ -194,29 +181,26 @@
                 GUI.Label(labelRect, AttribStyle.PType.Name, Res.NodePinLabel);
             }
 
-
             if (GUI.Button(drawRect, "", Res.EmptyStyle))
             {
                 TypeSelectList.AttribsList_Targets = targetType;
                 TypeSelectList.Show(new Vector2(ToolbarRect.width - 10, GlobalMousePos.y), SetAttribType, TypeSelect_Type.Attribute);
             }
 
-            drawRect = CreateRect(ToolbarRect.width - 40 - t_f_Offset, FoldDrawPosY + 1, 20, 16);
+            drawRect = new Rect(ToolbarRect.width - 40 - t_f_Offset, FoldDrawPosY + 1, 20, 16);
             if (GUI.Button(drawRect, "X", Res.ButtonSimple))
             {
                 SetAttribType(null);
             }
             FoldDrawPosY += 25;
 
-
-
             if (AttribStyle != null)
             {
                 if (AttribParameters != null)
                 {
                     foreach (ScriptObject_Attribute_Parameter parm in AttribParameters)
                     {
-                        //drawRect = CreateRect(5, FoldDrawPosY + 4, ToolbarRect.width - 40, 20);
+                        //drawRect = new Rect(5, FoldDrawPosY + 4, ToolbarRect.width - 40, 20);
                         //GUI.Label(drawRect, parm.Name, Res.NodePinLabel);
 
                         DrawTempVar(parm.AttribTempVar, parm.AttribParameterType.PType, 5, FoldDrawPosY, parm.Name, null, 0);
@@ -226,19 +210,17 @@
                 }
             }
 
-            GUI.Label(CreateRect(5, FoldDrawPosY, 100, 20), "Optional:", Res.Label);
+            GUI.Label(new Rect(5, FoldDrawPosY, 100, 20), "Optional:", Res.Label);
             FoldDrawPosY += 20;
 
             foreach (var parm in OptionalAttribParameters)
             {
-   
-
                 var guiEn = GUI.enabled;
                 GUI.enabled = parm.Used;
                 DrawTempVar(parm.AttribTempVar, parm.AttribParameterType.PType, 25, FoldDrawPosY, parm.Name, null, 0);
                 GUI.enabled = guiEn;
 
-                drawRect = CreateRect(5, FoldDrawPosY, ToolbarRect.width - 40, 20);
+                drawRect = new Rect(5, FoldDrawPosY, ToolbarRect.width - 40, 20);
                 parm.Used = EditorGUI.Toggle(drawRect, parm.Used, Res.CheckBoxButton);
 
                 //drawRect.x -= 25;
@@ -250,9 +232,7 @@
                 FoldDrawPosY += 25;
             }
 
-
             FoldDrawPosY += 5;
-
         }
 
         public string GetAttributeCode()
@@ -265,7 +245,6 @@
             code = "\r\n" + cg_GetSpacing() + "[";
             code += RenameType_ForCompilation(AttribStyle.PType);
             AddNewAssembly(AttribStyle.PType);
-        
 
             bool mainParameters = AttribParameters != null && AttribParameters.Count > 0;
             if (mainParameters || OptionalAttribParameters.Count > 0)
@@ -293,7 +272,6 @@
                 code += ")";
             }
 
-     
             code += "]";
             return code;
         }
